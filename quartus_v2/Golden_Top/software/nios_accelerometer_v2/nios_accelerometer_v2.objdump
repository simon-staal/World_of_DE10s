
nios_accelerometer_v2.elf:     file format elf32-littlenios2
nios_accelerometer_v2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002204 memsz 0x00002204 flags r-x
    LOAD off    0x00003224 vaddr 0x00002224 paddr 0x000022cc align 2**12
         filesz 0x000000a8 memsz 0x000000a8 flags rw-
    LOAD off    0x00003374 vaddr 0x00002374 paddr 0x00002374 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001f80  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000124  00002100  00002100  00003100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a8  00002224  000022cc  00003224  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00002374  00002374  00003374  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00002494  00002494  000032cc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000480  00000000  00000000  00003300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00004cd3  00000000  00000000  00003780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ff6  00000000  00000000  00008453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00003eab  00000000  00000000  0000a449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000608  00000000  00000000  0000e2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000191d  00000000  00000000  0000e8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000568d  00000000  00000000  00010219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  000158a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a58  00000000  00000000  000158b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00017933  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00017936  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017939  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001793a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001793b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00017944  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001794d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00017956  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  00017968  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00002100 l    d  .rodata	00000000 .rodata
00002224 l    d  .rwdata	00000000 .rwdata
00002374 l    d  .bss	00000000 .bss
00002494 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/intelFPGA_lite/ip_labs/lab_3/Golden_Top/software/nios_accelerometer_v2_bsp//obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002224 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001f2c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
0000238c g     O .bss	00000004 alt_instruction_exception_handler
00001d60 g     F .text	0000002c alt_main
0000023c g     F .text	00000010 led_write
00002394 g     O .bss	00000100 alt_irq
000022cc g       *ABS*	00000000 __flash_rwdata_start
00000d10 g     F .text	00000070 .hidden __fixsfsi
000001bc g     F .text	00000080 sys_timer_isr
000022b0 g     O .rwdata	00000004 jtag_uart
00002014 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00001e14 g     F .text	0000005c alt_up_accelerometer_spi_read_x_axis
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002390 g     O .bss	00000004 errno
00002384 g     O .bss	00000004 alt_argv
0000a2a8 g       *ABS*	00000000 _gp
00002250 g     O .rwdata	00000030 alt_fd_list
00001fa0 g     F .text	00000070 alt_find_dev
000020bc g     F .text	00000028 memcpy
000017d4 g     F .text	000000b8 .hidden __floatsidf
0000201c g     F .text	00000070 alt_exception_cause_generated_bad_addr
00001b44 g     F .text	00000064 .hidden __udivsi3
000022b4 g     O .rwdata	00000004 alt_max_fd
00001c4c g     F .text	00000090 alt_irq_register
00002494 g       *ABS*	00000000 __bss_end
0000237c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00002280 g     O .rwdata	00000028 alt_dev_null
00001f28 g     F .text	00000004 alt_dcache_flush_all
000022cc g       *ABS*	00000000 __ram_rwdata_end
00000280 g     F .text	0000004c timer_init
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
000022b8 g     O .rwdata	00000008 alt_dev_list
00002224 g       *ABS*	00000000 __ram_rodata_end
00002378 g     O .bss	00000001 led
00001ba8 g     F .text	0000005c .hidden __umodsi3
00002494 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
000019fc g     F .text	00000054 .hidden __clzsi2
00000180 g     F .text	0000003c _start
00002374 g     O .bss	00000004 level
00001dac g     F .text	00000010 alt_sys_init
00001dc4 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00000d80 g     F .text	00000124 .hidden __floatsisf
00001c04 g     F .text	00000028 .hidden __mulsi3
00002224 g       *ABS*	00000000 __ram_rwdata_start
00002100 g       *ABS*	00000000 __ram_rodata_start
00001e70 g     F .text	0000005c alt_up_accelerometer_spi_read_y_axis
0000208c g     F .text	00000030 memcmp
00002494 g       *ABS*	00000000 __alt_stack_base
00000ea4 g     F .text	00000930 .hidden __divdf3
000022a8 g     O .rwdata	00000004 TAPS
00001f34 g     F .text	0000006c alt_dev_llist_insert
00002374 g       *ABS*	00000000 __bss_start
00001c2c g     F .text	00000020 memset
00000364 g     F .text	00000140 main
00002380 g     O .bss	00000004 alt_envp
0000188c g     F .text	00000170 .hidden __truncdfsf2
000022c8 g     O .rwdata	00000004 alt_errno
00001a50 g     F .text	00000080 .hidden __divsi3
00000910 g     F .text	00000400 .hidden __mulsf3
00002100 g       *ABS*	00000000 __flash_rodata_start
00001d8c g     F .text	00000020 alt_irq_init
00002118 g     O .rodata	00000100 .hidden __clz_tab
00002388 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00002379 g     O .bss	00000001 pwm
000022c0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001dbc g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000002cc g     F .text	00000098 LPF
000022cc g       *ABS*	00000000 _edata
00002494 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00001ad0 g     F .text	00000074 .hidden __modsi3
00001ecc g     F .text	0000005c alt_up_accelerometer_spi_read_z_axis
00010000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000024c g     F .text	00000034 convert_read
0000000c g       .entry	00000000 _exit
00001dd8 g     F .text	00000020 alt_up_accelerometer_spi_read
00001df8 g     F .text	0000001c alt_up_accelerometer_spi_write
000020e4 g     F .text	0000001c strlen
00002010 g     F .text	00000004 alt_icache_flush_all
000022ac g     O .rwdata	00000004 alt_priority_mask
000004a4 g     F .text	0000046c .hidden __addsf3
00001cdc g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 10c:	04000034 	movhi	r16,0
 110:	8408e504 	addi	r16,r16,9108
    i = 0;
 114:	000b883a 	mov	r5,zero
    mask = 1;
 118:	00800044 	movi	r2,1
      if (active & mask)
 11c:	1888703a 	and	r4,r3,r2
 120:	20000b26 	beq	r4,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context, i); 
 124:	280490fa 	slli	r2,r5,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	183ff51e 	bne	r3,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1004907a 	slli	r2,r2,1
      i++;
 154:	29400044 	addi	r5,r5,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a03917 	ldw	r2,-32540(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     18c:	d6a8aa14 	ori	gp,gp,41640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     194:	1088dd14 	ori	r2,r2,9076

    movhi r3, %hi(__bss_end)
     198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     19c:	18c92514 	ori	r3,r3,9364

    beq r2, r3, 1f
     1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
     1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1b0:	0001cdc0 	call	1cdc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1b4:	0001d600 	call	1d60 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
     1bc:	00800074 	movhi	r2,1
     1c0:	10040035 	stwio	zero,4096(r2)

    if (pwm < abs(level)) {
     1c4:	d0e03317 	ldw	r3,-32564(gp)
     1c8:	d1203447 	ldb	r4,-32559(gp)
     1cc:	1805883a 	mov	r2,r3
     1d0:	1800010e 	bge	r3,zero,1d8 <sys_timer_isr+0x1c>
     1d4:	00c5c83a 	sub	r2,zero,r3
     1d8:	2080110e 	bge	r4,r2,220 <sys_timer_isr+0x64>

        if (level < 0) {
            led_write(led << 1);
     1dc:	d0a03403 	ldbu	r2,-32560(gp)
        if (level < 0) {
     1e0:	18000c0e 	bge	r3,zero,214 <sys_timer_isr+0x58>
            led_write(led << 1);
     1e4:	1004907a 	slli	r2,r2,1
     1e8:	10803fcc 	andi	r2,r2,255
    IOWR(LED_BASE, 0, led_pattern);
     1ec:	00c00074 	movhi	r3,1
     1f0:	18840835 	stwio	r2,4128(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
     1f4:	d0a03443 	ldbu	r2,-32559(gp)
     1f8:	10c03fcc 	andi	r3,r2,255
     1fc:	18c0201c 	xori	r3,r3,128
     200:	18ffe004 	addi	r3,r3,-128
     204:	18c00450 	cmplti	r3,r3,17
     208:	1800091e 	bne	r3,zero,230 <sys_timer_isr+0x74>
        pwm = 0;
     20c:	d0203445 	stb	zero,-32559(gp)
     210:	f800283a 	ret
            led_write(led >> 1);
     214:	10803fcc 	andi	r2,r2,255
     218:	1004d07a 	srli	r2,r2,1
     21c:	003ff306 	br	1ec <sys_timer_isr+0x30>
        led_write(led);
     220:	d0e03403 	ldbu	r3,-32560(gp)
    IOWR(LED_BASE, 0, led_pattern);
     224:	00800074 	movhi	r2,1
     228:	10c40835 	stwio	r3,4128(r2)
}
     22c:	003ff106 	br	1f4 <sys_timer_isr+0x38>
    } else {
        pwm++;
     230:	10800044 	addi	r2,r2,1
     234:	d0a03445 	stb	r2,-32559(gp)
    }

}
     238:	f800283a 	ret

0000023c <led_write>:
    IOWR(LED_BASE, 0, led_pattern);
     23c:	21003fcc 	andi	r4,r4,255
     240:	00800074 	movhi	r2,1
     244:	11040835 	stwio	r4,4128(r2)
}
     248:	f800283a 	ret

0000024c <convert_read>:
    acc_read += OFFSET;
     24c:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
     250:	2007d1ba 	srai	r3,r4,6
    * level = (acc_read >> 1) & 0x1f;
     254:	2009d07a 	srai	r4,r4,1
    * led = (8 >> val) | (8 << (8 - val));
     258:	19c001cc 	andi	r7,r3,7
     25c:	00c00204 	movi	r3,8
     260:	19c5c83a 	sub	r2,r3,r7
     264:	1884983a 	sll	r2,r3,r2
     268:	19c7d83a 	sra	r3,r3,r7
    * level = (acc_read >> 1) & 0x1f;
     26c:	210007cc 	andi	r4,r4,31
    * led = (8 >> val) | (8 << (8 - val));
     270:	10c4b03a 	or	r2,r2,r3
     274:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
     278:	29000015 	stw	r4,0(r5)
}
     27c:	f800283a 	ret

00000280 <timer_init>:

void timer_init(void * isr) {
     280:	deffff04 	addi	sp,sp,-4
     284:	dfc00015 	stw	ra,0(sp)
     288:	200d883a 	mov	r6,r4

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
     28c:	00c000c4 	movi	r3,3
     290:	00800074 	movhi	r2,1
     294:	10c40135 	stwio	r3,4100(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
     298:	10040035 	stwio	zero,4096(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
     29c:	00c24004 	movi	r3,2304
     2a0:	10c40235 	stwio	r3,4104(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
     2a4:	10040335 	stwio	zero,4108(r2)
    alt_irq_register(TIMER_IRQ, 0, isr);
     2a8:	000b883a 	mov	r5,zero
     2ac:	01000044 	movi	r4,1
     2b0:	0001c4c0 	call	1c4c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
     2b4:	00c001c4 	movi	r3,7
     2b8:	00800074 	movhi	r2,1
     2bc:	10c40135 	stwio	r3,4100(r2)

}
     2c0:	dfc00017 	ldw	ra,0(sp)
     2c4:	dec00104 	addi	sp,sp,4
     2c8:	f800283a 	ret

000002cc <LPF>:

float LPF(alt_32 acc_read [TAPS], float coeffs [TAPS]){
     2cc:	defff904 	addi	sp,sp,-28
     2d0:	dd400515 	stw	r21,20(sp)
     2d4:	d5600017 	ldw	r21,-32768(gp)
     2d8:	dd000415 	stw	r20,16(sp)
     2dc:	dcc00315 	stw	r19,12(sp)
     2e0:	dc400115 	stw	r17,4(sp)
     2e4:	dc000015 	stw	r16,0(sp)
     2e8:	dfc00615 	stw	ra,24(sp)
     2ec:	dc800215 	stw	r18,8(sp)
     2f0:	2027883a 	mov	r19,r4
     2f4:	2829883a 	mov	r20,r5
	float avg = 0;
	for (int i = 0; i < TAPS; i++){
     2f8:	0023883a 	mov	r17,zero
	float avg = 0;
     2fc:	0021883a 	mov	r16,zero
	for (int i = 0; i < TAPS; i++){
     300:	8d400a16 	blt	r17,r21,32c <LPF+0x60>
		avg += acc_read[i]*coeffs[i];
	}
	//alt_printf("average data: %f\n", sum);
	return avg;
}
     304:	8005883a 	mov	r2,r16
     308:	dfc00617 	ldw	ra,24(sp)
     30c:	dd400517 	ldw	r21,20(sp)
     310:	dd000417 	ldw	r20,16(sp)
     314:	dcc00317 	ldw	r19,12(sp)
     318:	dc800217 	ldw	r18,8(sp)
     31c:	dc400117 	ldw	r17,4(sp)
     320:	dc000017 	ldw	r16,0(sp)
     324:	dec00704 	addi	sp,sp,28
     328:	f800283a 	ret
		avg += acc_read[i]*coeffs[i];
     32c:	882490ba 	slli	r18,r17,2
	for (int i = 0; i < TAPS; i++){
     330:	8c400044 	addi	r17,r17,1
		avg += acc_read[i]*coeffs[i];
     334:	9c85883a 	add	r2,r19,r18
     338:	11000017 	ldw	r4,0(r2)
     33c:	a4a5883a 	add	r18,r20,r18
     340:	0000d800 	call	d80 <__floatsisf>
     344:	91400017 	ldw	r5,0(r18)
     348:	1009883a 	mov	r4,r2
     34c:	00009100 	call	910 <__mulsf3>
     350:	8009883a 	mov	r4,r16
     354:	100b883a 	mov	r5,r2
     358:	00004a40 	call	4a4 <__addsf3>
     35c:	1021883a 	mov	r16,r2
	for (int i = 0; i < TAPS; i++){
     360:	003fe706 	br	300 <LPF+0x34>

00000364 <main>:

int main() {
     364:	defff804 	addi	sp,sp,-32
     368:	dc000015 	stw	r16,0(sp)
	int i = 0;
    alt_32 x_read [TAPS];
     36c:	d4200017 	ldw	r16,-32768(gp)
int main() {
     370:	dfc00715 	stw	ra,28(sp)
     374:	df000615 	stw	fp,24(sp)
    alt_32 x_read [TAPS];
     378:	800490ba 	slli	r2,r16,2
int main() {
     37c:	df000604 	addi	fp,sp,24
     380:	dcc00315 	stw	r19,12(sp)
     384:	dc800215 	stw	r18,8(sp)
     388:	dd400515 	stw	r21,20(sp)
     38c:	dd000415 	stw	r20,16(sp)
     390:	dc400115 	stw	r17,4(sp)
    alt_32 x_read [TAPS];
     394:	d8b7c83a 	sub	sp,sp,r2
    float coeffs [TAPS];
    float coef = 1.0/TAPS;
     398:	8009883a 	mov	r4,r16
    alt_32 x_read [TAPS];
     39c:	d825883a 	mov	r18,sp
    float coeffs [TAPS];
     3a0:	d8b7c83a 	sub	sp,sp,r2
    float coef = 1.0/TAPS;
     3a4:	00017d40 	call	17d4 <__floatsidf>
     3a8:	100d883a 	mov	r6,r2
     3ac:	180f883a 	mov	r7,r3
     3b0:	0009883a 	mov	r4,zero
     3b4:	014ffc34 	movhi	r5,16368
     3b8:	0000ea40 	call	ea4 <__divdf3>
     3bc:	180b883a 	mov	r5,r3
     3c0:	1009883a 	mov	r4,r2
     3c4:	000188c0 	call	188c <__truncdfsf2>
    float coeffs [TAPS];
     3c8:	d827883a 	mov	r19,sp
    for (int i = 0; i<TAPS; i++){
     3cc:	0007883a 	mov	r3,zero
     3d0:	1c00050e 	bge	r3,r16,3e8 <main+0x84>
      coeffs[i] = coef;
     3d4:	180890ba 	slli	r4,r3,2
    for (int i = 0; i<TAPS; i++){
     3d8:	18c00044 	addi	r3,r3,1
      coeffs[i] = coef;
     3dc:	9909883a 	add	r4,r19,r4
     3e0:	20800015 	stw	r2,0(r4)
    for (int i = 0; i<TAPS; i++){
     3e4:	003ffa06 	br	3d0 <main+0x6c>
    	x_read[i] = 0;
     3e8:	8000010e 	bge	r16,zero,3f0 <main+0x8c>
     3ec:	0021883a 	mov	r16,zero
     3f0:	800c90ba 	slli	r6,r16,2
     3f4:	000b883a 	mov	r5,zero
     3f8:	9009883a 	mov	r4,r18
     3fc:	0001c2c0 	call	1c2c <memset>
    }

    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
     400:	01000034 	movhi	r4,0
     404:	21084004 	addi	r4,r4,8448
     408:	0001dbc0 	call	1dbc <alt_up_accelerometer_spi_open_dev>
     40c:	1023883a 	mov	r17,r2
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
     410:	10001826 	beq	r2,zero,474 <main+0x110>
        return 1;
    }

    timer_init(sys_timer_isr);
     414:	01000034 	movhi	r4,0
     418:	21006f04 	addi	r4,r4,444
     41c:	00002800 	call	280 <timer_init>
	int i = 0;
     420:	0021883a 	mov	r16,zero
    	}
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
        float avg = LPF(x_read, coeffs);

         //alt_printf("raw data: %x\naverage data: %d\n", x_read, temp);
        convert_read(avg, & level, & led);
     424:	d5603404 	addi	r21,gp,-32560
     428:	d5203304 	addi	r20,gp,-32564
    	if (i == TAPS){
     42c:	d0a00017 	ldw	r2,-32768(gp)
     430:	8080011e 	bne	r16,r2,438 <main+0xd4>
    		i = 0;
     434:	0021883a 	mov	r16,zero
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
     438:	800a90ba 	slli	r5,r16,2
     43c:	8809883a 	mov	r4,r17
        //clock_t t = alt_timestamp(NULL);
        // printf("time: %d\n",t);
        i++;
     440:	84000044 	addi	r16,r16,1
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
     444:	914b883a 	add	r5,r18,r5
     448:	0001e140 	call	1e14 <alt_up_accelerometer_spi_read_x_axis>
        float avg = LPF(x_read, coeffs);
     44c:	980b883a 	mov	r5,r19
     450:	9009883a 	mov	r4,r18
     454:	00002cc0 	call	2cc <LPF>
        convert_read(avg, & level, & led);
     458:	1009883a 	mov	r4,r2
     45c:	0000d100 	call	d10 <__fixsfsi>
     460:	a80d883a 	mov	r6,r21
     464:	a00b883a 	mov	r5,r20
     468:	1009883a 	mov	r4,r2
     46c:	000024c0 	call	24c <convert_read>
    while (1) {
     470:	003fee06 	br	42c <main+0xc8>
    }

    return 0;
}
     474:	00800044 	movi	r2,1
     478:	e6fffa04 	addi	sp,fp,-24
     47c:	dfc00717 	ldw	ra,28(sp)
     480:	df000617 	ldw	fp,24(sp)
     484:	dd400517 	ldw	r21,20(sp)
     488:	dd000417 	ldw	r20,16(sp)
     48c:	dcc00317 	ldw	r19,12(sp)
     490:	dc800217 	ldw	r18,8(sp)
     494:	dc400117 	ldw	r17,4(sp)
     498:	dc000017 	ldw	r16,0(sp)
     49c:	dec00804 	addi	sp,sp,32
     4a0:	f800283a 	ret

000004a4 <__addsf3>:
     4a4:	defffc04 	addi	sp,sp,-16
     4a8:	2806d5fa 	srli	r3,r5,23
     4ac:	dc000015 	stw	r16,0(sp)
     4b0:	2020d5fa 	srli	r16,r4,23
     4b4:	200cd7fa 	srli	r6,r4,31
     4b8:	00802034 	movhi	r2,128
     4bc:	2812d7fa 	srli	r9,r5,31
     4c0:	10bfffc4 	addi	r2,r2,-1
     4c4:	1114703a 	and	r10,r2,r4
     4c8:	1b003fcc 	andi	r12,r3,255
     4cc:	dc400115 	stw	r17,4(sp)
     4d0:	84003fcc 	andi	r16,r16,255
     4d4:	115a703a 	and	r13,r2,r5
     4d8:	dfc00315 	stw	ra,12(sp)
     4dc:	dc800215 	stw	r18,8(sp)
     4e0:	500e90fa 	slli	r7,r10,3
     4e4:	681090fa 	slli	r8,r13,3
     4e8:	5007883a 	mov	r3,r10
     4ec:	3023883a 	mov	r17,r6
     4f0:	8317c83a 	sub	r11,r16,r12
     4f4:	32403926 	beq	r6,r9,5dc <__addsf3+0x138>
     4f8:	02c02e0e 	bge	zero,r11,5b4 <__addsf3+0x110>
     4fc:	60004c26 	beq	r12,zero,630 <__addsf3+0x18c>
     500:	80803fe0 	cmpeqi	r2,r16,255
     504:	1000801e 	bne	r2,zero,708 <__addsf3+0x264>
     508:	42010034 	orhi	r8,r8,1024
     50c:	58800710 	cmplti	r2,r11,28
     510:	10009e1e 	bne	r2,zero,78c <__addsf3+0x2e8>
     514:	01000044 	movi	r4,1
     518:	3909c83a 	sub	r4,r7,r4
     51c:	2081002c 	andhi	r2,r4,1024
     520:	10006826 	beq	r2,zero,6c4 <__addsf3+0x220>
     524:	04810034 	movhi	r18,1024
     528:	94bfffc4 	addi	r18,r18,-1
     52c:	24a4703a 	and	r18,r4,r18
     530:	9009883a 	mov	r4,r18
     534:	00019fc0 	call	19fc <__clzsi2>
     538:	10bffec4 	addi	r2,r2,-5
     53c:	9088983a 	sll	r4,r18,r2
     540:	1400880e 	bge	r2,r16,764 <__addsf3+0x2c0>
     544:	00ff0034 	movhi	r3,64512
     548:	18ffffc4 	addi	r3,r3,-1
     54c:	80a1c83a 	sub	r16,r16,r2
     550:	20c8703a 	and	r4,r4,r3
     554:	208001cc 	andi	r2,r4,7
     558:	10000426 	beq	r2,zero,56c <__addsf3+0xc8>
     55c:	208003cc 	andi	r2,r4,15
     560:	10800120 	cmpeqi	r2,r2,4
     564:	1000011e 	bne	r2,zero,56c <__addsf3+0xc8>
     568:	21000104 	addi	r4,r4,4
     56c:	2081002c 	andhi	r2,r4,1024
     570:	10005626 	beq	r2,zero,6cc <__addsf3+0x228>
     574:	84000044 	addi	r16,r16,1
     578:	80803fe0 	cmpeqi	r2,r16,255
     57c:	1000461e 	bne	r2,zero,698 <__addsf3+0x1f4>
     580:	200491ba 	slli	r2,r4,6
     584:	1006d27a 	srli	r3,r2,9
     588:	84003fcc 	andi	r16,r16,255
     58c:	800495fa 	slli	r2,r16,23
     590:	882297fa 	slli	r17,r17,31
     594:	10c4b03a 	or	r2,r2,r3
     598:	1444b03a 	or	r2,r2,r17
     59c:	dfc00317 	ldw	ra,12(sp)
     5a0:	dc800217 	ldw	r18,8(sp)
     5a4:	dc400117 	ldw	r17,4(sp)
     5a8:	dc000017 	ldw	r16,0(sp)
     5ac:	dec00404 	addi	sp,sp,16
     5b0:	f800283a 	ret
     5b4:	58002526 	beq	r11,zero,64c <__addsf3+0x1a8>
     5b8:	6417c83a 	sub	r11,r12,r16
     5bc:	8000821e 	bne	r16,zero,7c8 <__addsf3+0x324>
     5c0:	38006426 	beq	r7,zero,754 <__addsf3+0x2b0>
     5c4:	58bfffc4 	addi	r2,r11,-1
     5c8:	1000c226 	beq	r2,zero,8d4 <__addsf3+0x430>
     5cc:	5ac03fe0 	cmpeqi	r11,r11,255
     5d0:	58004b1e 	bne	r11,zero,700 <__addsf3+0x25c>
     5d4:	1017883a 	mov	r11,r2
     5d8:	00007e06 	br	7d4 <__addsf3+0x330>
     5dc:	02c0510e 	bge	zero,r11,724 <__addsf3+0x280>
     5e0:	60002626 	beq	r12,zero,67c <__addsf3+0x1d8>
     5e4:	80803fe0 	cmpeqi	r2,r16,255
     5e8:	1000471e 	bne	r2,zero,708 <__addsf3+0x264>
     5ec:	42010034 	orhi	r8,r8,1024
     5f0:	58800710 	cmplti	r2,r11,28
     5f4:	10007e1e 	bne	r2,zero,7f0 <__addsf3+0x34c>
     5f8:	01000044 	movi	r4,1
     5fc:	21c9883a 	add	r4,r4,r7
     600:	2081002c 	andhi	r2,r4,1024
     604:	10002f26 	beq	r2,zero,6c4 <__addsf3+0x220>
     608:	84000044 	addi	r16,r16,1
     60c:	80803fe0 	cmpeqi	r2,r16,255
     610:	1000211e 	bne	r2,zero,698 <__addsf3+0x1f4>
     614:	2004d07a 	srli	r2,r4,1
     618:	00df8034 	movhi	r3,32256
     61c:	18ffffc4 	addi	r3,r3,-1
     620:	2100004c 	andi	r4,r4,1
     624:	10c4703a 	and	r2,r2,r3
     628:	1108b03a 	or	r4,r2,r4
     62c:	003fc906 	br	554 <__addsf3+0xb0>
     630:	40004a26 	beq	r8,zero,75c <__addsf3+0x2b8>
     634:	58bfffc4 	addi	r2,r11,-1
     638:	10009326 	beq	r2,zero,888 <__addsf3+0x3e4>
     63c:	59003fe0 	cmpeqi	r4,r11,255
     640:	2000311e 	bne	r4,zero,708 <__addsf3+0x264>
     644:	1017883a 	mov	r11,r2
     648:	003fb006 	br	50c <__addsf3+0x68>
     64c:	81800044 	addi	r6,r16,1
     650:	31803f8c 	andi	r6,r6,254
     654:	3000541e 	bne	r6,zero,7a8 <__addsf3+0x304>
     658:	80007e1e 	bne	r16,zero,854 <__addsf3+0x3b0>
     65c:	3800a326 	beq	r7,zero,8ec <__addsf3+0x448>
     660:	40009326 	beq	r8,zero,8b0 <__addsf3+0x40c>
     664:	3a09c83a 	sub	r4,r7,r8
     668:	2081002c 	andhi	r2,r4,1024
     66c:	1000a626 	beq	r2,zero,908 <__addsf3+0x464>
     670:	41c9c83a 	sub	r4,r8,r7
     674:	4823883a 	mov	r17,r9
     678:	003fb606 	br	554 <__addsf3+0xb0>
     67c:	40003726 	beq	r8,zero,75c <__addsf3+0x2b8>
     680:	58bfffc4 	addi	r2,r11,-1
     684:	10007b26 	beq	r2,zero,874 <__addsf3+0x3d0>
     688:	5ac03fe0 	cmpeqi	r11,r11,255
     68c:	58001e1e 	bne	r11,zero,708 <__addsf3+0x264>
     690:	1017883a 	mov	r11,r2
     694:	003fd606 	br	5f0 <__addsf3+0x14c>
     698:	043fffc4 	movi	r16,-1
     69c:	0007883a 	mov	r3,zero
     6a0:	003fb906 	br	588 <__addsf3+0xe4>
     6a4:	80800044 	addi	r2,r16,1
     6a8:	11803f8c 	andi	r6,r2,254
     6ac:	30005726 	beq	r6,zero,80c <__addsf3+0x368>
     6b0:	10c03fe0 	cmpeqi	r3,r2,255
     6b4:	183ff81e 	bne	r3,zero,698 <__addsf3+0x1f4>
     6b8:	3a09883a 	add	r4,r7,r8
     6bc:	2008d07a 	srli	r4,r4,1
     6c0:	1021883a 	mov	r16,r2
     6c4:	208001cc 	andi	r2,r4,7
     6c8:	103fa41e 	bne	r2,zero,55c <__addsf3+0xb8>
     6cc:	2014d0fa 	srli	r10,r4,3
     6d0:	80803fe0 	cmpeqi	r2,r16,255
     6d4:	10000c1e 	bne	r2,zero,708 <__addsf3+0x264>
     6d8:	00802034 	movhi	r2,128
     6dc:	10bfffc4 	addi	r2,r2,-1
     6e0:	5086703a 	and	r3,r10,r2
     6e4:	003fa806 	br	588 <__addsf3+0xe4>
     6e8:	38000626 	beq	r7,zero,704 <__addsf3+0x260>
     6ec:	40000626 	beq	r8,zero,708 <__addsf3+0x264>
     6f0:	2080102c 	andhi	r2,r4,64
     6f4:	10000426 	beq	r2,zero,708 <__addsf3+0x264>
     6f8:	2940102c 	andhi	r5,r5,64
     6fc:	2800021e 	bne	r5,zero,708 <__addsf3+0x264>
     700:	4823883a 	mov	r17,r9
     704:	6815883a 	mov	r10,r13
     708:	503fe326 	beq	r10,zero,698 <__addsf3+0x1f4>
     70c:	00802034 	movhi	r2,128
     710:	50c01034 	orhi	r3,r10,64
     714:	10bfffc4 	addi	r2,r2,-1
     718:	1886703a 	and	r3,r3,r2
     71c:	043fffc4 	movi	r16,-1
     720:	003f9906 	br	588 <__addsf3+0xe4>
     724:	583fdf26 	beq	r11,zero,6a4 <__addsf3+0x200>
     728:	6417c83a 	sub	r11,r12,r16
     72c:	80004226 	beq	r16,zero,838 <__addsf3+0x394>
     730:	60803fe0 	cmpeqi	r2,r12,255
     734:	103ff31e 	bne	r2,zero,704 <__addsf3+0x260>
     738:	39c10034 	orhi	r7,r7,1024
     73c:	58800710 	cmplti	r2,r11,28
     740:	10005d1e 	bne	r2,zero,8b8 <__addsf3+0x414>
     744:	01000044 	movi	r4,1
     748:	2209883a 	add	r4,r4,r8
     74c:	6021883a 	mov	r16,r12
     750:	003fab06 	br	600 <__addsf3+0x15c>
     754:	4823883a 	mov	r17,r9
     758:	6815883a 	mov	r10,r13
     75c:	5821883a 	mov	r16,r11
     760:	003fdb06 	br	6d0 <__addsf3+0x22c>
     764:	1405c83a 	sub	r2,r2,r16
     768:	14800044 	addi	r18,r2,1
     76c:	00800804 	movi	r2,32
     770:	1485c83a 	sub	r2,r2,r18
     774:	2084983a 	sll	r2,r4,r2
     778:	2488d83a 	srl	r4,r4,r18
     77c:	0021883a 	mov	r16,zero
     780:	1004c03a 	cmpne	r2,r2,zero
     784:	1108b03a 	or	r4,r2,r4
     788:	003f7206 	br	554 <__addsf3+0xb0>
     78c:	01000804 	movi	r4,32
     790:	22c9c83a 	sub	r4,r4,r11
     794:	4108983a 	sll	r4,r8,r4
     798:	42d0d83a 	srl	r8,r8,r11
     79c:	2008c03a 	cmpne	r4,r4,zero
     7a0:	2208b03a 	or	r4,r4,r8
     7a4:	003f5c06 	br	518 <__addsf3+0x74>
     7a8:	3a25c83a 	sub	r18,r7,r8
     7ac:	9081002c 	andhi	r2,r18,1024
     7b0:	10002d1e 	bne	r2,zero,868 <__addsf3+0x3c4>
     7b4:	903f5e1e 	bne	r18,zero,530 <__addsf3+0x8c>
     7b8:	0023883a 	mov	r17,zero
     7bc:	0021883a 	mov	r16,zero
     7c0:	0007883a 	mov	r3,zero
     7c4:	003f7006 	br	588 <__addsf3+0xe4>
     7c8:	60803fe0 	cmpeqi	r2,r12,255
     7cc:	103fcc1e 	bne	r2,zero,700 <__addsf3+0x25c>
     7d0:	39c10034 	orhi	r7,r7,1024
     7d4:	58800710 	cmplti	r2,r11,28
     7d8:	10002e1e 	bne	r2,zero,894 <__addsf3+0x3f0>
     7dc:	01000044 	movi	r4,1
     7e0:	4109c83a 	sub	r4,r8,r4
     7e4:	4823883a 	mov	r17,r9
     7e8:	6021883a 	mov	r16,r12
     7ec:	003f4b06 	br	51c <__addsf3+0x78>
     7f0:	01000804 	movi	r4,32
     7f4:	22c9c83a 	sub	r4,r4,r11
     7f8:	4108983a 	sll	r4,r8,r4
     7fc:	42d0d83a 	srl	r8,r8,r11
     800:	2008c03a 	cmpne	r4,r4,zero
     804:	2208b03a 	or	r4,r4,r8
     808:	003f7c06 	br	5fc <__addsf3+0x158>
     80c:	803fb61e 	bne	r16,zero,6e8 <__addsf3+0x244>
     810:	38003a26 	beq	r7,zero,8fc <__addsf3+0x458>
     814:	40002626 	beq	r8,zero,8b0 <__addsf3+0x40c>
     818:	3a09883a 	add	r4,r7,r8
     81c:	2081002c 	andhi	r2,r4,1024
     820:	103fa826 	beq	r2,zero,6c4 <__addsf3+0x220>
     824:	00bf0034 	movhi	r2,64512
     828:	10bfffc4 	addi	r2,r2,-1
     82c:	2088703a 	and	r4,r4,r2
     830:	04000044 	movi	r16,1
     834:	003fa306 	br	6c4 <__addsf3+0x220>
     838:	383fc726 	beq	r7,zero,758 <__addsf3+0x2b4>
     83c:	58bfffc4 	addi	r2,r11,-1
     840:	10000c26 	beq	r2,zero,874 <__addsf3+0x3d0>
     844:	5ac03fe0 	cmpeqi	r11,r11,255
     848:	583fae1e 	bne	r11,zero,704 <__addsf3+0x260>
     84c:	1017883a 	mov	r11,r2
     850:	003fba06 	br	73c <__addsf3+0x298>
     854:	383fa51e 	bne	r7,zero,6ec <__addsf3+0x248>
     858:	403fa91e 	bne	r8,zero,700 <__addsf3+0x25c>
     85c:	0023883a 	mov	r17,zero
     860:	1007883a 	mov	r3,r2
     864:	003fad06 	br	71c <__addsf3+0x278>
     868:	41e5c83a 	sub	r18,r8,r7
     86c:	4823883a 	mov	r17,r9
     870:	003f2f06 	br	530 <__addsf3+0x8c>
     874:	3a09883a 	add	r4,r7,r8
     878:	2081002c 	andhi	r2,r4,1024
     87c:	10001926 	beq	r2,zero,8e4 <__addsf3+0x440>
     880:	04000084 	movi	r16,2
     884:	003f6306 	br	614 <__addsf3+0x170>
     888:	3a09c83a 	sub	r4,r7,r8
     88c:	04000044 	movi	r16,1
     890:	003f2206 	br	51c <__addsf3+0x78>
     894:	00800804 	movi	r2,32
     898:	12c5c83a 	sub	r2,r2,r11
     89c:	3884983a 	sll	r2,r7,r2
     8a0:	3aced83a 	srl	r7,r7,r11
     8a4:	1008c03a 	cmpne	r4,r2,zero
     8a8:	21c8b03a 	or	r4,r4,r7
     8ac:	003fcc06 	br	7e0 <__addsf3+0x33c>
     8b0:	0021883a 	mov	r16,zero
     8b4:	003f3406 	br	588 <__addsf3+0xe4>
     8b8:	01000804 	movi	r4,32
     8bc:	22c9c83a 	sub	r4,r4,r11
     8c0:	3908983a 	sll	r4,r7,r4
     8c4:	3aced83a 	srl	r7,r7,r11
     8c8:	2008c03a 	cmpne	r4,r4,zero
     8cc:	21c8b03a 	or	r4,r4,r7
     8d0:	003f9d06 	br	748 <__addsf3+0x2a4>
     8d4:	41c9c83a 	sub	r4,r8,r7
     8d8:	4823883a 	mov	r17,r9
     8dc:	04000044 	movi	r16,1
     8e0:	003f0e06 	br	51c <__addsf3+0x78>
     8e4:	04000044 	movi	r16,1
     8e8:	003f7606 	br	6c4 <__addsf3+0x220>
     8ec:	403fb226 	beq	r8,zero,7b8 <__addsf3+0x314>
     8f0:	4823883a 	mov	r17,r9
     8f4:	6807883a 	mov	r3,r13
     8f8:	003f2306 	br	588 <__addsf3+0xe4>
     8fc:	6807883a 	mov	r3,r13
     900:	0021883a 	mov	r16,zero
     904:	003f2006 	br	588 <__addsf3+0xe4>
     908:	203fab26 	beq	r4,zero,7b8 <__addsf3+0x314>
     90c:	003f6d06 	br	6c4 <__addsf3+0x220>

00000910 <__mulsf3>:
     910:	defff504 	addi	sp,sp,-44
     914:	dc400215 	stw	r17,8(sp)
     918:	2022d5fa 	srli	r17,r4,23
     91c:	dc000115 	stw	r16,4(sp)
     920:	04002034 	movhi	r16,128
     924:	dd800715 	stw	r22,28(sp)
     928:	843fffc4 	addi	r16,r16,-1
     92c:	dfc00a15 	stw	ra,40(sp)
     930:	df000915 	stw	fp,36(sp)
     934:	ddc00815 	stw	r23,32(sp)
     938:	dd400615 	stw	r21,24(sp)
     93c:	dd000515 	stw	r20,20(sp)
     940:	dcc00415 	stw	r19,16(sp)
     944:	dc800315 	stw	r18,12(sp)
     948:	8c403fcc 	andi	r17,r17,255
     94c:	202cd7fa 	srli	r22,r4,31
     950:	8120703a 	and	r16,r16,r4
     954:	88008d26 	beq	r17,zero,b8c <__mulsf3+0x27c>
     958:	88803fe0 	cmpeqi	r2,r17,255
     95c:	1000901e 	bne	r2,zero,ba0 <__mulsf3+0x290>
     960:	802090fa 	slli	r16,r16,3
     964:	8c7fe044 	addi	r17,r17,-127
     968:	0025883a 	mov	r18,zero
     96c:	84010034 	orhi	r16,r16,1024
     970:	0029883a 	mov	r20,zero
     974:	2804d5fa 	srli	r2,r5,23
     978:	01002034 	movhi	r4,128
     97c:	213fffc4 	addi	r4,r4,-1
     980:	10803fcc 	andi	r2,r2,255
     984:	282ed7fa 	srli	r23,r5,31
     988:	2166703a 	and	r19,r4,r5
     98c:	10007b26 	beq	r2,zero,b7c <__mulsf3+0x26c>
     990:	10c03fe0 	cmpeqi	r3,r2,255
     994:	1800871e 	bne	r3,zero,bb4 <__mulsf3+0x2a4>
     998:	980890fa 	slli	r4,r19,3
     99c:	10bfe044 	addi	r2,r2,-127
     9a0:	88a3883a 	add	r17,r17,r2
     9a4:	24c10034 	orhi	r19,r4,1024
     9a8:	0007883a 	mov	r3,zero
     9ac:	90800428 	cmpgeui	r2,r18,16
     9b0:	b5eaf03a 	xor	r21,r22,r23
     9b4:	8f000044 	addi	fp,r17,1
     9b8:	1000341e 	bne	r2,zero,a8c <__mulsf3+0x17c>
     9bc:	902490ba 	slli	r18,r18,2
     9c0:	00800034 	movhi	r2,0
     9c4:	9085883a 	add	r2,r18,r2
     9c8:	10827417 	ldw	r2,2512(r2)
     9cc:	1000683a 	jmp	r2
     9d0:	00000a8c 	andi	zero,zero,42
     9d4:	00000a14 	movui	zero,40
     9d8:	00000a14 	movui	zero,40
     9dc:	00000a10 	cmplti	zero,zero,40
     9e0:	00000a1c 	xori	zero,zero,40
     9e4:	00000a1c 	xori	zero,zero,40
     9e8:	00000c40 	call	c4 <__flash_exceptions_start+0xa4>
     9ec:	00000a10 	cmplti	zero,zero,40
     9f0:	00000a1c 	xori	zero,zero,40
     9f4:	00000c40 	call	c4 <__flash_exceptions_start+0xa4>
     9f8:	00000a1c 	xori	zero,zero,40
     9fc:	00000a10 	cmplti	zero,zero,40
     a00:	00000bc8 	cmpgei	zero,zero,47
     a04:	00000bc8 	cmpgei	zero,zero,47
     a08:	00000bc8 	cmpgei	zero,zero,47
     a0c:	00000ca4 	muli	zero,zero,50
     a10:	b82b883a 	mov	r21,r23
     a14:	9821883a 	mov	r16,r19
     a18:	1829883a 	mov	r20,r3
     a1c:	a08000a0 	cmpeqi	r2,r20,2
     a20:	1000171e 	bne	r2,zero,a80 <__mulsf3+0x170>
     a24:	a08000e0 	cmpeqi	r2,r20,3
     a28:	1000b41e 	bne	r2,zero,cfc <__mulsf3+0x3ec>
     a2c:	a0800060 	cmpeqi	r2,r20,1
     a30:	10003f26 	beq	r2,zero,b30 <__mulsf3+0x220>
     a34:	0007883a 	mov	r3,zero
     a38:	0009883a 	mov	r4,zero
     a3c:	1c003fcc 	andi	r16,r3,255
     a40:	802095fa 	slli	r16,r16,23
     a44:	a80497fa 	slli	r2,r21,31
     a48:	8120b03a 	or	r16,r16,r4
     a4c:	8084b03a 	or	r2,r16,r2
     a50:	dfc00a17 	ldw	ra,40(sp)
     a54:	df000917 	ldw	fp,36(sp)
     a58:	ddc00817 	ldw	r23,32(sp)
     a5c:	dd800717 	ldw	r22,28(sp)
     a60:	dd400617 	ldw	r21,24(sp)
     a64:	dd000517 	ldw	r20,20(sp)
     a68:	dcc00417 	ldw	r19,16(sp)
     a6c:	dc800317 	ldw	r18,12(sp)
     a70:	dc400217 	ldw	r17,8(sp)
     a74:	dc000117 	ldw	r16,4(sp)
     a78:	dec00b04 	addi	sp,sp,44
     a7c:	f800283a 	ret
     a80:	00ffffc4 	movi	r3,-1
     a84:	0009883a 	mov	r4,zero
     a88:	003fec06 	br	a3c <__mulsf3+0x12c>
     a8c:	8028d43a 	srli	r20,r16,16
     a90:	9cbfffcc 	andi	r18,r19,65535
     a94:	843fffcc 	andi	r16,r16,65535
     a98:	900b883a 	mov	r5,r18
     a9c:	8009883a 	mov	r4,r16
     aa0:	0001c040 	call	1c04 <__mulsi3>
     aa4:	9826d43a 	srli	r19,r19,16
     aa8:	900b883a 	mov	r5,r18
     aac:	a009883a 	mov	r4,r20
     ab0:	1025883a 	mov	r18,r2
     ab4:	0001c040 	call	1c04 <__mulsi3>
     ab8:	980b883a 	mov	r5,r19
     abc:	a009883a 	mov	r4,r20
     ac0:	1029883a 	mov	r20,r2
     ac4:	0001c040 	call	1c04 <__mulsi3>
     ac8:	9809883a 	mov	r4,r19
     acc:	800b883a 	mov	r5,r16
     ad0:	1027883a 	mov	r19,r2
     ad4:	0001c040 	call	1c04 <__mulsi3>
     ad8:	9006d43a 	srli	r3,r18,16
     adc:	1505883a 	add	r2,r2,r20
     ae0:	1887883a 	add	r3,r3,r2
     ae4:	1d00022e 	bgeu	r3,r20,af0 <__mulsf3+0x1e0>
     ae8:	00800074 	movhi	r2,1
     aec:	98a7883a 	add	r19,r19,r2
     af0:	1808943a 	slli	r4,r3,16
     af4:	1820d43a 	srli	r16,r3,16
     af8:	94bfffcc 	andi	r18,r18,65535
     afc:	2489883a 	add	r4,r4,r18
     b00:	200a91ba 	slli	r5,r4,6
     b04:	84e1883a 	add	r16,r16,r19
     b08:	802091ba 	slli	r16,r16,6
     b0c:	2008d6ba 	srli	r4,r4,26
     b10:	2804c03a 	cmpne	r2,r5,zero
     b14:	80c2002c 	andhi	r3,r16,2048
     b18:	1108b03a 	or	r4,r2,r4
     b1c:	8120b03a 	or	r16,r16,r4
     b20:	18007026 	beq	r3,zero,ce4 <__mulsf3+0x3d4>
     b24:	8004d07a 	srli	r2,r16,1
     b28:	8400004c 	andi	r16,r16,1
     b2c:	1420b03a 	or	r16,r2,r16
     b30:	e0c01fc4 	addi	r3,fp,127
     b34:	00c0470e 	bge	zero,r3,c54 <__mulsf3+0x344>
     b38:	808001cc 	andi	r2,r16,7
     b3c:	10000426 	beq	r2,zero,b50 <__mulsf3+0x240>
     b40:	808003cc 	andi	r2,r16,15
     b44:	10800120 	cmpeqi	r2,r2,4
     b48:	1000011e 	bne	r2,zero,b50 <__mulsf3+0x240>
     b4c:	84000104 	addi	r16,r16,4
     b50:	8082002c 	andhi	r2,r16,2048
     b54:	10000426 	beq	r2,zero,b68 <__mulsf3+0x258>
     b58:	00be0034 	movhi	r2,63488
     b5c:	10bfffc4 	addi	r2,r2,-1
     b60:	80a0703a 	and	r16,r16,r2
     b64:	e0c02004 	addi	r3,fp,128
     b68:	18803fc8 	cmpgei	r2,r3,255
     b6c:	103fc41e 	bne	r2,zero,a80 <__mulsf3+0x170>
     b70:	802091ba 	slli	r16,r16,6
     b74:	8008d27a 	srli	r4,r16,9
     b78:	003fb006 	br	a3c <__mulsf3+0x12c>
     b7c:	9800281e 	bne	r19,zero,c20 <__mulsf3+0x310>
     b80:	94800054 	ori	r18,r18,1
     b84:	00c00044 	movi	r3,1
     b88:	003f8806 	br	9ac <__mulsf3+0x9c>
     b8c:	8000191e 	bne	r16,zero,bf4 <__mulsf3+0x2e4>
     b90:	04800104 	movi	r18,4
     b94:	0023883a 	mov	r17,zero
     b98:	05000044 	movi	r20,1
     b9c:	003f7506 	br	974 <__mulsf3+0x64>
     ba0:	8000101e 	bne	r16,zero,be4 <__mulsf3+0x2d4>
     ba4:	04800204 	movi	r18,8
     ba8:	04403fc4 	movi	r17,255
     bac:	05000084 	movi	r20,2
     bb0:	003f7006 	br	974 <__mulsf3+0x64>
     bb4:	8c403fc4 	addi	r17,r17,255
     bb8:	9800071e 	bne	r19,zero,bd8 <__mulsf3+0x2c8>
     bbc:	94800094 	ori	r18,r18,2
     bc0:	00c00084 	movi	r3,2
     bc4:	003f7906 	br	9ac <__mulsf3+0x9c>
     bc8:	a08000a0 	cmpeqi	r2,r20,2
     bcc:	b02b883a 	mov	r21,r22
     bd0:	103f9426 	beq	r2,zero,a24 <__mulsf3+0x114>
     bd4:	003faa06 	br	a80 <__mulsf3+0x170>
     bd8:	948000d4 	ori	r18,r18,3
     bdc:	00c000c4 	movi	r3,3
     be0:	003f7206 	br	9ac <__mulsf3+0x9c>
     be4:	04800304 	movi	r18,12
     be8:	04403fc4 	movi	r17,255
     bec:	050000c4 	movi	r20,3
     bf0:	003f6006 	br	974 <__mulsf3+0x64>
     bf4:	8009883a 	mov	r4,r16
     bf8:	d9400015 	stw	r5,0(sp)
     bfc:	00019fc0 	call	19fc <__clzsi2>
     c00:	10fffec4 	addi	r3,r2,-5
     c04:	047fe284 	movi	r17,-118
     c08:	80e0983a 	sll	r16,r16,r3
     c0c:	d9400017 	ldw	r5,0(sp)
     c10:	88a3c83a 	sub	r17,r17,r2
     c14:	0025883a 	mov	r18,zero
     c18:	0029883a 	mov	r20,zero
     c1c:	003f5506 	br	974 <__mulsf3+0x64>
     c20:	9809883a 	mov	r4,r19
     c24:	00019fc0 	call	19fc <__clzsi2>
     c28:	10fffec4 	addi	r3,r2,-5
     c2c:	88a3c83a 	sub	r17,r17,r2
     c30:	98e6983a 	sll	r19,r19,r3
     c34:	8c7fe284 	addi	r17,r17,-118
     c38:	0007883a 	mov	r3,zero
     c3c:	003f5b06 	br	9ac <__mulsf3+0x9c>
     c40:	01002034 	movhi	r4,128
     c44:	002b883a 	mov	r21,zero
     c48:	213fffc4 	addi	r4,r4,-1
     c4c:	00ffffc4 	movi	r3,-1
     c50:	003f7a06 	br	a3c <__mulsf3+0x12c>
     c54:	00800044 	movi	r2,1
     c58:	10c7c83a 	sub	r3,r2,r3
     c5c:	18800708 	cmpgei	r2,r3,28
     c60:	103f741e 	bne	r2,zero,a34 <__mulsf3+0x124>
     c64:	e1002784 	addi	r4,fp,158
     c68:	8108983a 	sll	r4,r16,r4
     c6c:	80e0d83a 	srl	r16,r16,r3
     c70:	2008c03a 	cmpne	r4,r4,zero
     c74:	8120b03a 	or	r16,r16,r4
     c78:	808001cc 	andi	r2,r16,7
     c7c:	10000426 	beq	r2,zero,c90 <__mulsf3+0x380>
     c80:	808003cc 	andi	r2,r16,15
     c84:	10800120 	cmpeqi	r2,r2,4
     c88:	1000011e 	bne	r2,zero,c90 <__mulsf3+0x380>
     c8c:	84000104 	addi	r16,r16,4
     c90:	8081002c 	andhi	r2,r16,1024
     c94:	10001526 	beq	r2,zero,cec <__mulsf3+0x3dc>
     c98:	00c00044 	movi	r3,1
     c9c:	0009883a 	mov	r4,zero
     ca0:	003f6606 	br	a3c <__mulsf3+0x12c>
     ca4:	8080102c 	andhi	r2,r16,64
     ca8:	10000826 	beq	r2,zero,ccc <__mulsf3+0x3bc>
     cac:	9880102c 	andhi	r2,r19,64
     cb0:	1000061e 	bne	r2,zero,ccc <__mulsf3+0x3bc>
     cb4:	00802034 	movhi	r2,128
     cb8:	99001034 	orhi	r4,r19,64
     cbc:	10bfffc4 	addi	r2,r2,-1
     cc0:	2088703a 	and	r4,r4,r2
     cc4:	b82b883a 	mov	r21,r23
     cc8:	003fe006 	br	c4c <__mulsf3+0x33c>
     ccc:	00802034 	movhi	r2,128
     cd0:	81001034 	orhi	r4,r16,64
     cd4:	10bfffc4 	addi	r2,r2,-1
     cd8:	2088703a 	and	r4,r4,r2
     cdc:	b02b883a 	mov	r21,r22
     ce0:	003fda06 	br	c4c <__mulsf3+0x33c>
     ce4:	8839883a 	mov	fp,r17
     ce8:	003f9106 	br	b30 <__mulsf3+0x220>
     cec:	802091ba 	slli	r16,r16,6
     cf0:	0007883a 	mov	r3,zero
     cf4:	8008d27a 	srli	r4,r16,9
     cf8:	003f5006 	br	a3c <__mulsf3+0x12c>
     cfc:	00802034 	movhi	r2,128
     d00:	81001034 	orhi	r4,r16,64
     d04:	10bfffc4 	addi	r2,r2,-1
     d08:	2088703a 	and	r4,r4,r2
     d0c:	003fcf06 	br	c4c <__mulsf3+0x33c>

00000d10 <__fixsfsi>:
     d10:	200ad5fa 	srli	r5,r4,23
     d14:	00c02034 	movhi	r3,128
     d18:	18ffffc4 	addi	r3,r3,-1
     d1c:	29403fcc 	andi	r5,r5,255
     d20:	29801fd0 	cmplti	r6,r5,127
     d24:	200ed7fa 	srli	r7,r4,31
     d28:	1906703a 	and	r3,r3,r4
     d2c:	3000061e 	bne	r6,zero,d48 <__fixsfsi+0x38>
     d30:	28802790 	cmplti	r2,r5,158
     d34:	1000061e 	bne	r2,zero,d50 <__fixsfsi+0x40>
     d38:	00a00034 	movhi	r2,32768
     d3c:	10bfffc4 	addi	r2,r2,-1
     d40:	3885883a 	add	r2,r7,r2
     d44:	f800283a 	ret
     d48:	0005883a 	mov	r2,zero
     d4c:	f800283a 	ret
     d50:	28802590 	cmplti	r2,r5,150
     d54:	18c02034 	orhi	r3,r3,128
     d58:	1000051e 	bne	r2,zero,d70 <__fixsfsi+0x60>
     d5c:	28bfda84 	addi	r2,r5,-150
     d60:	1884983a 	sll	r2,r3,r2
     d64:	383ff926 	beq	r7,zero,d4c <__fixsfsi+0x3c>
     d68:	0085c83a 	sub	r2,zero,r2
     d6c:	f800283a 	ret
     d70:	00802584 	movi	r2,150
     d74:	1145c83a 	sub	r2,r2,r5
     d78:	1884d83a 	srl	r2,r3,r2
     d7c:	003ff906 	br	d64 <__fixsfsi+0x54>

00000d80 <__floatsisf>:
     d80:	defffd04 	addi	sp,sp,-12
     d84:	dfc00215 	stw	ra,8(sp)
     d88:	dc400115 	stw	r17,4(sp)
     d8c:	dc000015 	stw	r16,0(sp)
     d90:	20001226 	beq	r4,zero,ddc <__floatsisf+0x5c>
     d94:	2022d7fa 	srli	r17,r4,31
     d98:	2021883a 	mov	r16,r4
     d9c:	20003816 	blt	r4,zero,e80 <__floatsisf+0x100>
     da0:	8009883a 	mov	r4,r16
     da4:	00019fc0 	call	19fc <__clzsi2>
     da8:	1009883a 	mov	r4,r2
     dac:	00802784 	movi	r2,158
     db0:	1105c83a 	sub	r2,r2,r4
     db4:	10c025c8 	cmpgei	r3,r2,151
     db8:	1800151e 	bne	r3,zero,e10 <__floatsisf+0x90>
     dbc:	20c00248 	cmpgei	r3,r4,9
     dc0:	18003126 	beq	r3,zero,e88 <__floatsisf+0x108>
     dc4:	213ffe04 	addi	r4,r4,-8
     dc8:	8120983a 	sll	r16,r16,r4
     dcc:	00c02034 	movhi	r3,128
     dd0:	18ffffc4 	addi	r3,r3,-1
     dd4:	80e0703a 	and	r16,r16,r3
     dd8:	00000306 	br	de8 <__floatsisf+0x68>
     ddc:	0023883a 	mov	r17,zero
     de0:	0005883a 	mov	r2,zero
     de4:	0021883a 	mov	r16,zero
     de8:	10803fcc 	andi	r2,r2,255
     dec:	100495fa 	slli	r2,r2,23
     df0:	882297fa 	slli	r17,r17,31
     df4:	1404b03a 	or	r2,r2,r16
     df8:	1444b03a 	or	r2,r2,r17
     dfc:	dfc00217 	ldw	ra,8(sp)
     e00:	dc400117 	ldw	r17,4(sp)
     e04:	dc000017 	ldw	r16,0(sp)
     e08:	dec00304 	addi	sp,sp,12
     e0c:	f800283a 	ret
     e10:	10c02690 	cmplti	r3,r2,154
     e14:	1800071e 	bne	r3,zero,e34 <__floatsisf+0xb4>
     e18:	20c006c4 	addi	r3,r4,27
     e1c:	01400144 	movi	r5,5
     e20:	80c6983a 	sll	r3,r16,r3
     e24:	290bc83a 	sub	r5,r5,r4
     e28:	814ad83a 	srl	r5,r16,r5
     e2c:	1806c03a 	cmpne	r3,r3,zero
     e30:	28e0b03a 	or	r16,r5,r3
     e34:	20c00188 	cmpgei	r3,r4,6
     e38:	1800171e 	bne	r3,zero,e98 <__floatsisf+0x118>
     e3c:	00ff0034 	movhi	r3,64512
     e40:	18ffffc4 	addi	r3,r3,-1
     e44:	818001cc 	andi	r6,r16,7
     e48:	80ca703a 	and	r5,r16,r3
     e4c:	30000926 	beq	r6,zero,e74 <__floatsisf+0xf4>
     e50:	818003cc 	andi	r6,r16,15
     e54:	31800120 	cmpeqi	r6,r6,4
     e58:	3000061e 	bne	r6,zero,e74 <__floatsisf+0xf4>
     e5c:	29400104 	addi	r5,r5,4
     e60:	2981002c 	andhi	r6,r5,1024
     e64:	30000326 	beq	r6,zero,e74 <__floatsisf+0xf4>
     e68:	28ca703a 	and	r5,r5,r3
     e6c:	00c027c4 	movi	r3,159
     e70:	1905c83a 	sub	r2,r3,r4
     e74:	282091ba 	slli	r16,r5,6
     e78:	8020d27a 	srli	r16,r16,9
     e7c:	003fda06 	br	de8 <__floatsisf+0x68>
     e80:	0121c83a 	sub	r16,zero,r4
     e84:	003fc606 	br	da0 <__floatsisf+0x20>
     e88:	01002034 	movhi	r4,128
     e8c:	213fffc4 	addi	r4,r4,-1
     e90:	8120703a 	and	r16,r16,r4
     e94:	003fd406 	br	de8 <__floatsisf+0x68>
     e98:	20fffec4 	addi	r3,r4,-5
     e9c:	80e0983a 	sll	r16,r16,r3
     ea0:	003fe606 	br	e3c <__floatsisf+0xbc>

00000ea4 <__divdf3>:
     ea4:	2810d53a 	srli	r8,r5,20
     ea8:	defff004 	addi	sp,sp,-64
     eac:	dc000615 	stw	r16,24(sp)
     eb0:	04000434 	movhi	r16,16
     eb4:	df000e15 	stw	fp,56(sp)
     eb8:	ddc00d15 	stw	r23,52(sp)
     ebc:	dd800c15 	stw	r22,48(sp)
     ec0:	dd000a15 	stw	r20,40(sp)
     ec4:	843fffc4 	addi	r16,r16,-1
     ec8:	dfc00f15 	stw	ra,60(sp)
     ecc:	dd400b15 	stw	r21,44(sp)
     ed0:	dcc00915 	stw	r19,36(sp)
     ed4:	dc800815 	stw	r18,32(sp)
     ed8:	dc400715 	stw	r17,28(sp)
     edc:	4201ffcc 	andi	r8,r8,2047
     ee0:	282ed7fa 	srli	r23,r5,31
     ee4:	3039883a 	mov	fp,r6
     ee8:	382d883a 	mov	r22,r7
     eec:	2029883a 	mov	r20,r4
     ef0:	2c20703a 	and	r16,r5,r16
     ef4:	40006826 	beq	r8,zero,1098 <__divdf3+0x1f4>
     ef8:	4081ffe0 	cmpeqi	r2,r8,2047
     efc:	1000791e 	bne	r2,zero,10e4 <__divdf3+0x240>
     f00:	2026d77a 	srli	r19,r4,29
     f04:	800a90fa 	slli	r5,r16,3
     f08:	202890fa 	slli	r20,r4,3
     f0c:	44bf0044 	addi	r18,r8,-1023
     f10:	994ab03a 	or	r5,r19,r5
     f14:	2cc02034 	orhi	r19,r5,128
     f18:	0021883a 	mov	r16,zero
     f1c:	0023883a 	mov	r17,zero
     f20:	b010d53a 	srli	r8,r22,20
     f24:	00c00434 	movhi	r3,16
     f28:	18ffffc4 	addi	r3,r3,-1
     f2c:	4201ffcc 	andi	r8,r8,2047
     f30:	b02ad7fa 	srli	r21,r22,31
     f34:	b0ec703a 	and	r22,r22,r3
     f38:	40004626 	beq	r8,zero,1054 <__divdf3+0x1b0>
     f3c:	4081ffe0 	cmpeqi	r2,r8,2047
     f40:	10006f1e 	bne	r2,zero,1100 <__divdf3+0x25c>
     f44:	b00690fa 	slli	r3,r22,3
     f48:	e004d77a 	srli	r2,fp,29
     f4c:	e01290fa 	slli	r9,fp,3
     f50:	423f0044 	addi	r8,r8,-1023
     f54:	10c6b03a 	or	r3,r2,r3
     f58:	1d802034 	orhi	r22,r3,128
     f5c:	9225c83a 	sub	r18,r18,r8
     f60:	0007883a 	mov	r3,zero
     f64:	80800428 	cmpgeui	r2,r16,16
     f68:	bd4ef03a 	xor	r7,r23,r21
     f6c:	1000a71e 	bne	r2,zero,120c <__divdf3+0x368>
     f70:	800c90ba 	slli	r6,r16,2
     f74:	00800034 	movhi	r2,0
     f78:	3085883a 	add	r2,r6,r2
     f7c:	1083e117 	ldw	r2,3972(r2)
     f80:	1000683a 	jmp	r2
     f84:	0000120c 	andi	zero,zero,72
     f88:	00001030 	cmpltui	zero,zero,64
     f8c:	00000fe0 	cmpeqi	zero,zero,63
     f90:	00001040 	call	104 <alt_irq_handler+0x8>
     f94:	00000fe0 	cmpeqi	zero,zero,63
     f98:	000011b0 	cmpltui	zero,zero,70
     f9c:	00000fe0 	cmpeqi	zero,zero,63
     fa0:	00001040 	call	104 <alt_irq_handler+0x8>
     fa4:	00001030 	cmpltui	zero,zero,64
     fa8:	00001030 	cmpltui	zero,zero,64
     fac:	000011b0 	cmpltui	zero,zero,70
     fb0:	00001040 	call	104 <alt_irq_handler+0x8>
     fb4:	00000fc4 	movi	zero,63
     fb8:	00000fc4 	movi	zero,63
     fbc:	00000fc4 	movi	zero,63
     fc0:	000011c8 	cmpgei	zero,zero,71
     fc4:	b80f883a 	mov	r7,r23
     fc8:	888000a0 	cmpeqi	r2,r17,2
     fcc:	1000181e 	bne	r2,zero,1030 <__divdf3+0x18c>
     fd0:	888000e0 	cmpeqi	r2,r17,3
     fd4:	1001f61e 	bne	r2,zero,17b0 <__divdf3+0x90c>
     fd8:	88800060 	cmpeqi	r2,r17,1
     fdc:	10006126 	beq	r2,zero,1164 <__divdf3+0x2c0>
     fe0:	0007883a 	mov	r3,zero
     fe4:	000b883a 	mov	r5,zero
     fe8:	0029883a 	mov	r20,zero
     fec:	1806953a 	slli	r3,r3,20
     ff0:	380e97fa 	slli	r7,r7,31
     ff4:	a005883a 	mov	r2,r20
     ff8:	1946b03a 	or	r3,r3,r5
     ffc:	19c6b03a 	or	r3,r3,r7
    1000:	dfc00f17 	ldw	ra,60(sp)
    1004:	df000e17 	ldw	fp,56(sp)
    1008:	ddc00d17 	ldw	r23,52(sp)
    100c:	dd800c17 	ldw	r22,48(sp)
    1010:	dd400b17 	ldw	r21,44(sp)
    1014:	dd000a17 	ldw	r20,40(sp)
    1018:	dcc00917 	ldw	r19,36(sp)
    101c:	dc800817 	ldw	r18,32(sp)
    1020:	dc400717 	ldw	r17,28(sp)
    1024:	dc000617 	ldw	r16,24(sp)
    1028:	dec01004 	addi	sp,sp,64
    102c:	f800283a 	ret
    1030:	00c1ffc4 	movi	r3,2047
    1034:	000b883a 	mov	r5,zero
    1038:	0029883a 	mov	r20,zero
    103c:	003feb06 	br	fec <__divdf3+0x148>
    1040:	a80f883a 	mov	r7,r21
    1044:	b027883a 	mov	r19,r22
    1048:	4829883a 	mov	r20,r9
    104c:	1823883a 	mov	r17,r3
    1050:	003fdd06 	br	fc8 <__divdf3+0x124>
    1054:	b712b03a 	or	r9,r22,fp
    1058:	48003e26 	beq	r9,zero,1154 <__divdf3+0x2b0>
    105c:	b0017726 	beq	r22,zero,163c <__divdf3+0x798>
    1060:	b009883a 	mov	r4,r22
    1064:	00019fc0 	call	19fc <__clzsi2>
    1068:	117ffd44 	addi	r5,r2,-11
    106c:	01000744 	movi	r4,29
    1070:	127ffe04 	addi	r9,r2,-8
    1074:	2149c83a 	sub	r4,r4,r5
    1078:	b246983a 	sll	r3,r22,r9
    107c:	e108d83a 	srl	r4,fp,r4
    1080:	e252983a 	sll	r9,fp,r9
    1084:	20ecb03a 	or	r22,r4,r3
    1088:	1491883a 	add	r8,r2,r18
    108c:	4480fcc4 	addi	r18,r8,1011
    1090:	0007883a 	mov	r3,zero
    1094:	003fb306 	br	f64 <__divdf3+0xc0>
    1098:	8126b03a 	or	r19,r16,r4
    109c:	2023883a 	mov	r17,r4
    10a0:	98002726 	beq	r19,zero,1140 <__divdf3+0x29c>
    10a4:	80017026 	beq	r16,zero,1668 <__divdf3+0x7c4>
    10a8:	8009883a 	mov	r4,r16
    10ac:	00019fc0 	call	19fc <__clzsi2>
    10b0:	113ffd44 	addi	r4,r2,-11
    10b4:	00c00744 	movi	r3,29
    10b8:	14fffe04 	addi	r19,r2,-8
    10bc:	1907c83a 	sub	r3,r3,r4
    10c0:	84ca983a 	sll	r5,r16,r19
    10c4:	88c6d83a 	srl	r3,r17,r3
    10c8:	8ce8983a 	sll	r20,r17,r19
    10cc:	1966b03a 	or	r19,r3,r5
    10d0:	023f0344 	movi	r8,-1011
    10d4:	40a5c83a 	sub	r18,r8,r2
    10d8:	0021883a 	mov	r16,zero
    10dc:	0023883a 	mov	r17,zero
    10e0:	003f8f06 	br	f20 <__divdf3+0x7c>
    10e4:	8126b03a 	or	r19,r16,r4
    10e8:	9800101e 	bne	r19,zero,112c <__divdf3+0x288>
    10ec:	0029883a 	mov	r20,zero
    10f0:	04000204 	movi	r16,8
    10f4:	0481ffc4 	movi	r18,2047
    10f8:	04400084 	movi	r17,2
    10fc:	003f8806 	br	f20 <__divdf3+0x7c>
    1100:	b712b03a 	or	r9,r22,fp
    1104:	94be0044 	addi	r18,r18,-2047
    1108:	4800041e 	bne	r9,zero,111c <__divdf3+0x278>
    110c:	84000094 	ori	r16,r16,2
    1110:	002d883a 	mov	r22,zero
    1114:	00c00084 	movi	r3,2
    1118:	003f9206 	br	f64 <__divdf3+0xc0>
    111c:	840000d4 	ori	r16,r16,3
    1120:	e013883a 	mov	r9,fp
    1124:	00c000c4 	movi	r3,3
    1128:	003f8e06 	br	f64 <__divdf3+0xc0>
    112c:	8027883a 	mov	r19,r16
    1130:	0481ffc4 	movi	r18,2047
    1134:	04000304 	movi	r16,12
    1138:	044000c4 	movi	r17,3
    113c:	003f7806 	br	f20 <__divdf3+0x7c>
    1140:	0029883a 	mov	r20,zero
    1144:	04000104 	movi	r16,4
    1148:	0025883a 	mov	r18,zero
    114c:	04400044 	movi	r17,1
    1150:	003f7306 	br	f20 <__divdf3+0x7c>
    1154:	84000054 	ori	r16,r16,1
    1158:	002d883a 	mov	r22,zero
    115c:	00c00044 	movi	r3,1
    1160:	003f8006 	br	f64 <__divdf3+0xc0>
    1164:	9440ffc4 	addi	r17,r18,1023
    1168:	0441050e 	bge	zero,r17,1580 <__divdf3+0x6dc>
    116c:	a08001cc 	andi	r2,r20,7
    1170:	10016c1e 	bne	r2,zero,1724 <__divdf3+0x880>
    1174:	a008d0fa 	srli	r4,r20,3
    1178:	9880402c 	andhi	r2,r19,256
    117c:	10000426 	beq	r2,zero,1190 <__divdf3+0x2ec>
    1180:	00bfc034 	movhi	r2,65280
    1184:	10bfffc4 	addi	r2,r2,-1
    1188:	98a6703a 	and	r19,r19,r2
    118c:	94410004 	addi	r17,r18,1024
    1190:	8881ffc8 	cmpgei	r2,r17,2047
    1194:	103fa61e 	bne	r2,zero,1030 <__divdf3+0x18c>
    1198:	9828977a 	slli	r20,r19,29
    119c:	980a927a 	slli	r5,r19,9
    11a0:	88c1ffcc 	andi	r3,r17,2047
    11a4:	a128b03a 	or	r20,r20,r4
    11a8:	280ad33a 	srli	r5,r5,12
    11ac:	003f8f06 	br	fec <__divdf3+0x148>
    11b0:	01400434 	movhi	r5,16
    11b4:	000f883a 	mov	r7,zero
    11b8:	297fffc4 	addi	r5,r5,-1
    11bc:	053fffc4 	movi	r20,-1
    11c0:	00c1ffc4 	movi	r3,2047
    11c4:	003f8906 	br	fec <__divdf3+0x148>
    11c8:	9880022c 	andhi	r2,r19,8
    11cc:	10000926 	beq	r2,zero,11f4 <__divdf3+0x350>
    11d0:	b080022c 	andhi	r2,r22,8
    11d4:	1000071e 	bne	r2,zero,11f4 <__divdf3+0x350>
    11d8:	00800434 	movhi	r2,16
    11dc:	b1400234 	orhi	r5,r22,8
    11e0:	10bfffc4 	addi	r2,r2,-1
    11e4:	288a703a 	and	r5,r5,r2
    11e8:	a80f883a 	mov	r7,r21
    11ec:	4829883a 	mov	r20,r9
    11f0:	003ff306 	br	11c0 <__divdf3+0x31c>
    11f4:	00800434 	movhi	r2,16
    11f8:	99400234 	orhi	r5,r19,8
    11fc:	10bfffc4 	addi	r2,r2,-1
    1200:	288a703a 	and	r5,r5,r2
    1204:	b80f883a 	mov	r7,r23
    1208:	003fed06 	br	11c0 <__divdf3+0x31c>
    120c:	b4c10536 	bltu	r22,r19,1624 <__divdf3+0x780>
    1210:	b4c10326 	beq	r22,r19,1620 <__divdf3+0x77c>
    1214:	94bfffc4 	addi	r18,r18,-1
    1218:	a039883a 	mov	fp,r20
    121c:	9821883a 	mov	r16,r19
    1220:	0023883a 	mov	r17,zero
    1224:	b006923a 	slli	r3,r22,8
    1228:	482cd63a 	srli	r22,r9,24
    122c:	8009883a 	mov	r4,r16
    1230:	182ed43a 	srli	r23,r3,16
    1234:	b0ecb03a 	or	r22,r22,r3
    1238:	d9c00015 	stw	r7,0(sp)
    123c:	b80b883a 	mov	r5,r23
    1240:	482a923a 	slli	r21,r9,8
    1244:	b53fffcc 	andi	r20,r22,65535
    1248:	0001b440 	call	1b44 <__udivsi3>
    124c:	100b883a 	mov	r5,r2
    1250:	a009883a 	mov	r4,r20
    1254:	1027883a 	mov	r19,r2
    1258:	0001c040 	call	1c04 <__mulsi3>
    125c:	8009883a 	mov	r4,r16
    1260:	b80b883a 	mov	r5,r23
    1264:	1021883a 	mov	r16,r2
    1268:	0001ba80 	call	1ba8 <__umodsi3>
    126c:	1004943a 	slli	r2,r2,16
    1270:	e008d43a 	srli	r4,fp,16
    1274:	d9c00017 	ldw	r7,0(sp)
    1278:	2088b03a 	or	r4,r4,r2
    127c:	2400042e 	bgeu	r4,r16,1290 <__divdf3+0x3ec>
    1280:	2589883a 	add	r4,r4,r22
    1284:	98bfffc4 	addi	r2,r19,-1
    1288:	2581082e 	bgeu	r4,r22,16ac <__divdf3+0x808>
    128c:	1027883a 	mov	r19,r2
    1290:	2421c83a 	sub	r16,r4,r16
    1294:	b80b883a 	mov	r5,r23
    1298:	8009883a 	mov	r4,r16
    129c:	d9c00215 	stw	r7,8(sp)
    12a0:	0001b440 	call	1b44 <__udivsi3>
    12a4:	100b883a 	mov	r5,r2
    12a8:	a009883a 	mov	r4,r20
    12ac:	d8800115 	stw	r2,4(sp)
    12b0:	0001c040 	call	1c04 <__mulsi3>
    12b4:	b80b883a 	mov	r5,r23
    12b8:	8009883a 	mov	r4,r16
    12bc:	d8800015 	stw	r2,0(sp)
    12c0:	0001ba80 	call	1ba8 <__umodsi3>
    12c4:	100c943a 	slli	r6,r2,16
    12c8:	d8c00017 	ldw	r3,0(sp)
    12cc:	e73fffcc 	andi	fp,fp,65535
    12d0:	e18cb03a 	or	r6,fp,r6
    12d4:	da000117 	ldw	r8,4(sp)
    12d8:	d9c00217 	ldw	r7,8(sp)
    12dc:	30c0042e 	bgeu	r6,r3,12f0 <__divdf3+0x44c>
    12e0:	358d883a 	add	r6,r6,r22
    12e4:	40bfffc4 	addi	r2,r8,-1
    12e8:	3580ec2e 	bgeu	r6,r22,169c <__divdf3+0x7f8>
    12ec:	1011883a 	mov	r8,r2
    12f0:	9826943a 	slli	r19,r19,16
    12f4:	af3fffcc 	andi	fp,r21,65535
    12f8:	30c7c83a 	sub	r3,r6,r3
    12fc:	9a26b03a 	or	r19,r19,r8
    1300:	9810d43a 	srli	r8,r19,16
    1304:	9abfffcc 	andi	r10,r19,65535
    1308:	5009883a 	mov	r4,r10
    130c:	e00b883a 	mov	r5,fp
    1310:	d9c00515 	stw	r7,20(sp)
    1314:	d8c00315 	stw	r3,12(sp)
    1318:	da800415 	stw	r10,16(sp)
    131c:	da000015 	stw	r8,0(sp)
    1320:	0001c040 	call	1c04 <__mulsi3>
    1324:	da000017 	ldw	r8,0(sp)
    1328:	e00b883a 	mov	r5,fp
    132c:	d8800215 	stw	r2,8(sp)
    1330:	4009883a 	mov	r4,r8
    1334:	0001c040 	call	1c04 <__mulsi3>
    1338:	da000017 	ldw	r8,0(sp)
    133c:	a820d43a 	srli	r16,r21,16
    1340:	d8800115 	stw	r2,4(sp)
    1344:	4009883a 	mov	r4,r8
    1348:	800b883a 	mov	r5,r16
    134c:	0001c040 	call	1c04 <__mulsi3>
    1350:	da800417 	ldw	r10,16(sp)
    1354:	8009883a 	mov	r4,r16
    1358:	d8800015 	stw	r2,0(sp)
    135c:	500b883a 	mov	r5,r10
    1360:	0001c040 	call	1c04 <__mulsi3>
    1364:	d9800217 	ldw	r6,8(sp)
    1368:	da000117 	ldw	r8,4(sp)
    136c:	da400017 	ldw	r9,0(sp)
    1370:	3008d43a 	srli	r4,r6,16
    1374:	1205883a 	add	r2,r2,r8
    1378:	d8c00317 	ldw	r3,12(sp)
    137c:	2089883a 	add	r4,r4,r2
    1380:	d9c00517 	ldw	r7,20(sp)
    1384:	2200022e 	bgeu	r4,r8,1390 <__divdf3+0x4ec>
    1388:	00800074 	movhi	r2,1
    138c:	4893883a 	add	r9,r9,r2
    1390:	200ad43a 	srli	r5,r4,16
    1394:	2008943a 	slli	r4,r4,16
    1398:	31bfffcc 	andi	r6,r6,65535
    139c:	2a4b883a 	add	r5,r5,r9
    13a0:	218d883a 	add	r6,r4,r6
    13a4:	19409436 	bltu	r3,r5,15f8 <__divdf3+0x754>
    13a8:	19409226 	beq	r3,r5,15f4 <__divdf3+0x750>
    13ac:	898dc83a 	sub	r6,r17,r6
    13b0:	89a3803a 	cmpltu	r17,r17,r6
    13b4:	1947c83a 	sub	r3,r3,r5
    13b8:	1c47c83a 	sub	r3,r3,r17
    13bc:	9440ffc4 	addi	r17,r18,1023
    13c0:	b0c0d326 	beq	r22,r3,1710 <__divdf3+0x86c>
    13c4:	1809883a 	mov	r4,r3
    13c8:	b80b883a 	mov	r5,r23
    13cc:	d9800315 	stw	r6,12(sp)
    13d0:	d9c00215 	stw	r7,8(sp)
    13d4:	d8c00015 	stw	r3,0(sp)
    13d8:	0001b440 	call	1b44 <__udivsi3>
    13dc:	100b883a 	mov	r5,r2
    13e0:	a009883a 	mov	r4,r20
    13e4:	d8800115 	stw	r2,4(sp)
    13e8:	0001c040 	call	1c04 <__mulsi3>
    13ec:	d8c00017 	ldw	r3,0(sp)
    13f0:	b80b883a 	mov	r5,r23
    13f4:	d8800015 	stw	r2,0(sp)
    13f8:	1809883a 	mov	r4,r3
    13fc:	0001ba80 	call	1ba8 <__umodsi3>
    1400:	d9800317 	ldw	r6,12(sp)
    1404:	1006943a 	slli	r3,r2,16
    1408:	da400017 	ldw	r9,0(sp)
    140c:	3008d43a 	srli	r4,r6,16
    1410:	da000117 	ldw	r8,4(sp)
    1414:	d9c00217 	ldw	r7,8(sp)
    1418:	20c6b03a 	or	r3,r4,r3
    141c:	1a40062e 	bgeu	r3,r9,1438 <__divdf3+0x594>
    1420:	1d87883a 	add	r3,r3,r22
    1424:	40bfffc4 	addi	r2,r8,-1
    1428:	1d80c836 	bltu	r3,r22,174c <__divdf3+0x8a8>
    142c:	1a40c72e 	bgeu	r3,r9,174c <__divdf3+0x8a8>
    1430:	423fff84 	addi	r8,r8,-2
    1434:	1d87883a 	add	r3,r3,r22
    1438:	1a47c83a 	sub	r3,r3,r9
    143c:	1809883a 	mov	r4,r3
    1440:	b80b883a 	mov	r5,r23
    1444:	d9800415 	stw	r6,16(sp)
    1448:	d9c00315 	stw	r7,12(sp)
    144c:	da000215 	stw	r8,8(sp)
    1450:	d8c00115 	stw	r3,4(sp)
    1454:	0001b440 	call	1b44 <__udivsi3>
    1458:	100b883a 	mov	r5,r2
    145c:	a009883a 	mov	r4,r20
    1460:	d8800015 	stw	r2,0(sp)
    1464:	0001c040 	call	1c04 <__mulsi3>
    1468:	d8c00117 	ldw	r3,4(sp)
    146c:	b80b883a 	mov	r5,r23
    1470:	102f883a 	mov	r23,r2
    1474:	1809883a 	mov	r4,r3
    1478:	0001ba80 	call	1ba8 <__umodsi3>
    147c:	d9800417 	ldw	r6,16(sp)
    1480:	1004943a 	slli	r2,r2,16
    1484:	da400017 	ldw	r9,0(sp)
    1488:	31bfffcc 	andi	r6,r6,65535
    148c:	308cb03a 	or	r6,r6,r2
    1490:	da000217 	ldw	r8,8(sp)
    1494:	d9c00317 	ldw	r7,12(sp)
    1498:	35c0062e 	bgeu	r6,r23,14b4 <__divdf3+0x610>
    149c:	358d883a 	add	r6,r6,r22
    14a0:	48bfffc4 	addi	r2,r9,-1
    14a4:	3580a736 	bltu	r6,r22,1744 <__divdf3+0x8a0>
    14a8:	35c0a62e 	bgeu	r6,r23,1744 <__divdf3+0x8a0>
    14ac:	4a7fff84 	addi	r9,r9,-2
    14b0:	358d883a 	add	r6,r6,r22
    14b4:	4028943a 	slli	r20,r8,16
    14b8:	35d5c83a 	sub	r10,r6,r23
    14bc:	e009883a 	mov	r4,fp
    14c0:	a268b03a 	or	r20,r20,r9
    14c4:	a23fffcc 	andi	r8,r20,65535
    14c8:	a02ed43a 	srli	r23,r20,16
    14cc:	400b883a 	mov	r5,r8
    14d0:	d9c00315 	stw	r7,12(sp)
    14d4:	da800215 	stw	r10,8(sp)
    14d8:	da000115 	stw	r8,4(sp)
    14dc:	0001c040 	call	1c04 <__mulsi3>
    14e0:	e00b883a 	mov	r5,fp
    14e4:	b809883a 	mov	r4,r23
    14e8:	1039883a 	mov	fp,r2
    14ec:	0001c040 	call	1c04 <__mulsi3>
    14f0:	8009883a 	mov	r4,r16
    14f4:	b80b883a 	mov	r5,r23
    14f8:	d8800015 	stw	r2,0(sp)
    14fc:	0001c040 	call	1c04 <__mulsi3>
    1500:	da000117 	ldw	r8,4(sp)
    1504:	8009883a 	mov	r4,r16
    1508:	1021883a 	mov	r16,r2
    150c:	400b883a 	mov	r5,r8
    1510:	0001c040 	call	1c04 <__mulsi3>
    1514:	d9800017 	ldw	r6,0(sp)
    1518:	e006d43a 	srli	r3,fp,16
    151c:	da800217 	ldw	r10,8(sp)
    1520:	1185883a 	add	r2,r2,r6
    1524:	1887883a 	add	r3,r3,r2
    1528:	d9c00317 	ldw	r7,12(sp)
    152c:	1980022e 	bgeu	r3,r6,1538 <__divdf3+0x694>
    1530:	00800074 	movhi	r2,1
    1534:	80a1883a 	add	r16,r16,r2
    1538:	1808d43a 	srli	r4,r3,16
    153c:	1806943a 	slli	r3,r3,16
    1540:	e73fffcc 	andi	fp,fp,65535
    1544:	2409883a 	add	r4,r4,r16
    1548:	1f07883a 	add	r3,r3,fp
    154c:	51000436 	bltu	r10,r4,1560 <__divdf3+0x6bc>
    1550:	51000226 	beq	r10,r4,155c <__divdf3+0x6b8>
    1554:	a5000054 	ori	r20,r20,1
    1558:	003f0306 	br	1168 <__divdf3+0x2c4>
    155c:	183f0226 	beq	r3,zero,1168 <__divdf3+0x2c4>
    1560:	b28d883a 	add	r6,r22,r10
    1564:	a0bfffc4 	addi	r2,r20,-1
    1568:	35806536 	bltu	r6,r22,1700 <__divdf3+0x85c>
    156c:	31008036 	bltu	r6,r4,1770 <__divdf3+0x8cc>
    1570:	31009426 	beq	r6,r4,17c4 <__divdf3+0x920>
    1574:	1029883a 	mov	r20,r2
    1578:	003ff606 	br	1554 <__divdf3+0x6b0>
    157c:	053fffc4 	movi	r20,-1
    1580:	01400044 	movi	r5,1
    1584:	2c4bc83a 	sub	r5,r5,r17
    1588:	28800e48 	cmpgei	r2,r5,57
    158c:	103e941e 	bne	r2,zero,fe0 <__divdf3+0x13c>
    1590:	28800808 	cmpgei	r2,r5,32
    1594:	1000491e 	bne	r2,zero,16bc <__divdf3+0x818>
    1598:	92010784 	addi	r8,r18,1054
    159c:	9a04983a 	sll	r2,r19,r8
    15a0:	a146d83a 	srl	r3,r20,r5
    15a4:	a210983a 	sll	r8,r20,r8
    15a8:	994ad83a 	srl	r5,r19,r5
    15ac:	10e8b03a 	or	r20,r2,r3
    15b0:	4010c03a 	cmpne	r8,r8,zero
    15b4:	a228b03a 	or	r20,r20,r8
    15b8:	a08001cc 	andi	r2,r20,7
    15bc:	10000726 	beq	r2,zero,15dc <__divdf3+0x738>
    15c0:	a08003cc 	andi	r2,r20,15
    15c4:	10800120 	cmpeqi	r2,r2,4
    15c8:	1000041e 	bne	r2,zero,15dc <__divdf3+0x738>
    15cc:	a0800104 	addi	r2,r20,4
    15d0:	1529803a 	cmpltu	r20,r2,r20
    15d4:	2d0b883a 	add	r5,r5,r20
    15d8:	1029883a 	mov	r20,r2
    15dc:	2880202c 	andhi	r2,r5,128
    15e0:	10006f26 	beq	r2,zero,17a0 <__divdf3+0x8fc>
    15e4:	00c00044 	movi	r3,1
    15e8:	000b883a 	mov	r5,zero
    15ec:	0029883a 	mov	r20,zero
    15f0:	003e7e06 	br	fec <__divdf3+0x148>
    15f4:	89bf6d2e 	bgeu	r17,r6,13ac <__divdf3+0x508>
    15f8:	8d63883a 	add	r17,r17,r21
    15fc:	8d45803a 	cmpltu	r2,r17,r21
    1600:	1585883a 	add	r2,r2,r22
    1604:	1887883a 	add	r3,r3,r2
    1608:	98bfffc4 	addi	r2,r19,-1
    160c:	b0c0202e 	bgeu	r22,r3,1690 <__divdf3+0x7ec>
    1610:	19405136 	bltu	r3,r5,1758 <__divdf3+0x8b4>
    1614:	28c04f26 	beq	r5,r3,1754 <__divdf3+0x8b0>
    1618:	1027883a 	mov	r19,r2
    161c:	003f6306 	br	13ac <__divdf3+0x508>
    1620:	a27efc36 	bltu	r20,r9,1214 <__divdf3+0x370>
    1624:	983897fa 	slli	fp,r19,31
    1628:	a004d07a 	srli	r2,r20,1
    162c:	9820d07a 	srli	r16,r19,1
    1630:	a02297fa 	slli	r17,r20,31
    1634:	e0b8b03a 	or	fp,fp,r2
    1638:	003efa06 	br	1224 <__divdf3+0x380>
    163c:	e009883a 	mov	r4,fp
    1640:	00019fc0 	call	19fc <__clzsi2>
    1644:	11400544 	addi	r5,r2,21
    1648:	29000748 	cmpgei	r4,r5,29
    164c:	1007883a 	mov	r3,r2
    1650:	10800804 	addi	r2,r2,32
    1654:	203e8526 	beq	r4,zero,106c <__divdf3+0x1c8>
    1658:	18fffe04 	addi	r3,r3,-8
    165c:	e0ec983a 	sll	r22,fp,r3
    1660:	0013883a 	mov	r9,zero
    1664:	003e8806 	br	1088 <__divdf3+0x1e4>
    1668:	00019fc0 	call	19fc <__clzsi2>
    166c:	11000544 	addi	r4,r2,21
    1670:	20c00748 	cmpgei	r3,r4,29
    1674:	100b883a 	mov	r5,r2
    1678:	10800804 	addi	r2,r2,32
    167c:	183e8d26 	beq	r3,zero,10b4 <__divdf3+0x210>
    1680:	297ffe04 	addi	r5,r5,-8
    1684:	a166983a 	sll	r19,r20,r5
    1688:	0029883a 	mov	r20,zero
    168c:	003e9006 	br	10d0 <__divdf3+0x22c>
    1690:	b0ffe11e 	bne	r22,r3,1618 <__divdf3+0x774>
    1694:	8d7fe036 	bltu	r17,r21,1618 <__divdf3+0x774>
    1698:	003fdd06 	br	1610 <__divdf3+0x76c>
    169c:	30ff132e 	bgeu	r6,r3,12ec <__divdf3+0x448>
    16a0:	423fff84 	addi	r8,r8,-2
    16a4:	358d883a 	add	r6,r6,r22
    16a8:	003f1106 	br	12f0 <__divdf3+0x44c>
    16ac:	243ef72e 	bgeu	r4,r16,128c <__divdf3+0x3e8>
    16b0:	9cffff84 	addi	r19,r19,-2
    16b4:	2589883a 	add	r4,r4,r22
    16b8:	003ef506 	br	1290 <__divdf3+0x3ec>
    16bc:	00fff844 	movi	r3,-31
    16c0:	1c47c83a 	sub	r3,r3,r17
    16c4:	29400820 	cmpeqi	r5,r5,32
    16c8:	98c6d83a 	srl	r3,r19,r3
    16cc:	2800031e 	bne	r5,zero,16dc <__divdf3+0x838>
    16d0:	91410f84 	addi	r5,r18,1086
    16d4:	994a983a 	sll	r5,r19,r5
    16d8:	a168b03a 	or	r20,r20,r5
    16dc:	a028c03a 	cmpne	r20,r20,zero
    16e0:	a0e8b03a 	or	r20,r20,r3
    16e4:	a4c001cc 	andi	r19,r20,7
    16e8:	9800291e 	bne	r19,zero,1790 <__divdf3+0x8ec>
    16ec:	000b883a 	mov	r5,zero
    16f0:	a028d0fa 	srli	r20,r20,3
    16f4:	0007883a 	mov	r3,zero
    16f8:	a4e8b03a 	or	r20,r20,r19
    16fc:	003e3b06 	br	fec <__divdf3+0x148>
    1700:	1029883a 	mov	r20,r2
    1704:	313f931e 	bne	r6,r4,1554 <__divdf3+0x6b0>
    1708:	1d7f921e 	bne	r3,r21,1554 <__divdf3+0x6b0>
    170c:	003e9606 	br	1168 <__divdf3+0x2c4>
    1710:	047f9a0e 	bge	zero,r17,157c <__divdf3+0x6d8>
    1714:	0009883a 	mov	r4,zero
    1718:	05000044 	movi	r20,1
    171c:	9d27883a 	add	r19,r19,r20
    1720:	003e9506 	br	1178 <__divdf3+0x2d4>
    1724:	a08003cc 	andi	r2,r20,15
    1728:	10800118 	cmpnei	r2,r2,4
    172c:	103e9126 	beq	r2,zero,1174 <__divdf3+0x2d0>
    1730:	a1000104 	addi	r4,r20,4
    1734:	00bffec4 	movi	r2,-5
    1738:	2008d0fa 	srli	r4,r4,3
    173c:	1529803a 	cmpltu	r20,r2,r20
    1740:	003ff606 	br	171c <__divdf3+0x878>
    1744:	1013883a 	mov	r9,r2
    1748:	003f5a06 	br	14b4 <__divdf3+0x610>
    174c:	1011883a 	mov	r8,r2
    1750:	003f3906 	br	1438 <__divdf3+0x594>
    1754:	89bfb02e 	bgeu	r17,r6,1618 <__divdf3+0x774>
    1758:	8d63883a 	add	r17,r17,r21
    175c:	8d45803a 	cmpltu	r2,r17,r21
    1760:	1585883a 	add	r2,r2,r22
    1764:	9cffff84 	addi	r19,r19,-2
    1768:	1887883a 	add	r3,r3,r2
    176c:	003f0f06 	br	13ac <__divdf3+0x508>
    1770:	ad45883a 	add	r2,r21,r21
    1774:	156b803a 	cmpltu	r21,r2,r21
    1778:	adad883a 	add	r22,r21,r22
    177c:	358d883a 	add	r6,r6,r22
    1780:	a53fff84 	addi	r20,r20,-2
    1784:	102b883a 	mov	r21,r2
    1788:	313fdf26 	beq	r6,r4,1708 <__divdf3+0x864>
    178c:	003f7106 	br	1554 <__divdf3+0x6b0>
    1790:	a08003cc 	andi	r2,r20,15
    1794:	10800118 	cmpnei	r2,r2,4
    1798:	000b883a 	mov	r5,zero
    179c:	103f8b1e 	bne	r2,zero,15cc <__divdf3+0x728>
    17a0:	2804927a 	slli	r2,r5,9
    17a4:	2826977a 	slli	r19,r5,29
    17a8:	100ad33a 	srli	r5,r2,12
    17ac:	003fd006 	br	16f0 <__divdf3+0x84c>
    17b0:	00800434 	movhi	r2,16
    17b4:	99400234 	orhi	r5,r19,8
    17b8:	10bfffc4 	addi	r2,r2,-1
    17bc:	288a703a 	and	r5,r5,r2
    17c0:	003e7f06 	br	11c0 <__divdf3+0x31c>
    17c4:	a8ffea36 	bltu	r21,r3,1770 <__divdf3+0x8cc>
    17c8:	1029883a 	mov	r20,r2
    17cc:	1d7f611e 	bne	r3,r21,1554 <__divdf3+0x6b0>
    17d0:	003e6506 	br	1168 <__divdf3+0x2c4>

000017d4 <__floatsidf>:
    17d4:	defffd04 	addi	sp,sp,-12
    17d8:	dfc00215 	stw	ra,8(sp)
    17dc:	dc400115 	stw	r17,4(sp)
    17e0:	dc000015 	stw	r16,0(sp)
    17e4:	20001326 	beq	r4,zero,1834 <__floatsidf+0x60>
    17e8:	2022d7fa 	srli	r17,r4,31
    17ec:	2021883a 	mov	r16,r4
    17f0:	20002416 	blt	r4,zero,1884 <__floatsidf+0xb0>
    17f4:	8009883a 	mov	r4,r16
    17f8:	00019fc0 	call	19fc <__clzsi2>
    17fc:	01010784 	movi	r4,1054
    1800:	2089c83a 	sub	r4,r4,r2
    1804:	114002c8 	cmpgei	r5,r2,11
    1808:	20c1ffcc 	andi	r3,r4,2047
    180c:	2800161e 	bne	r5,zero,1868 <__floatsidf+0x94>
    1810:	010002c4 	movi	r4,11
    1814:	2089c83a 	sub	r4,r4,r2
    1818:	810ad83a 	srl	r5,r16,r4
    181c:	01000434 	movhi	r4,16
    1820:	10800544 	addi	r2,r2,21
    1824:	213fffc4 	addi	r4,r4,-1
    1828:	8084983a 	sll	r2,r16,r2
    182c:	290a703a 	and	r5,r5,r4
    1830:	00000406 	br	1844 <__floatsidf+0x70>
    1834:	0023883a 	mov	r17,zero
    1838:	0007883a 	mov	r3,zero
    183c:	000b883a 	mov	r5,zero
    1840:	0005883a 	mov	r2,zero
    1844:	1808953a 	slli	r4,r3,20
    1848:	880697fa 	slli	r3,r17,31
    184c:	2148b03a 	or	r4,r4,r5
    1850:	20c6b03a 	or	r3,r4,r3
    1854:	dfc00217 	ldw	ra,8(sp)
    1858:	dc400117 	ldw	r17,4(sp)
    185c:	dc000017 	ldw	r16,0(sp)
    1860:	dec00304 	addi	sp,sp,12
    1864:	f800283a 	ret
    1868:	10bffd44 	addi	r2,r2,-11
    186c:	808a983a 	sll	r5,r16,r2
    1870:	00800434 	movhi	r2,16
    1874:	10bfffc4 	addi	r2,r2,-1
    1878:	288a703a 	and	r5,r5,r2
    187c:	0005883a 	mov	r2,zero
    1880:	003ff006 	br	1844 <__floatsidf+0x70>
    1884:	0121c83a 	sub	r16,zero,r4
    1888:	003fda06 	br	17f4 <__floatsidf+0x20>

0000188c <__truncdfsf2>:
    188c:	2804d53a 	srli	r2,r5,20
    1890:	00c00434 	movhi	r3,16
    1894:	18ffffc4 	addi	r3,r3,-1
    1898:	28c6703a 	and	r3,r5,r3
    189c:	180c90fa 	slli	r6,r3,3
    18a0:	1081ffcc 	andi	r2,r2,2047
    18a4:	2006d77a 	srli	r3,r4,29
    18a8:	11c00044 	addi	r7,r2,1
    18ac:	39c1ff8c 	andi	r7,r7,2046
    18b0:	280ad7fa 	srli	r5,r5,31
    18b4:	201090fa 	slli	r8,r4,3
    18b8:	1986b03a 	or	r3,r3,r6
    18bc:	38000b26 	beq	r7,zero,18ec <__truncdfsf2+0x60>
    18c0:	11bf2004 	addi	r6,r2,-896
    18c4:	31c03fc8 	cmpgei	r7,r6,255
    18c8:	38001226 	beq	r7,zero,1914 <__truncdfsf2+0x88>
    18cc:	00bfffc4 	movi	r2,-1
    18d0:	0007883a 	mov	r3,zero
    18d4:	10803fcc 	andi	r2,r2,255
    18d8:	100495fa 	slli	r2,r2,23
    18dc:	280a97fa 	slli	r5,r5,31
    18e0:	10c4b03a 	or	r2,r2,r3
    18e4:	1144b03a 	or	r2,r2,r5
    18e8:	f800283a 	ret
    18ec:	1a10b03a 	or	r8,r3,r8
    18f0:	1000041e 	bne	r2,zero,1904 <__truncdfsf2+0x78>
    18f4:	40001d1e 	bne	r8,zero,196c <__truncdfsf2+0xe0>
    18f8:	0005883a 	mov	r2,zero
    18fc:	0007883a 	mov	r3,zero
    1900:	003ff406 	br	18d4 <__truncdfsf2+0x48>
    1904:	403ff126 	beq	r8,zero,18cc <__truncdfsf2+0x40>
    1908:	18c01034 	orhi	r3,r3,64
    190c:	00bfffc4 	movi	r2,-1
    1910:	003ff006 	br	18d4 <__truncdfsf2+0x48>
    1914:	0180170e 	bge	zero,r6,1974 <__truncdfsf2+0xe8>
    1918:	200891ba 	slli	r4,r4,6
    191c:	180690fa 	slli	r3,r3,3
    1920:	4010d77a 	srli	r8,r8,29
    1924:	2008c03a 	cmpne	r4,r4,zero
    1928:	20c6b03a 	or	r3,r4,r3
    192c:	1a06b03a 	or	r3,r3,r8
    1930:	188001cc 	andi	r2,r3,7
    1934:	10002f26 	beq	r2,zero,19f4 <__truncdfsf2+0x168>
    1938:	188003cc 	andi	r2,r3,15
    193c:	10800118 	cmpnei	r2,r2,4
    1940:	10000126 	beq	r2,zero,1948 <__truncdfsf2+0xbc>
    1944:	18c00104 	addi	r3,r3,4
    1948:	1881002c 	andhi	r2,r3,1024
    194c:	10002926 	beq	r2,zero,19f4 <__truncdfsf2+0x168>
    1950:	30800044 	addi	r2,r6,1
    1954:	11003fe0 	cmpeqi	r4,r2,255
    1958:	203fdc1e 	bne	r4,zero,18cc <__truncdfsf2+0x40>
    195c:	180691ba 	slli	r3,r3,6
    1960:	1806d27a 	srli	r3,r3,9
    1964:	003fdb06 	br	18d4 <__truncdfsf2+0x48>
    1968:	0005883a 	mov	r2,zero
    196c:	00c00144 	movi	r3,5
    1970:	003ffa06 	br	195c <__truncdfsf2+0xd0>
    1974:	313ffa50 	cmplti	r4,r6,-23
    1978:	203ffb1e 	bne	r4,zero,1968 <__truncdfsf2+0xdc>
    197c:	01c00784 	movi	r7,30
    1980:	398fc83a 	sub	r7,r7,r6
    1984:	3a400808 	cmpgei	r9,r7,32
    1988:	19002034 	orhi	r4,r3,128
    198c:	48001126 	beq	r9,zero,19d4 <__truncdfsf2+0x148>
    1990:	00ffff84 	movi	r3,-2
    1994:	198dc83a 	sub	r6,r3,r6
    1998:	39c00820 	cmpeqi	r7,r7,32
    199c:	218cd83a 	srl	r6,r4,r6
    19a0:	3800031e 	bne	r7,zero,19b0 <__truncdfsf2+0x124>
    19a4:	10ff2884 	addi	r3,r2,-862
    19a8:	20c8983a 	sll	r4,r4,r3
    19ac:	4110b03a 	or	r8,r8,r4
    19b0:	4006c03a 	cmpne	r3,r8,zero
    19b4:	1986b03a 	or	r3,r3,r6
    19b8:	188001cc 	andi	r2,r3,7
    19bc:	000d883a 	mov	r6,zero
    19c0:	103fdd1e 	bne	r2,zero,1938 <__truncdfsf2+0xac>
    19c4:	1881002c 	andhi	r2,r3,1024
    19c8:	103fe426 	beq	r2,zero,195c <__truncdfsf2+0xd0>
    19cc:	00800044 	movi	r2,1
    19d0:	003fe206 	br	195c <__truncdfsf2+0xd0>
    19d4:	10ff2084 	addi	r3,r2,-894
    19d8:	40c4983a 	sll	r2,r8,r3
    19dc:	20c8983a 	sll	r4,r4,r3
    19e0:	41c6d83a 	srl	r3,r8,r7
    19e4:	1004c03a 	cmpne	r2,r2,zero
    19e8:	1108b03a 	or	r4,r2,r4
    19ec:	1906b03a 	or	r3,r3,r4
    19f0:	003ff106 	br	19b8 <__truncdfsf2+0x12c>
    19f4:	3005883a 	mov	r2,r6
    19f8:	003fd806 	br	195c <__truncdfsf2+0xd0>

000019fc <__clzsi2>:
    19fc:	00bfffd4 	movui	r2,65535
    1a00:	11000436 	bltu	r2,r4,1a14 <__clzsi2+0x18>
    1a04:	20804030 	cmpltui	r2,r4,256
    1a08:	10000e26 	beq	r2,zero,1a44 <__clzsi2+0x48>
    1a0c:	01400804 	movi	r5,32
    1a10:	00000406 	br	1a24 <__clzsi2+0x28>
    1a14:	00804034 	movhi	r2,256
    1a18:	20800736 	bltu	r4,r2,1a38 <__clzsi2+0x3c>
    1a1c:	2008d63a 	srli	r4,r4,24
    1a20:	01400204 	movi	r5,8
    1a24:	00c00034 	movhi	r3,0
    1a28:	20c7883a 	add	r3,r4,r3
    1a2c:	18884603 	ldbu	r2,8472(r3)
    1a30:	2885c83a 	sub	r2,r5,r2
    1a34:	f800283a 	ret
    1a38:	2008d43a 	srli	r4,r4,16
    1a3c:	01400404 	movi	r5,16
    1a40:	003ff806 	br	1a24 <__clzsi2+0x28>
    1a44:	2008d23a 	srli	r4,r4,8
    1a48:	01400604 	movi	r5,24
    1a4c:	003ff506 	br	1a24 <__clzsi2+0x28>

00001a50 <__divsi3>:
    1a50:	20001a16 	blt	r4,zero,1abc <__divsi3+0x6c>
    1a54:	000f883a 	mov	r7,zero
    1a58:	2800020e 	bge	r5,zero,1a64 <__divsi3+0x14>
    1a5c:	014bc83a 	sub	r5,zero,r5
    1a60:	39c0005c 	xori	r7,r7,1
    1a64:	200d883a 	mov	r6,r4
    1a68:	00c00044 	movi	r3,1
    1a6c:	2900092e 	bgeu	r5,r4,1a94 <__divsi3+0x44>
    1a70:	00800804 	movi	r2,32
    1a74:	00c00044 	movi	r3,1
    1a78:	00000106 	br	1a80 <__divsi3+0x30>
    1a7c:	10001226 	beq	r2,zero,1ac8 <__divsi3+0x78>
    1a80:	294b883a 	add	r5,r5,r5
    1a84:	10bfffc4 	addi	r2,r2,-1
    1a88:	18c7883a 	add	r3,r3,r3
    1a8c:	293ffb36 	bltu	r5,r4,1a7c <__divsi3+0x2c>
    1a90:	18000d26 	beq	r3,zero,1ac8 <__divsi3+0x78>
    1a94:	0005883a 	mov	r2,zero
    1a98:	31400236 	bltu	r6,r5,1aa4 <__divsi3+0x54>
    1a9c:	314dc83a 	sub	r6,r6,r5
    1aa0:	10c4b03a 	or	r2,r2,r3
    1aa4:	1806d07a 	srli	r3,r3,1
    1aa8:	280ad07a 	srli	r5,r5,1
    1aac:	183ffa1e 	bne	r3,zero,1a98 <__divsi3+0x48>
    1ab0:	38000126 	beq	r7,zero,1ab8 <__divsi3+0x68>
    1ab4:	0085c83a 	sub	r2,zero,r2
    1ab8:	f800283a 	ret
    1abc:	0109c83a 	sub	r4,zero,r4
    1ac0:	01c00044 	movi	r7,1
    1ac4:	003fe406 	br	1a58 <__divsi3+0x8>
    1ac8:	0005883a 	mov	r2,zero
    1acc:	003ff806 	br	1ab0 <__divsi3+0x60>

00001ad0 <__modsi3>:
    1ad0:	20001916 	blt	r4,zero,1b38 <__modsi3+0x68>
    1ad4:	000f883a 	mov	r7,zero
    1ad8:	2005883a 	mov	r2,r4
    1adc:	2800010e 	bge	r5,zero,1ae4 <__modsi3+0x14>
    1ae0:	014bc83a 	sub	r5,zero,r5
    1ae4:	00c00044 	movi	r3,1
    1ae8:	2900092e 	bgeu	r5,r4,1b10 <__modsi3+0x40>
    1aec:	01800804 	movi	r6,32
    1af0:	00c00044 	movi	r3,1
    1af4:	00000106 	br	1afc <__modsi3+0x2c>
    1af8:	30000d26 	beq	r6,zero,1b30 <__modsi3+0x60>
    1afc:	294b883a 	add	r5,r5,r5
    1b00:	31bfffc4 	addi	r6,r6,-1
    1b04:	18c7883a 	add	r3,r3,r3
    1b08:	293ffb36 	bltu	r5,r4,1af8 <__modsi3+0x28>
    1b0c:	18000826 	beq	r3,zero,1b30 <__modsi3+0x60>
    1b10:	1806d07a 	srli	r3,r3,1
    1b14:	11400136 	bltu	r2,r5,1b1c <__modsi3+0x4c>
    1b18:	1145c83a 	sub	r2,r2,r5
    1b1c:	280ad07a 	srli	r5,r5,1
    1b20:	183ffb1e 	bne	r3,zero,1b10 <__modsi3+0x40>
    1b24:	38000126 	beq	r7,zero,1b2c <__modsi3+0x5c>
    1b28:	0085c83a 	sub	r2,zero,r2
    1b2c:	f800283a 	ret
    1b30:	2005883a 	mov	r2,r4
    1b34:	003ffb06 	br	1b24 <__modsi3+0x54>
    1b38:	0109c83a 	sub	r4,zero,r4
    1b3c:	01c00044 	movi	r7,1
    1b40:	003fe506 	br	1ad8 <__modsi3+0x8>

00001b44 <__udivsi3>:
    1b44:	200d883a 	mov	r6,r4
    1b48:	2900152e 	bgeu	r5,r4,1ba0 <__udivsi3+0x5c>
    1b4c:	28001416 	blt	r5,zero,1ba0 <__udivsi3+0x5c>
    1b50:	00800804 	movi	r2,32
    1b54:	00c00044 	movi	r3,1
    1b58:	00000206 	br	1b64 <__udivsi3+0x20>
    1b5c:	10000e26 	beq	r2,zero,1b98 <__udivsi3+0x54>
    1b60:	28000516 	blt	r5,zero,1b78 <__udivsi3+0x34>
    1b64:	294b883a 	add	r5,r5,r5
    1b68:	10bfffc4 	addi	r2,r2,-1
    1b6c:	18c7883a 	add	r3,r3,r3
    1b70:	293ffa36 	bltu	r5,r4,1b5c <__udivsi3+0x18>
    1b74:	18000826 	beq	r3,zero,1b98 <__udivsi3+0x54>
    1b78:	0005883a 	mov	r2,zero
    1b7c:	31400236 	bltu	r6,r5,1b88 <__udivsi3+0x44>
    1b80:	314dc83a 	sub	r6,r6,r5
    1b84:	10c4b03a 	or	r2,r2,r3
    1b88:	1806d07a 	srli	r3,r3,1
    1b8c:	280ad07a 	srli	r5,r5,1
    1b90:	183ffa1e 	bne	r3,zero,1b7c <__udivsi3+0x38>
    1b94:	f800283a 	ret
    1b98:	0005883a 	mov	r2,zero
    1b9c:	f800283a 	ret
    1ba0:	00c00044 	movi	r3,1
    1ba4:	003ff406 	br	1b78 <__udivsi3+0x34>

00001ba8 <__umodsi3>:
    1ba8:	2005883a 	mov	r2,r4
    1bac:	2900132e 	bgeu	r5,r4,1bfc <__umodsi3+0x54>
    1bb0:	28001216 	blt	r5,zero,1bfc <__umodsi3+0x54>
    1bb4:	01800804 	movi	r6,32
    1bb8:	00c00044 	movi	r3,1
    1bbc:	00000206 	br	1bc8 <__umodsi3+0x20>
    1bc0:	30000c26 	beq	r6,zero,1bf4 <__umodsi3+0x4c>
    1bc4:	28000516 	blt	r5,zero,1bdc <__umodsi3+0x34>
    1bc8:	294b883a 	add	r5,r5,r5
    1bcc:	31bfffc4 	addi	r6,r6,-1
    1bd0:	18c7883a 	add	r3,r3,r3
    1bd4:	293ffa36 	bltu	r5,r4,1bc0 <__umodsi3+0x18>
    1bd8:	18000626 	beq	r3,zero,1bf4 <__umodsi3+0x4c>
    1bdc:	1806d07a 	srli	r3,r3,1
    1be0:	11400136 	bltu	r2,r5,1be8 <__umodsi3+0x40>
    1be4:	1145c83a 	sub	r2,r2,r5
    1be8:	280ad07a 	srli	r5,r5,1
    1bec:	183ffb1e 	bne	r3,zero,1bdc <__umodsi3+0x34>
    1bf0:	f800283a 	ret
    1bf4:	2005883a 	mov	r2,r4
    1bf8:	f800283a 	ret
    1bfc:	00c00044 	movi	r3,1
    1c00:	003ff606 	br	1bdc <__umodsi3+0x34>

00001c04 <__mulsi3>:
    1c04:	0005883a 	mov	r2,zero
    1c08:	20000726 	beq	r4,zero,1c28 <__mulsi3+0x24>
    1c0c:	20c0004c 	andi	r3,r4,1
    1c10:	2008d07a 	srli	r4,r4,1
    1c14:	18000126 	beq	r3,zero,1c1c <__mulsi3+0x18>
    1c18:	1145883a 	add	r2,r2,r5
    1c1c:	294b883a 	add	r5,r5,r5
    1c20:	203ffa1e 	bne	r4,zero,1c0c <__mulsi3+0x8>
    1c24:	f800283a 	ret
    1c28:	f800283a 	ret

00001c2c <memset>:
    1c2c:	2005883a 	mov	r2,r4
    1c30:	218d883a 	add	r6,r4,r6
    1c34:	2007883a 	mov	r3,r4
    1c38:	1980011e 	bne	r3,r6,1c40 <memset+0x14>
    1c3c:	f800283a 	ret
    1c40:	18c00044 	addi	r3,r3,1
    1c44:	197fffc5 	stb	r5,-1(r3)
    1c48:	003ffb06 	br	1c38 <memset+0xc>

00001c4c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1c4c:	20800828 	cmpgeui	r2,r4,32
    1c50:	1000201e 	bne	r2,zero,1cd4 <alt_irq_register+0x88>
  NIOS2_READ_STATUS (context);
    1c54:	000f303a 	rdctl	r7,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c58:	00ffff84 	movi	r3,-2
    1c5c:	38c4703a 	and	r2,r7,r3
    1c60:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    1c64:	201090fa 	slli	r8,r4,3
    1c68:	00800034 	movhi	r2,0
    1c6c:	1088e504 	addi	r2,r2,9108
    1c70:	1205883a 	add	r2,r2,r8
    1c74:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    1c78:	11400115 	stw	r5,4(r2)
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1c7c:	00800044 	movi	r2,1
    1c80:	1108983a 	sll	r4,r2,r4

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1c84:	30000c26 	beq	r6,zero,1cb8 <alt_irq_register+0x6c>
  NIOS2_READ_STATUS (context);
    1c88:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c8c:	10c6703a 	and	r3,r2,r3
    1c90:	1801703a 	wrctl	status,r3
    1c94:	d0e03517 	ldw	r3,-32556(gp)
    1c98:	20c8b03a 	or	r4,r4,r3
  alt_irq_active &= ~(1 << id);
    1c9c:	d1203515 	stw	r4,-32556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1ca0:	d0e03517 	ldw	r3,-32556(gp)
    1ca4:	180170fa 	wrctl	ienable,r3
  NIOS2_WRITE_STATUS (context);
    1ca8:	1001703a 	wrctl	status,r2
    1cac:	3801703a 	wrctl	status,r7
    1cb0:	0005883a 	mov	r2,zero
}
    1cb4:	f800283a 	ret
  NIOS2_READ_STATUS (context);
    1cb8:	0005303a 	rdctl	r2,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1cbc:	10c6703a 	and	r3,r2,r3
    1cc0:	1801703a 	wrctl	status,r3
  alt_irq_active &= ~(1 << id);
    1cc4:	d0e03517 	ldw	r3,-32556(gp)
    1cc8:	0108303a 	nor	r4,zero,r4
    1ccc:	20c8703a 	and	r4,r4,r3
    1cd0:	003ff206 	br	1c9c <alt_irq_register+0x50>
  int rc = -EINVAL;  
    1cd4:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
    1cd8:	f800283a 	ret

00001cdc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1cdc:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1ce0:	01000034 	movhi	r4,0
    1ce4:	01400034 	movhi	r5,0
    1ce8:	dfc00015 	stw	ra,0(sp)
    1cec:	21088904 	addi	r4,r4,8740
    1cf0:	2948b304 	addi	r5,r5,8908
    1cf4:	21400426 	beq	r4,r5,1d08 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    1cf8:	01800034 	movhi	r6,0
    1cfc:	3188b304 	addi	r6,r6,8908
    1d00:	310dc83a 	sub	r6,r6,r4
    1d04:	00020bc0 	call	20bc <memcpy>
  if (to != from)
    1d08:	01000034 	movhi	r4,0
    1d0c:	01400034 	movhi	r5,0
    1d10:	21000804 	addi	r4,r4,32
    1d14:	29400804 	addi	r5,r5,32
    1d18:	21400426 	beq	r4,r5,1d2c <alt_load+0x50>
      *to++ = *from++;
    1d1c:	01800034 	movhi	r6,0
    1d20:	31806004 	addi	r6,r6,384
    1d24:	310dc83a 	sub	r6,r6,r4
    1d28:	00020bc0 	call	20bc <memcpy>
  if (to != from)
    1d2c:	01000034 	movhi	r4,0
    1d30:	01400034 	movhi	r5,0
    1d34:	21084004 	addi	r4,r4,8448
    1d38:	29484004 	addi	r5,r5,8448
    1d3c:	21400426 	beq	r4,r5,1d50 <alt_load+0x74>
      *to++ = *from++;
    1d40:	01800034 	movhi	r6,0
    1d44:	31888904 	addi	r6,r6,8740
    1d48:	310dc83a 	sub	r6,r6,r4
    1d4c:	00020bc0 	call	20bc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1d50:	0001f280 	call	1f28 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1d54:	dfc00017 	ldw	ra,0(sp)
    1d58:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    1d5c:	00020101 	jmpi	2010 <alt_icache_flush_all>

00001d60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1d60:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1d64:	0009883a 	mov	r4,zero
{
    1d68:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    1d6c:	0001d8c0 	call	1d8c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1d70:	0001dac0 	call	1dac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1d74:	d1a03617 	ldw	r6,-32552(gp)
    1d78:	d1603717 	ldw	r5,-32548(gp)
    1d7c:	d1203817 	ldw	r4,-32544(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1d80:	dfc00017 	ldw	ra,0(sp)
    1d84:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    1d88:	00003641 	jmpi	364 <main>

00001d8c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1d8c:	deffff04 	addi	sp,sp,-4
    1d90:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    1d94:	00020140 	call	2014 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1d98:	00800044 	movi	r2,1
    1d9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1da0:	dfc00017 	ldw	ra,0(sp)
    1da4:	dec00104 	addi	sp,sp,4
    1da8:	f800283a 	ret

00001dac <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    1dac:	01000034 	movhi	r4,0
    1db0:	d1600404 	addi	r5,gp,-32752
    1db4:	21088904 	addi	r4,r4,8740
    1db8:	0001f341 	jmpi	1f34 <alt_dev_llist_insert>

00001dbc <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
    1dbc:	d1600404 	addi	r5,gp,-32752
    1dc0:	0001fa01 	jmpi	1fa0 <alt_find_dev>

00001dc4 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
    1dc4:	20800a17 	ldw	r2,40(r4)
    1dc8:	10800023 	ldbuio	r2,0(r2)
    1dcc:	28800005 	stb	r2,0(r5)

	return 0;
}
    1dd0:	0005883a 	mov	r2,zero
    1dd4:	f800283a 	ret

00001dd8 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1dd8:	20800a17 	ldw	r2,40(r4)
    1ddc:	29400fcc 	andi	r5,r5,63
    1de0:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1de4:	20800a17 	ldw	r2,40(r4)
    1de8:	10800063 	ldbuio	r2,1(r2)
    1dec:	30800005 	stb	r2,0(r6)

	return 0;
}
    1df0:	0005883a 	mov	r2,zero
    1df4:	f800283a 	ret

00001df8 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1df8:	20800a17 	ldw	r2,40(r4)
    1dfc:	29400fcc 	andi	r5,r5,63
    1e00:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
    1e04:	20800a17 	ldw	r2,40(r4)
    1e08:	11800065 	stbio	r6,1(r2)

	return 0;
}
    1e0c:	0005883a 	mov	r2,zero
    1e10:	f800283a 	ret

00001e14 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1e14:	20800a17 	ldw	r2,40(r4)
    1e18:	00c00c84 	movi	r3,50
    1e1c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1e20:	20800a17 	ldw	r2,40(r4)
    1e24:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1e28:	00c00cc4 	movi	r3,51
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1e2c:	10803fcc 	andi	r2,r2,255
    1e30:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1e34:	20800a17 	ldw	r2,40(r4)
    1e38:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
    1e3c:	20800a17 	ldw	r2,40(r4)
    1e40:	10800063 	ldbuio	r2,1(r2)
    1e44:	10803fcc 	andi	r2,r2,255
    1e48:	28c00017 	ldw	r3,0(r5)
    1e4c:	1004923a 	slli	r2,r2,8
    1e50:	10c5883a 	add	r2,r2,r3

	if (*(x_axis) & 0x00008000)
    1e54:	10e0000c 	andi	r3,r2,32768
    1e58:	1800031e 	bne	r3,zero,1e68 <alt_up_accelerometer_spi_read_x_axis+0x54>
	{
		*(x_axis) |= 0xFFFF0000;
    1e5c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
    1e60:	0005883a 	mov	r2,zero
    1e64:	f800283a 	ret
		*(x_axis) |= 0xFFFF0000;
    1e68:	10bffff4 	orhi	r2,r2,65535
    1e6c:	003ffb06 	br	1e5c <alt_up_accelerometer_spi_read_x_axis+0x48>

00001e70 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1e70:	20800a17 	ldw	r2,40(r4)
    1e74:	00c00d04 	movi	r3,52
    1e78:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1e7c:	20800a17 	ldw	r2,40(r4)
    1e80:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1e84:	00c00d44 	movi	r3,53
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1e88:	10803fcc 	andi	r2,r2,255
    1e8c:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1e90:	20800a17 	ldw	r2,40(r4)
    1e94:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
    1e98:	20800a17 	ldw	r2,40(r4)
    1e9c:	10800063 	ldbuio	r2,1(r2)
    1ea0:	10803fcc 	andi	r2,r2,255
    1ea4:	28c00017 	ldw	r3,0(r5)
    1ea8:	1004923a 	slli	r2,r2,8
    1eac:	10c5883a 	add	r2,r2,r3

	if (*(y_axis) & 0x00008000)
    1eb0:	10e0000c 	andi	r3,r2,32768
    1eb4:	1800031e 	bne	r3,zero,1ec4 <alt_up_accelerometer_spi_read_y_axis+0x54>
	{
		*(y_axis) |= 0xFFFF0000;
    1eb8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
    1ebc:	0005883a 	mov	r2,zero
    1ec0:	f800283a 	ret
		*(y_axis) |= 0xFFFF0000;
    1ec4:	10bffff4 	orhi	r2,r2,65535
    1ec8:	003ffb06 	br	1eb8 <alt_up_accelerometer_spi_read_y_axis+0x48>

00001ecc <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1ecc:	20800a17 	ldw	r2,40(r4)
    1ed0:	00c00d84 	movi	r3,54
    1ed4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1ed8:	20800a17 	ldw	r2,40(r4)
    1edc:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1ee0:	00c00dc4 	movi	r3,55
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
    1ee4:	10803fcc 	andi	r2,r2,255
    1ee8:	28800015 	stw	r2,0(r5)
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
    1eec:	20800a17 	ldw	r2,40(r4)
    1ef0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
    1ef4:	20800a17 	ldw	r2,40(r4)
    1ef8:	10800063 	ldbuio	r2,1(r2)
    1efc:	10803fcc 	andi	r2,r2,255
    1f00:	28c00017 	ldw	r3,0(r5)
    1f04:	1004923a 	slli	r2,r2,8
    1f08:	10c5883a 	add	r2,r2,r3

	if (*(z_axis) & 0x00008000)
    1f0c:	10e0000c 	andi	r3,r2,32768
    1f10:	1800031e 	bne	r3,zero,1f20 <alt_up_accelerometer_spi_read_z_axis+0x54>
	{
		*(z_axis) |= 0xFFFF0000;
    1f14:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
    1f18:	0005883a 	mov	r2,zero
    1f1c:	f800283a 	ret
		*(z_axis) |= 0xFFFF0000;
    1f20:	10bffff4 	orhi	r2,r2,65535
    1f24:	003ffb06 	br	1f14 <alt_up_accelerometer_spi_read_z_axis+0x48>

00001f28 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1f28:	f800283a 	ret

00001f2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1f2c:	3005883a 	mov	r2,r6
  return len;
}
    1f30:	f800283a 	ret

00001f34 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1f34:	20000226 	beq	r4,zero,1f40 <alt_dev_llist_insert+0xc>
    1f38:	20800217 	ldw	r2,8(r4)
    1f3c:	10000b1e 	bne	r2,zero,1f6c <alt_dev_llist_insert+0x38>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1f40:	d0a00817 	ldw	r2,-32736(gp)
    1f44:	10001126 	beq	r2,zero,1f8c <alt_dev_llist_insert+0x58>
{
    1f48:	deffff04 	addi	sp,sp,-4
    1f4c:	dfc00015 	stw	ra,0(sp)
    1f50:	103ee83a 	callr	r2
  {
    ALT_ERRNO = EINVAL;
    1f54:	00c00584 	movi	r3,22
    1f58:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1f5c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    1f60:	dfc00017 	ldw	ra,0(sp)
    1f64:	dec00104 	addi	sp,sp,4
    1f68:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    1f6c:	28800017 	ldw	r2,0(r5)
  entry->previous = list;
    1f70:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    1f74:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    1f78:	28800017 	ldw	r2,0(r5)
    1f7c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    1f80:	29000015 	stw	r4,0(r5)
  return 0;  
    1f84:	0005883a 	mov	r2,zero
    1f88:	f800283a 	ret
    1f8c:	d0a03a04 	addi	r2,gp,-32536
    ALT_ERRNO = EINVAL;
    1f90:	00c00584 	movi	r3,22
    1f94:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    1f98:	00bffa84 	movi	r2,-22
}
    1f9c:	f800283a 	ret

00001fa0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1fa0:	defffb04 	addi	sp,sp,-20
    1fa4:	dcc00315 	stw	r19,12(sp)
    1fa8:	dc800215 	stw	r18,8(sp)
    1fac:	dc400115 	stw	r17,4(sp)
    1fb0:	dc000015 	stw	r16,0(sp)
    1fb4:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    1fb8:	2c000017 	ldw	r16,0(r5)
{
    1fbc:	2027883a 	mov	r19,r4
    1fc0:	2823883a 	mov	r17,r5
  alt_32 len;

  len  = strlen(name) + 1;
    1fc4:	00020e40 	call	20e4 <strlen>
    1fc8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1fcc:	8440091e 	bne	r16,r17,1ff4 <alt_find_dev+0x54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1fd0:	0021883a 	mov	r16,zero
}
    1fd4:	8005883a 	mov	r2,r16
    1fd8:	dfc00417 	ldw	ra,16(sp)
    1fdc:	dcc00317 	ldw	r19,12(sp)
    1fe0:	dc800217 	ldw	r18,8(sp)
    1fe4:	dc400117 	ldw	r17,4(sp)
    1fe8:	dc000017 	ldw	r16,0(sp)
    1fec:	dec00504 	addi	sp,sp,20
    1ff0:	f800283a 	ret
    if (!memcmp (next->name, name, len))
    1ff4:	81000217 	ldw	r4,8(r16)
    1ff8:	900d883a 	mov	r6,r18
    1ffc:	980b883a 	mov	r5,r19
    2000:	000208c0 	call	208c <memcmp>
    2004:	103ff326 	beq	r2,zero,1fd4 <alt_find_dev+0x34>
    next = (alt_dev*) next->llist.next;
    2008:	84000017 	ldw	r16,0(r16)
    200c:	003fef06 	br	1fcc <alt_find_dev+0x2c>

00002010 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    2010:	f800283a 	ret

00002014 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2014:	000170fa 	wrctl	ienable,zero
}
    2018:	f800283a 	ret

0000201c <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    201c:	213ffe84 	addi	r4,r4,-6
    2020:	20800428 	cmpgeui	r2,r4,16
    2024:	1000151e 	bne	r2,zero,207c <alt_exception_cause_generated_bad_addr+0x60>
    2028:	200890ba 	slli	r4,r4,2
    202c:	00800034 	movhi	r2,0
    2030:	2085883a 	add	r2,r4,r2
    2034:	10880f17 	ldw	r2,8252(r2)
    2038:	1000683a 	jmp	r2
    203c:	00002084 	movi	zero,130
    2040:	00002084 	movi	zero,130
    2044:	0000207c 	xorhi	zero,zero,129
    2048:	0000207c 	xorhi	zero,zero,129
    204c:	0000207c 	xorhi	zero,zero,129
    2050:	00002084 	movi	zero,130
    2054:	0000207c 	xorhi	zero,zero,129
    2058:	0000207c 	xorhi	zero,zero,129
    205c:	00002084 	movi	zero,130
    2060:	00002084 	movi	zero,130
    2064:	0000207c 	xorhi	zero,zero,129
    2068:	00002084 	movi	zero,130
    206c:	0000207c 	xorhi	zero,zero,129
    2070:	0000207c 	xorhi	zero,zero,129
    2074:	0000207c 	xorhi	zero,zero,129
    2078:	00002084 	movi	zero,130
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    207c:	0005883a 	mov	r2,zero
    2080:	f800283a 	ret
    2084:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    2088:	f800283a 	ret

0000208c <memcmp>:
    208c:	0007883a 	mov	r3,zero
    2090:	30c0021e 	bne	r6,r3,209c <memcmp+0x10>
    2094:	0005883a 	mov	r2,zero
    2098:	f800283a 	ret
    209c:	20c5883a 	add	r2,r4,r3
    20a0:	18c00044 	addi	r3,r3,1
    20a4:	28cf883a 	add	r7,r5,r3
    20a8:	10800003 	ldbu	r2,0(r2)
    20ac:	39ffffc3 	ldbu	r7,-1(r7)
    20b0:	11fff726 	beq	r2,r7,2090 <memcmp+0x4>
    20b4:	11c5c83a 	sub	r2,r2,r7
    20b8:	f800283a 	ret

000020bc <memcpy>:
    20bc:	2005883a 	mov	r2,r4
    20c0:	0007883a 	mov	r3,zero
    20c4:	30c0011e 	bne	r6,r3,20cc <memcpy+0x10>
    20c8:	f800283a 	ret
    20cc:	28cf883a 	add	r7,r5,r3
    20d0:	39c00003 	ldbu	r7,0(r7)
    20d4:	10c9883a 	add	r4,r2,r3
    20d8:	18c00044 	addi	r3,r3,1
    20dc:	21c00005 	stb	r7,0(r4)
    20e0:	003ff806 	br	20c4 <memcpy+0x8>

000020e4 <strlen>:
    20e4:	2005883a 	mov	r2,r4
    20e8:	10c00007 	ldb	r3,0(r2)
    20ec:	1800021e 	bne	r3,zero,20f8 <strlen+0x14>
    20f0:	1105c83a 	sub	r2,r2,r4
    20f4:	f800283a 	ret
    20f8:	10800044 	addi	r2,r2,1
    20fc:	003ffa06 	br	20e8 <strlen+0x4>
