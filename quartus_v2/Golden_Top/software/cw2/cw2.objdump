
cw2.elf:     file format elf32-littlenios2
cw2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010228

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005758 memsz 0x00005758 flags r-x
    LOAD off    0x00006778 vaddr 0x00015778 paddr 0x00017210 align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00008ca8 vaddr 0x00018ca8 paddr 0x00018ca8 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000208  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000054f4  00010228  00010228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  0001571c  0001571c  0000671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  00015778  00017210  00006778  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00018ca8  00018ca8  00008ca8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00018dfc  00018dfc  00008210  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a40  00000000  00000000  00008240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00018695  00000000  00000000  00008c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006b39  00000000  00000000  00021315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00009b40  00000000  00000000  00027e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001530  00000000  00000000  00031990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000028d9  00000000  00000000  00032ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005fcb  00000000  00000000  00035799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a8  00000000  00000000  0003b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003e4bb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0003e4be  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003e4c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003e4c2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003e4c3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003e4cc  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003e4d5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0003e4de  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000032  00000000  00000000  0003e4f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010228 l    d  .text	00000000 .text
0001571c l    d  .rodata	00000000 .rodata
00015778 l    d  .rwdata	00000000 .rwdata
00018ca8 l    d  .bss	00000000 .bss
00018dfc l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/intelFPGA_lite/ip_labs/cw/quartus_v2/Golden_Top/software/cw2_bsp//obj/HAL/src/crt0.o
00010260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000102e8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001048c l     F .text	00000034 alt_dev_reg
00015778 l     O .rwdata	00001060 jtag_uart
000167d8 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010780 l     F .text	00000210 altera_avalon_jtag_uart_irq
00010990 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010fd4 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00011204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001133c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011368 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011534 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011804 l     F .text	0000003c alt_get_errno
00011840 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000169ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00013d2c l     F .text	00000008 __fp_lock
00013d40 l     F .text	00000008 __fp_unlock
00013d48 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00014b64 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00015098 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00015190 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0001527c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000153e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001720c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000155dc l     F .text	0000003c alt_get_errno
00018cc0 g     O .bss	00000004 alt_instruction_exception_handler
00014d64 g     F .text	00000058 _isatty_r
000103d4 g     F .text	0000007c alt_main
00018cd4 g     O .bss	00000100 alt_irq
00014dbc g     F .text	00000064 _lseek_r
00017210 g       *ABS*	00000000 __flash_rwdata_start
00018dfc g       *ABS*	00000000 __alt_heap_start
00014a44 g     F .text	0000005c __sseek
00014090 g     F .text	00000010 __sinit
00013eb0 g     F .text	00000078 __sfmoreglue
000153bc g     F .text	00000024 __malloc_unlock
00012f8c g     F .text	0000012c memmove
0001407c g     F .text	00000014 _cleanup
00010450 g     F .text	0000003c alt_putstr
00011c98 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014d04 g     F .text	00000060 _fstat_r
00018cc4 g     O .bss	00000004 errno
000149bc g     F .text	00000008 __seofread
00018cac g     O .bss	00000004 alt_argv
0001f1d8 g       *ABS*	00000000 _gp
0001682c g     O .rwdata	00000180 alt_fd_list
00011cbc g     F .text	00000090 alt_find_dev
00012e8c g     F .text	00000100 memcpy
00013d34 g     F .text	0000000c _cleanup_r
00011608 g     F .text	0000007c alt_io_redirect
0001571c g       *ABS*	00000000 __DTOR_END__
00011f0c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00010b8c g     F .text	00000220 altera_avalon_jtag_uart_read
00014f78 g     F .text	00000064 .hidden __udivsi3
000151cc g     F .text	000000b0 isatty
00018cd0 g     O .bss	00000004 __malloc_top_pad
0001209c g     F .text	000004c8 __sfvwrite_r
0001361c g     F .text	00000058 _sbrk_r
00014e20 g     F .text	00000064 _read_r
000171e8 g     O .rwdata	00000004 alt_max_fd
00014c24 g     F .text	00000070 _fclose_r
00013ca8 g     F .text	00000084 fflush
00018ccc g     O .bss	00000004 __malloc_max_sbrked_mem
00011684 g     F .text	00000180 alt_irq_register
000152b8 g     F .text	000000e0 lseek
000171fc g     O .rwdata	00000004 _global_impure_ptr
000130b8 g     F .text	00000564 _realloc_r
00018dfc g       *ABS*	00000000 __bss_end
00011b90 g     F .text	00000108 alt_tick
000140b0 g     F .text	00000014 __fp_lock_all
00011aec g     F .text	000000a4 alt_alarm_stop
00018cb4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000cc alt_irq_handler
00016804 g     O .rwdata	00000028 alt_dev_null
0001131c g     F .text	00000020 alt_dcache_flush_all
00017210 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000171e0 g     O .rwdata	00000008 alt_dev_list
00015618 g     F .text	00000104 write
00015778 g       *ABS*	00000000 __ram_rodata_end
000150d4 g     F .text	000000bc fstat
00014fdc g     F .text	0000005c .hidden __umodsi3
00018dfc g       *ABS*	00000000 end
000106cc g     F .text	000000b4 altera_avalon_jtag_uart_init
000101c8 g     F .exceptions	00000060 alt_instruction_exception_entry
0001571c g       *ABS*	00000000 __CTOR_LIST__
00020000 g       *ABS*	00000000 __alt_stack_pointer
00011054 g     F .text	0000007c alt_avalon_timer_sc_init
00010dac g     F .text	00000228 altera_avalon_jtag_uart_write
000140a0 g     F .text	00000004 __sfp_lock_acquire
00012d44 g     F .text	000000d0 memchr
000141f4 g     F .text	000002fc _free_r
00013900 g     F .text	00000120 __call_exitprocs
00017204 g     O .rwdata	00000004 __malloc_sbrk_base
00010228 g     F .text	0000003c _start
00018cb8 g     O .bss	00000004 _alt_tick_rate
00018cbc g     O .bss	00000004 _alt_nticks
0001541c g     F .text	00000108 read
000104fc g     F .text	0000006c alt_sys_init
00013870 g     F .text	00000090 __register_exitproc
00010a30 g     F .text	00000068 altera_avalon_jtag_uart_close
00015038 g     F .text	00000028 .hidden __mulsi3
00015778 g       *ABS*	00000000 __ram_rwdata_start
0001571c g       *ABS*	00000000 __ram_rodata_start
00018dd4 g     O .bss	00000028 __malloc_current_mallinfo
00010568 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011e54 g     F .text	000000b8 alt_get_fd
00014b0c g     F .text	00000058 _close_r
00012e14 g     F .text	00000078 memcmp
00010628 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018dfc g       *ABS*	00000000 __alt_stack_base
00010678 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001370c g     F .text	00000164 __swsetup_r
00013f28 g     F .text	00000154 __sfp
00016dd0 g     O .rwdata	00000408 __malloc_av_
000140ac g     F .text	00000004 __sinit_lock_release
00014968 g     F .text	00000054 __sread
00011d4c g     F .text	00000108 alt_find_file
000113a4 g     F .text	000000a8 alt_dev_llist_insert
00015398 g     F .text	00000024 __malloc_lock
00015524 g     F .text	000000b8 sbrk
00013c48 g     F .text	00000060 _fflush_r
00018ca8 g       *ABS*	00000000 __bss_start
00014878 g     F .text	000000f0 memset
00010264 g     F .text	00000084 main
00018cb0 g     O .bss	00000004 alt_envp
00018cc8 g     O .bss	00000004 __malloc_max_total_mem
000105c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00014aa0 g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
00014c94 g     F .text	00000070 fclose
00012564 g     F .text	000007e0 _malloc_r
000171ec g     O .rwdata	00000004 alt_errno
000144f0 g     F .text	00000098 _fwalk
00014e84 g     F .text	00000080 .hidden __divsi3
000140d8 g     F .text	0000011c _malloc_trim_r
0001571c g       *ABS*	00000000 __CTOR_END__
0001571c g       *ABS*	00000000 __flash_rodata_start
0001571c g       *ABS*	00000000 __DTOR_LIST__
000104c0 g     F .text	0000003c alt_irq_init
00011a7c g     F .text	00000070 alt_release_fd
00011fa4 g     F .text	00000014 atexit
00014aa8 g     F .text	00000064 _write_r
00017200 g     O .rwdata	00000004 _impure_ptr
00018ca8 g     O .bss	00000004 alt_argc
00013a20 g     F .text	00000228 __sflush_r
000114b0 g     F .text	00000064 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000140c4 g     F .text	00000014 __fp_unlock_all
000171d8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000147e0 g     F .text	00000098 __swhatbuf_r
00017210 g       *ABS*	00000000 _edata
00018dfc g       *ABS*	00000000 _end
00010228 g       *ABS*	00000000 __ram_exceptions_end
00010a98 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00011fec g     F .text	00000098 _fputs_r
000149c4 g     F .text	00000080 __swrite
00017208 g     O .rwdata	00000004 __malloc_trim_threshold
00011fb8 g     F .text	00000034 exit
00014588 g     F .text	000000a8 _fwalk_reent
00014f04 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000140a4 g     F .text	00000004 __sfp_lock_release
00015060 g     F .text	00000038 _exit
000110d0 g     F .text	00000134 alt_alarm_start
00014630 g     F .text	000001b0 __smakebuf_r
00013674 g     F .text	00000098 strlen
0001191c g     F .text	00000160 open
00011514 g     F .text	00000020 alt_icache_flush_all
00012084 g     F .text	00000018 fputs
000171f0 g     O .rwdata	00000004 alt_priority_mask
000171f4 g     O .rwdata	00000008 alt_alarm_list
0001144c g     F .text	00000064 _do_ctors
00011240 g     F .text	000000dc close
00010350 g     F .text	00000084 alt_load
000140a8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408a14 	ori	at,at,552
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c80 	call	101c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001226 	beq	r2,zero,10184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10e33517 	ldw	r3,-29484(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10a33617 	ldw	r2,-29480(r2)
   10164:	e17ffd17 	ldw	r5,-12(fp)
   10168:	1009883a 	mov	r4,r2
   1016c:	183ee83a 	callr	r3
#endif
        break;
   10170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10174:	0005313a 	rdctl	r2,ipending
   10178:	e0bffb15 	stw	r2,-20(fp)
  return active;
   1017c:	e0bffb17 	ldw	r2,-20(fp)
   10180:	00000706 	br	101a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
   10184:	e0bffe17 	ldw	r2,-8(fp)
   10188:	1085883a 	add	r2,r2,r2
   1018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   10190:	e0bffd17 	ldw	r2,-12(fp)
   10194:	10800044 	addi	r2,r2,1
   10198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   1019c:	003fe306 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   101a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a4:	e0bfff17 	ldw	r2,-4(fp)
   101a8:	103fdd1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101ac:	0001883a 	nop
}
   101b0:	0001883a 	nop
   101b4:	e037883a 	mov	sp,fp
   101b8:	dfc00117 	ldw	ra,4(sp)
   101bc:	df000017 	ldw	fp,0(sp)
   101c0:	dec00204 	addi	sp,sp,8
   101c4:	f800283a 	ret

000101c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c8:	defffb04 	addi	sp,sp,-20
   101cc:	dfc00415 	stw	ra,16(sp)
   101d0:	df000315 	stw	fp,12(sp)
   101d4:	df000304 	addi	fp,sp,12
   101d8:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101dc:	00bfffc4 	movi	r2,-1
   101e0:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e4:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e8:	d0a6ba17 	ldw	r2,-25880(gp)
   101ec:	10000726 	beq	r2,zero,1020c <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f0:	d0a6ba17 	ldw	r2,-25880(gp)
   101f4:	e0ffff17 	ldw	r3,-4(fp)
   101f8:	e1bffe17 	ldw	r6,-8(fp)
   101fc:	e17ffd17 	ldw	r5,-12(fp)
   10200:	1809883a 	mov	r4,r3
   10204:	103ee83a 	callr	r2
   10208:	00000206 	br	10214 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   1020c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10210:	0005883a 	mov	r2,zero
}
   10214:	e037883a 	mov	sp,fp
   10218:	dfc00117 	ldw	ra,4(sp)
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00204 	addi	sp,sp,8
   10224:	f800283a 	ret

Disassembly of section .text:

00010228 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10228:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   1022c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10230:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10234:	d6bc7614 	ori	gp,gp,61912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10238:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   1023c:	10a32a14 	ori	r2,r2,36008

    movhi r3, %hi(__bss_end)
   10240:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10244:	18e37f14 	ori	r3,r3,36348

    beq r2, r3, 1f
   10248:	10c00326 	beq	r2,r3,10258 <_start+0x30>

0:
    stw zero, (r2)
   1024c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10250:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10254:	10fffd36 	bltu	r2,r3,1024c <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10258:	00103500 	call	10350 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   1025c:	00103d40 	call	103d4 <alt_main>

00010260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10260:	003fff06 	br	10260 <alt_after_alt_main>

00010264 <main>:
#include "system.h"
#include <unistd.h>
#include <stdlib.h>

int main()
{
   10264:	defffc04 	addi	sp,sp,-16
   10268:	dfc00315 	stw	ra,12(sp)
   1026c:	df000215 	stw	fp,8(sp)
   10270:	df000204 	addi	fp,sp,8

	printf("Hello from Nios II!\n");
*/
	int switch_datain;
	int switch_datain_temp;
	alt_putstr("Hello from Nios II!\n");
   10274:	01000074 	movhi	r4,1
   10278:	2115c704 	addi	r4,r4,22300
   1027c:	00104500 	call	10450 <alt_putstr>

	// Event loop never exits.
	while (1){
	  switch_datain= ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10280:	008000b4 	movhi	r2,2
   10284:	10840837 	ldwio	r2,4128(r2)
   10288:	0084303a 	nor	r2,zero,r2
   1028c:	e0bfff15 	stw	r2,-4(fp)
	  // this temp stores the input button value for the 2nd LED
	  switch_datain_temp = switch_datain;
   10290:	e0bfff17 	ldw	r2,-4(fp)
   10294:	e0bffe15 	stw	r2,-8(fp)
	  // capture HEX1 and set it to LEDR4
	  switch_datain &= (0b0000000010);
   10298:	e0bfff17 	ldw	r2,-4(fp)
   1029c:	1080008c 	andi	r2,r2,2
   102a0:	e0bfff15 	stw	r2,-4(fp)
	  switch_datain <<= 3;
   102a4:	e0bfff17 	ldw	r2,-4(fp)
   102a8:	100490fa 	slli	r2,r2,3
   102ac:	e0bfff15 	stw	r2,-4(fp)

	  // capture HEX0 and set it to LEDR10
	  switch_datain_temp &= (0b0000000001);
   102b0:	e0bffe17 	ldw	r2,-8(fp)
   102b4:	1080004c 	andi	r2,r2,1
   102b8:	e0bffe15 	stw	r2,-8(fp)
	  switch_datain_temp <<= 9;
   102bc:	e0bffe17 	ldw	r2,-8(fp)
   102c0:	1004927a 	slli	r2,r2,9
   102c4:	e0bffe15 	stw	r2,-8(fp)

	  switch_datain |= switch_datain_temp;
   102c8:	e0ffff17 	ldw	r3,-4(fp)
   102cc:	e0bffe17 	ldw	r2,-8(fp)
   102d0:	1884b03a 	or	r2,r3,r2
   102d4:	e0bfff15 	stw	r2,-4(fp)

	  IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   102d8:	e0ffff17 	ldw	r3,-4(fp)
   102dc:	008000b4 	movhi	r2,2
   102e0:	10c42435 	stwio	r3,4240(r2)
	  switch_datain= ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   102e4:	003fe606 	br	10280 <main+0x1c>

000102e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   102e8:	defffc04 	addi	sp,sp,-16
   102ec:	df000315 	stw	fp,12(sp)
   102f0:	df000304 	addi	fp,sp,12
   102f4:	e13fff15 	stw	r4,-4(fp)
   102f8:	e17ffe15 	stw	r5,-8(fp)
   102fc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   10300:	e0fffe17 	ldw	r3,-8(fp)
   10304:	e0bfff17 	ldw	r2,-4(fp)
   10308:	18800c26 	beq	r3,r2,1033c <alt_load_section+0x54>
  {
    while( to != end )
   1030c:	00000806 	br	10330 <alt_load_section+0x48>
    {
      *to++ = *from++;
   10310:	e0ffff17 	ldw	r3,-4(fp)
   10314:	18800104 	addi	r2,r3,4
   10318:	e0bfff15 	stw	r2,-4(fp)
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	11000104 	addi	r4,r2,4
   10324:	e13ffe15 	stw	r4,-8(fp)
   10328:	18c00017 	ldw	r3,0(r3)
   1032c:	10c00015 	stw	r3,0(r2)
    while( to != end )
   10330:	e0fffe17 	ldw	r3,-8(fp)
   10334:	e0bffd17 	ldw	r2,-12(fp)
   10338:	18bff51e 	bne	r3,r2,10310 <alt_load_section+0x28>
    }
  }
}
   1033c:	0001883a 	nop
   10340:	e037883a 	mov	sp,fp
   10344:	df000017 	ldw	fp,0(sp)
   10348:	dec00104 	addi	sp,sp,4
   1034c:	f800283a 	ret

00010350 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10350:	defffe04 	addi	sp,sp,-8
   10354:	dfc00115 	stw	ra,4(sp)
   10358:	df000015 	stw	fp,0(sp)
   1035c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10360:	01800074 	movhi	r6,1
   10364:	319c8404 	addi	r6,r6,29200
   10368:	01400074 	movhi	r5,1
   1036c:	2955de04 	addi	r5,r5,22392
   10370:	01000074 	movhi	r4,1
   10374:	211c8404 	addi	r4,r4,29200
   10378:	00102e80 	call	102e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1037c:	01800074 	movhi	r6,1
   10380:	31808a04 	addi	r6,r6,552
   10384:	01400074 	movhi	r5,1
   10388:	29400804 	addi	r5,r5,32
   1038c:	01000074 	movhi	r4,1
   10390:	21000804 	addi	r4,r4,32
   10394:	00102e80 	call	102e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10398:	01800074 	movhi	r6,1
   1039c:	3195de04 	addi	r6,r6,22392
   103a0:	01400074 	movhi	r5,1
   103a4:	2955c704 	addi	r5,r5,22300
   103a8:	01000074 	movhi	r4,1
   103ac:	2115c704 	addi	r4,r4,22300
   103b0:	00102e80 	call	102e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   103b4:	001131c0 	call	1131c <alt_dcache_flush_all>
  alt_icache_flush_all();
   103b8:	00115140 	call	11514 <alt_icache_flush_all>
}
   103bc:	0001883a 	nop
   103c0:	e037883a 	mov	sp,fp
   103c4:	dfc00117 	ldw	ra,4(sp)
   103c8:	df000017 	ldw	fp,0(sp)
   103cc:	dec00204 	addi	sp,sp,8
   103d0:	f800283a 	ret

000103d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   103d4:	defffd04 	addi	sp,sp,-12
   103d8:	dfc00215 	stw	ra,8(sp)
   103dc:	df000115 	stw	fp,4(sp)
   103e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   103e4:	0009883a 	mov	r4,zero
   103e8:	00104c00 	call	104c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   103ec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   103f0:	00104fc0 	call	104fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   103f4:	01800074 	movhi	r6,1
   103f8:	3195cd04 	addi	r6,r6,22324
   103fc:	01400074 	movhi	r5,1
   10400:	2955cd04 	addi	r5,r5,22324
   10404:	01000074 	movhi	r4,1
   10408:	2115cd04 	addi	r4,r4,22324
   1040c:	00116080 	call	11608 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10410:	001144c0 	call	1144c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10414:	01000074 	movhi	r4,1
   10418:	21052c04 	addi	r4,r4,5296
   1041c:	0011fa40 	call	11fa4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10420:	d0a6b417 	ldw	r2,-25904(gp)
   10424:	d0e6b517 	ldw	r3,-25900(gp)
   10428:	d126b617 	ldw	r4,-25896(gp)
   1042c:	200d883a 	mov	r6,r4
   10430:	180b883a 	mov	r5,r3
   10434:	1009883a 	mov	r4,r2
   10438:	00102640 	call	10264 <main>
   1043c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10440:	01000044 	movi	r4,1
   10444:	00112400 	call	11240 <close>
  exit (result);
   10448:	e13fff17 	ldw	r4,-4(fp)
   1044c:	0011fb80 	call	11fb8 <exit>

00010450 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10450:	defffd04 	addi	sp,sp,-12
   10454:	dfc00215 	stw	ra,8(sp)
   10458:	df000115 	stw	fp,4(sp)
   1045c:	df000104 	addi	fp,sp,4
   10460:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   10464:	d0a00a17 	ldw	r2,-32728(gp)
   10468:	10800217 	ldw	r2,8(r2)
   1046c:	100b883a 	mov	r5,r2
   10470:	e13fff17 	ldw	r4,-4(fp)
   10474:	00120840 	call	12084 <fputs>
#endif
#endif
}
   10478:	e037883a 	mov	sp,fp
   1047c:	dfc00117 	ldw	ra,4(sp)
   10480:	df000017 	ldw	fp,0(sp)
   10484:	dec00204 	addi	sp,sp,8
   10488:	f800283a 	ret

0001048c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1048c:	defffd04 	addi	sp,sp,-12
   10490:	dfc00215 	stw	ra,8(sp)
   10494:	df000115 	stw	fp,4(sp)
   10498:	df000104 	addi	fp,sp,4
   1049c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   104a0:	d1600204 	addi	r5,gp,-32760
   104a4:	e13fff17 	ldw	r4,-4(fp)
   104a8:	00113a40 	call	113a4 <alt_dev_llist_insert>
}
   104ac:	e037883a 	mov	sp,fp
   104b0:	dfc00117 	ldw	ra,4(sp)
   104b4:	df000017 	ldw	fp,0(sp)
   104b8:	dec00204 	addi	sp,sp,8
   104bc:	f800283a 	ret

000104c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   104c0:	defffd04 	addi	sp,sp,-12
   104c4:	dfc00215 	stw	ra,8(sp)
   104c8:	df000115 	stw	fp,4(sp)
   104cc:	df000104 	addi	fp,sp,4
   104d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   104d4:	0011c980 	call	11c98 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   104d8:	00800044 	movi	r2,1
   104dc:	1001703a 	wrctl	status,r2
}
   104e0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   104e4:	0001883a 	nop
   104e8:	e037883a 	mov	sp,fp
   104ec:	dfc00117 	ldw	ra,4(sp)
   104f0:	df000017 	ldw	fp,0(sp)
   104f4:	dec00204 	addi	sp,sp,8
   104f8:	f800283a 	ret

000104fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   104fc:	defffe04 	addi	sp,sp,-8
   10500:	dfc00115 	stw	ra,4(sp)
   10504:	df000015 	stw	fp,0(sp)
   10508:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1050c:	01c0fa04 	movi	r7,1000
   10510:	01800044 	movi	r6,1
   10514:	000b883a 	mov	r5,zero
   10518:	010000b4 	movhi	r4,2
   1051c:	21040004 	addi	r4,r4,4096
   10520:	00110540 	call	11054 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   10524:	000d883a 	mov	r6,zero
   10528:	000b883a 	mov	r5,zero
   1052c:	01000074 	movhi	r4,1
   10530:	2115e804 	addi	r4,r4,22432
   10534:	00106cc0 	call	106cc <altera_avalon_jtag_uart_init>
   10538:	01000074 	movhi	r4,1
   1053c:	2115de04 	addi	r4,r4,22392
   10540:	001048c0 	call	1048c <alt_dev_reg>
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI, accelerometer_spi);
   10544:	01000074 	movhi	r4,1
   10548:	2119f604 	addi	r4,r4,26584
   1054c:	001048c0 	call	1048c <alt_dev_reg>
}
   10550:	0001883a 	nop
   10554:	e037883a 	mov	sp,fp
   10558:	dfc00117 	ldw	ra,4(sp)
   1055c:	df000017 	ldw	fp,0(sp)
   10560:	dec00204 	addi	sp,sp,8
   10564:	f800283a 	ret

00010568 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   10568:	defffa04 	addi	sp,sp,-24
   1056c:	dfc00515 	stw	ra,20(sp)
   10570:	df000415 	stw	fp,16(sp)
   10574:	df000404 	addi	fp,sp,16
   10578:	e13ffe15 	stw	r4,-8(fp)
   1057c:	e17ffd15 	stw	r5,-12(fp)
   10580:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10584:	e0bffe17 	ldw	r2,-8(fp)
   10588:	10800017 	ldw	r2,0(r2)
   1058c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10590:	e0bfff17 	ldw	r2,-4(fp)
   10594:	10c00a04 	addi	r3,r2,40
   10598:	e0bffe17 	ldw	r2,-8(fp)
   1059c:	10800217 	ldw	r2,8(r2)
   105a0:	100f883a 	mov	r7,r2
   105a4:	e1bffc17 	ldw	r6,-16(fp)
   105a8:	e17ffd17 	ldw	r5,-12(fp)
   105ac:	1809883a 	mov	r4,r3
   105b0:	0010b8c0 	call	10b8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   105b4:	e037883a 	mov	sp,fp
   105b8:	dfc00117 	ldw	ra,4(sp)
   105bc:	df000017 	ldw	fp,0(sp)
   105c0:	dec00204 	addi	sp,sp,8
   105c4:	f800283a 	ret

000105c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   105c8:	defffa04 	addi	sp,sp,-24
   105cc:	dfc00515 	stw	ra,20(sp)
   105d0:	df000415 	stw	fp,16(sp)
   105d4:	df000404 	addi	fp,sp,16
   105d8:	e13ffe15 	stw	r4,-8(fp)
   105dc:	e17ffd15 	stw	r5,-12(fp)
   105e0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   105e4:	e0bffe17 	ldw	r2,-8(fp)
   105e8:	10800017 	ldw	r2,0(r2)
   105ec:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   105f0:	e0bfff17 	ldw	r2,-4(fp)
   105f4:	10c00a04 	addi	r3,r2,40
   105f8:	e0bffe17 	ldw	r2,-8(fp)
   105fc:	10800217 	ldw	r2,8(r2)
   10600:	100f883a 	mov	r7,r2
   10604:	e1bffc17 	ldw	r6,-16(fp)
   10608:	e17ffd17 	ldw	r5,-12(fp)
   1060c:	1809883a 	mov	r4,r3
   10610:	0010dac0 	call	10dac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10614:	e037883a 	mov	sp,fp
   10618:	dfc00117 	ldw	ra,4(sp)
   1061c:	df000017 	ldw	fp,0(sp)
   10620:	dec00204 	addi	sp,sp,8
   10624:	f800283a 	ret

00010628 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10628:	defffc04 	addi	sp,sp,-16
   1062c:	dfc00315 	stw	ra,12(sp)
   10630:	df000215 	stw	fp,8(sp)
   10634:	df000204 	addi	fp,sp,8
   10638:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1063c:	e0bffe17 	ldw	r2,-8(fp)
   10640:	10800017 	ldw	r2,0(r2)
   10644:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10648:	e0bfff17 	ldw	r2,-4(fp)
   1064c:	10c00a04 	addi	r3,r2,40
   10650:	e0bffe17 	ldw	r2,-8(fp)
   10654:	10800217 	ldw	r2,8(r2)
   10658:	100b883a 	mov	r5,r2
   1065c:	1809883a 	mov	r4,r3
   10660:	0010a300 	call	10a30 <altera_avalon_jtag_uart_close>
}
   10664:	e037883a 	mov	sp,fp
   10668:	dfc00117 	ldw	ra,4(sp)
   1066c:	df000017 	ldw	fp,0(sp)
   10670:	dec00204 	addi	sp,sp,8
   10674:	f800283a 	ret

00010678 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   10678:	defffa04 	addi	sp,sp,-24
   1067c:	dfc00515 	stw	ra,20(sp)
   10680:	df000415 	stw	fp,16(sp)
   10684:	df000404 	addi	fp,sp,16
   10688:	e13ffe15 	stw	r4,-8(fp)
   1068c:	e17ffd15 	stw	r5,-12(fp)
   10690:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10694:	e0bffe17 	ldw	r2,-8(fp)
   10698:	10800017 	ldw	r2,0(r2)
   1069c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   106a0:	e0bfff17 	ldw	r2,-4(fp)
   106a4:	10800a04 	addi	r2,r2,40
   106a8:	e1bffc17 	ldw	r6,-16(fp)
   106ac:	e17ffd17 	ldw	r5,-12(fp)
   106b0:	1009883a 	mov	r4,r2
   106b4:	0010a980 	call	10a98 <altera_avalon_jtag_uart_ioctl>
}
   106b8:	e037883a 	mov	sp,fp
   106bc:	dfc00117 	ldw	ra,4(sp)
   106c0:	df000017 	ldw	fp,0(sp)
   106c4:	dec00204 	addi	sp,sp,8
   106c8:	f800283a 	ret

000106cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   106cc:	defffb04 	addi	sp,sp,-20
   106d0:	dfc00415 	stw	ra,16(sp)
   106d4:	df000315 	stw	fp,12(sp)
   106d8:	df000304 	addi	fp,sp,12
   106dc:	e13fff15 	stw	r4,-4(fp)
   106e0:	e17ffe15 	stw	r5,-8(fp)
   106e4:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   106e8:	e0bfff17 	ldw	r2,-4(fp)
   106ec:	00c00044 	movi	r3,1
   106f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   106f4:	e0bfff17 	ldw	r2,-4(fp)
   106f8:	10800017 	ldw	r2,0(r2)
   106fc:	10800104 	addi	r2,r2,4
   10700:	1007883a 	mov	r3,r2
   10704:	e0bfff17 	ldw	r2,-4(fp)
   10708:	10800817 	ldw	r2,32(r2)
   1070c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	01800074 	movhi	r6,1
   10718:	3181e004 	addi	r6,r6,1920
   1071c:	e17fff17 	ldw	r5,-4(fp)
   10720:	1009883a 	mov	r4,r2
   10724:	00116840 	call	11684 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10728:	e0bfff17 	ldw	r2,-4(fp)
   1072c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10730:	e0bfff17 	ldw	r2,-4(fp)
   10734:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10738:	d0e6b817 	ldw	r3,-25888(gp)
   1073c:	e1ffff17 	ldw	r7,-4(fp)
   10740:	01800074 	movhi	r6,1
   10744:	31826404 	addi	r6,r6,2448
   10748:	180b883a 	mov	r5,r3
   1074c:	1009883a 	mov	r4,r2
   10750:	00110d00 	call	110d0 <alt_alarm_start>
   10754:	1000040e 	bge	r2,zero,10768 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10758:	e0ffff17 	ldw	r3,-4(fp)
   1075c:	00a00034 	movhi	r2,32768
   10760:	10bfffc4 	addi	r2,r2,-1
   10764:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10768:	0001883a 	nop
   1076c:	e037883a 	mov	sp,fp
   10770:	dfc00117 	ldw	ra,4(sp)
   10774:	df000017 	ldw	fp,0(sp)
   10778:	dec00204 	addi	sp,sp,8
   1077c:	f800283a 	ret

00010780 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10780:	defff704 	addi	sp,sp,-36
   10784:	df000815 	stw	fp,32(sp)
   10788:	df000804 	addi	fp,sp,32
   1078c:	e13ff915 	stw	r4,-28(fp)
   10790:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10794:	e0bff917 	ldw	r2,-28(fp)
   10798:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   1079c:	e0bffd17 	ldw	r2,-12(fp)
   107a0:	10800017 	ldw	r2,0(r2)
   107a4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   107a8:	e0bffc17 	ldw	r2,-16(fp)
   107ac:	10800104 	addi	r2,r2,4
   107b0:	10800037 	ldwio	r2,0(r2)
   107b4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   107b8:	e0bffb17 	ldw	r2,-20(fp)
   107bc:	1080c00c 	andi	r2,r2,768
   107c0:	10006d26 	beq	r2,zero,10978 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   107c4:	e0bffb17 	ldw	r2,-20(fp)
   107c8:	1080400c 	andi	r2,r2,256
   107cc:	10003526 	beq	r2,zero,108a4 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   107d0:	00800074 	movhi	r2,1
   107d4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   107d8:	e0bffd17 	ldw	r2,-12(fp)
   107dc:	10800a17 	ldw	r2,40(r2)
   107e0:	10800044 	addi	r2,r2,1
   107e4:	1081ffcc 	andi	r2,r2,2047
   107e8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   107ec:	e0bffd17 	ldw	r2,-12(fp)
   107f0:	10800b17 	ldw	r2,44(r2)
   107f4:	e0fffa17 	ldw	r3,-24(fp)
   107f8:	18801526 	beq	r3,r2,10850 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   107fc:	e0bffc17 	ldw	r2,-16(fp)
   10800:	10800037 	ldwio	r2,0(r2)
   10804:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10808:	e0bfff17 	ldw	r2,-4(fp)
   1080c:	10a0000c 	andi	r2,r2,32768
   10810:	10001126 	beq	r2,zero,10858 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10814:	e0bffd17 	ldw	r2,-12(fp)
   10818:	10800a17 	ldw	r2,40(r2)
   1081c:	e0ffff17 	ldw	r3,-4(fp)
   10820:	1809883a 	mov	r4,r3
   10824:	e0fffd17 	ldw	r3,-12(fp)
   10828:	1885883a 	add	r2,r3,r2
   1082c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10830:	e0bffd17 	ldw	r2,-12(fp)
   10834:	10800a17 	ldw	r2,40(r2)
   10838:	10800044 	addi	r2,r2,1
   1083c:	10c1ffcc 	andi	r3,r2,2047
   10840:	e0bffd17 	ldw	r2,-12(fp)
   10844:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   10848:	0001883a 	nop
      {
   1084c:	003fe206 	br	107d8 <altera_avalon_jtag_uart_irq+0x58>
          break;
   10850:	0001883a 	nop
   10854:	00000106 	br	1085c <altera_avalon_jtag_uart_irq+0xdc>
          break;
   10858:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1085c:	e0bfff17 	ldw	r2,-4(fp)
   10860:	10bfffec 	andhi	r2,r2,65535
   10864:	10000f26 	beq	r2,zero,108a4 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10868:	e0bffd17 	ldw	r2,-12(fp)
   1086c:	10c00817 	ldw	r3,32(r2)
   10870:	00bfff84 	movi	r2,-2
   10874:	1886703a 	and	r3,r3,r2
   10878:	e0bffd17 	ldw	r2,-12(fp)
   1087c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10880:	e0bffc17 	ldw	r2,-16(fp)
   10884:	10800104 	addi	r2,r2,4
   10888:	1007883a 	mov	r3,r2
   1088c:	e0bffd17 	ldw	r2,-12(fp)
   10890:	10800817 	ldw	r2,32(r2)
   10894:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	10800104 	addi	r2,r2,4
   108a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   108a4:	e0bffb17 	ldw	r2,-20(fp)
   108a8:	1080800c 	andi	r2,r2,512
   108ac:	103fbe26 	beq	r2,zero,107a8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   108b0:	e0bffb17 	ldw	r2,-20(fp)
   108b4:	1004d43a 	srli	r2,r2,16
   108b8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   108bc:	00001406 	br	10910 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   108c0:	e0bffc17 	ldw	r2,-16(fp)
   108c4:	e0fffd17 	ldw	r3,-12(fp)
   108c8:	18c00d17 	ldw	r3,52(r3)
   108cc:	e13ffd17 	ldw	r4,-12(fp)
   108d0:	20c7883a 	add	r3,r4,r3
   108d4:	18c20e03 	ldbu	r3,2104(r3)
   108d8:	18c03fcc 	andi	r3,r3,255
   108dc:	18c0201c 	xori	r3,r3,128
   108e0:	18ffe004 	addi	r3,r3,-128
   108e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   108e8:	e0bffd17 	ldw	r2,-12(fp)
   108ec:	10800d17 	ldw	r2,52(r2)
   108f0:	10800044 	addi	r2,r2,1
   108f4:	10c1ffcc 	andi	r3,r2,2047
   108f8:	e0bffd17 	ldw	r2,-12(fp)
   108fc:	10c00d15 	stw	r3,52(r2)
   10900:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   10904:	e0bffe17 	ldw	r2,-8(fp)
   10908:	10bfffc4 	addi	r2,r2,-1
   1090c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   10910:	e0bffe17 	ldw	r2,-8(fp)
   10914:	10000526 	beq	r2,zero,1092c <altera_avalon_jtag_uart_irq+0x1ac>
   10918:	e0bffd17 	ldw	r2,-12(fp)
   1091c:	10c00d17 	ldw	r3,52(r2)
   10920:	e0bffd17 	ldw	r2,-12(fp)
   10924:	10800c17 	ldw	r2,48(r2)
   10928:	18bfe51e 	bne	r3,r2,108c0 <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
   1092c:	e0bffe17 	ldw	r2,-8(fp)
   10930:	103f9d26 	beq	r2,zero,107a8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10934:	e0bffd17 	ldw	r2,-12(fp)
   10938:	10c00817 	ldw	r3,32(r2)
   1093c:	00bfff44 	movi	r2,-3
   10940:	1886703a 	and	r3,r3,r2
   10944:	e0bffd17 	ldw	r2,-12(fp)
   10948:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1094c:	e0bffd17 	ldw	r2,-12(fp)
   10950:	10800017 	ldw	r2,0(r2)
   10954:	10800104 	addi	r2,r2,4
   10958:	1007883a 	mov	r3,r2
   1095c:	e0bffd17 	ldw	r2,-12(fp)
   10960:	10800817 	ldw	r2,32(r2)
   10964:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10968:	e0bffc17 	ldw	r2,-16(fp)
   1096c:	10800104 	addi	r2,r2,4
   10970:	10800037 	ldwio	r2,0(r2)
  {
   10974:	003f8c06 	br	107a8 <altera_avalon_jtag_uart_irq+0x28>
      break;
   10978:	0001883a 	nop
      }
    }
  }
}
   1097c:	0001883a 	nop
   10980:	e037883a 	mov	sp,fp
   10984:	df000017 	ldw	fp,0(sp)
   10988:	dec00104 	addi	sp,sp,4
   1098c:	f800283a 	ret

00010990 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10990:	defffc04 	addi	sp,sp,-16
   10994:	df000315 	stw	fp,12(sp)
   10998:	df000304 	addi	fp,sp,12
   1099c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   109a0:	e0bffd17 	ldw	r2,-12(fp)
   109a4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   109a8:	e0bfff17 	ldw	r2,-4(fp)
   109ac:	10800017 	ldw	r2,0(r2)
   109b0:	10800104 	addi	r2,r2,4
   109b4:	10800037 	ldwio	r2,0(r2)
   109b8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   109bc:	e0bffe17 	ldw	r2,-8(fp)
   109c0:	1081000c 	andi	r2,r2,1024
   109c4:	10000b26 	beq	r2,zero,109f4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   109c8:	e0bfff17 	ldw	r2,-4(fp)
   109cc:	10800017 	ldw	r2,0(r2)
   109d0:	10800104 	addi	r2,r2,4
   109d4:	1007883a 	mov	r3,r2
   109d8:	e0bfff17 	ldw	r2,-4(fp)
   109dc:	10800817 	ldw	r2,32(r2)
   109e0:	10810014 	ori	r2,r2,1024
   109e4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   109e8:	e0bfff17 	ldw	r2,-4(fp)
   109ec:	10000915 	stw	zero,36(r2)
   109f0:	00000a06 	br	10a1c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   109f4:	e0bfff17 	ldw	r2,-4(fp)
   109f8:	10c00917 	ldw	r3,36(r2)
   109fc:	00a00034 	movhi	r2,32768
   10a00:	10bfff04 	addi	r2,r2,-4
   10a04:	10c00536 	bltu	r2,r3,10a1c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10a08:	e0bfff17 	ldw	r2,-4(fp)
   10a0c:	10800917 	ldw	r2,36(r2)
   10a10:	10c00044 	addi	r3,r2,1
   10a14:	e0bfff17 	ldw	r2,-4(fp)
   10a18:	10c00915 	stw	r3,36(r2)
   10a1c:	d0a6b817 	ldw	r2,-25888(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10a20:	e037883a 	mov	sp,fp
   10a24:	df000017 	ldw	fp,0(sp)
   10a28:	dec00104 	addi	sp,sp,4
   10a2c:	f800283a 	ret

00010a30 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10a30:	defffd04 	addi	sp,sp,-12
   10a34:	df000215 	stw	fp,8(sp)
   10a38:	df000204 	addi	fp,sp,8
   10a3c:	e13fff15 	stw	r4,-4(fp)
   10a40:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10a44:	00000506 	br	10a5c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10a48:	e0bffe17 	ldw	r2,-8(fp)
   10a4c:	1090000c 	andi	r2,r2,16384
   10a50:	10000226 	beq	r2,zero,10a5c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10a54:	00bffd44 	movi	r2,-11
   10a58:	00000b06 	br	10a88 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10a5c:	e0bfff17 	ldw	r2,-4(fp)
   10a60:	10c00d17 	ldw	r3,52(r2)
   10a64:	e0bfff17 	ldw	r2,-4(fp)
   10a68:	10800c17 	ldw	r2,48(r2)
   10a6c:	18800526 	beq	r3,r2,10a84 <altera_avalon_jtag_uart_close+0x54>
   10a70:	e0bfff17 	ldw	r2,-4(fp)
   10a74:	10c00917 	ldw	r3,36(r2)
   10a78:	e0bfff17 	ldw	r2,-4(fp)
   10a7c:	10800117 	ldw	r2,4(r2)
   10a80:	18bff136 	bltu	r3,r2,10a48 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   10a84:	0005883a 	mov	r2,zero
}
   10a88:	e037883a 	mov	sp,fp
   10a8c:	df000017 	ldw	fp,0(sp)
   10a90:	dec00104 	addi	sp,sp,4
   10a94:	f800283a 	ret

00010a98 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10a98:	defffa04 	addi	sp,sp,-24
   10a9c:	df000515 	stw	fp,20(sp)
   10aa0:	df000504 	addi	fp,sp,20
   10aa4:	e13ffd15 	stw	r4,-12(fp)
   10aa8:	e17ffc15 	stw	r5,-16(fp)
   10aac:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   10ab0:	00bff9c4 	movi	r2,-25
   10ab4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   10ab8:	e0bffc17 	ldw	r2,-16(fp)
   10abc:	109a8060 	cmpeqi	r2,r2,27137
   10ac0:	1000041e 	bne	r2,zero,10ad4 <altera_avalon_jtag_uart_ioctl+0x3c>
   10ac4:	e0bffc17 	ldw	r2,-16(fp)
   10ac8:	109a80a0 	cmpeqi	r2,r2,27138
   10acc:	1000181e 	bne	r2,zero,10b30 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   10ad0:	00002906 	br	10b78 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   10ad4:	e0bffd17 	ldw	r2,-12(fp)
   10ad8:	10c00117 	ldw	r3,4(r2)
   10adc:	00a00034 	movhi	r2,32768
   10ae0:	10bfffc4 	addi	r2,r2,-1
   10ae4:	18802126 	beq	r3,r2,10b6c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   10ae8:	e0bffb17 	ldw	r2,-20(fp)
   10aec:	10800017 	ldw	r2,0(r2)
   10af0:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	10800090 	cmplti	r2,r2,2
   10afc:	1000061e 	bne	r2,zero,10b18 <altera_avalon_jtag_uart_ioctl+0x80>
   10b00:	e0fffe17 	ldw	r3,-8(fp)
   10b04:	00a00034 	movhi	r2,32768
   10b08:	10bfffc4 	addi	r2,r2,-1
   10b0c:	18800226 	beq	r3,r2,10b18 <altera_avalon_jtag_uart_ioctl+0x80>
   10b10:	e0bffe17 	ldw	r2,-8(fp)
   10b14:	00000206 	br	10b20 <altera_avalon_jtag_uart_ioctl+0x88>
   10b18:	00a00034 	movhi	r2,32768
   10b1c:	10bfff84 	addi	r2,r2,-2
   10b20:	e0fffd17 	ldw	r3,-12(fp)
   10b24:	18800115 	stw	r2,4(r3)
      rc = 0;
   10b28:	e03fff15 	stw	zero,-4(fp)
    break;
   10b2c:	00000f06 	br	10b6c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   10b30:	e0bffd17 	ldw	r2,-12(fp)
   10b34:	10c00117 	ldw	r3,4(r2)
   10b38:	00a00034 	movhi	r2,32768
   10b3c:	10bfffc4 	addi	r2,r2,-1
   10b40:	18800c26 	beq	r3,r2,10b74 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10b44:	e0bffd17 	ldw	r2,-12(fp)
   10b48:	10c00917 	ldw	r3,36(r2)
   10b4c:	e0bffd17 	ldw	r2,-12(fp)
   10b50:	10800117 	ldw	r2,4(r2)
   10b54:	1885803a 	cmpltu	r2,r3,r2
   10b58:	10c03fcc 	andi	r3,r2,255
   10b5c:	e0bffb17 	ldw	r2,-20(fp)
   10b60:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10b64:	e03fff15 	stw	zero,-4(fp)
    break;
   10b68:	00000206 	br	10b74 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   10b6c:	0001883a 	nop
   10b70:	00000106 	br	10b78 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   10b74:	0001883a 	nop
  }

  return rc;
   10b78:	e0bfff17 	ldw	r2,-4(fp)
}
   10b7c:	e037883a 	mov	sp,fp
   10b80:	df000017 	ldw	fp,0(sp)
   10b84:	dec00104 	addi	sp,sp,4
   10b88:	f800283a 	ret

00010b8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10b8c:	defff304 	addi	sp,sp,-52
   10b90:	dfc00c15 	stw	ra,48(sp)
   10b94:	df000b15 	stw	fp,44(sp)
   10b98:	df000b04 	addi	fp,sp,44
   10b9c:	e13ff815 	stw	r4,-32(fp)
   10ba0:	e17ff715 	stw	r5,-36(fp)
   10ba4:	e1bff615 	stw	r6,-40(fp)
   10ba8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   10bac:	e0bff717 	ldw	r2,-36(fp)
   10bb0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10bb4:	00004706 	br	10cd4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10bb8:	e0bff817 	ldw	r2,-32(fp)
   10bbc:	10800a17 	ldw	r2,40(r2)
   10bc0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   10bc4:	e0bff817 	ldw	r2,-32(fp)
   10bc8:	10800b17 	ldw	r2,44(r2)
   10bcc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   10bd0:	e0fffd17 	ldw	r3,-12(fp)
   10bd4:	e0bffc17 	ldw	r2,-16(fp)
   10bd8:	18800536 	bltu	r3,r2,10bf0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10bdc:	e0fffd17 	ldw	r3,-12(fp)
   10be0:	e0bffc17 	ldw	r2,-16(fp)
   10be4:	1885c83a 	sub	r2,r3,r2
   10be8:	e0bffe15 	stw	r2,-8(fp)
   10bec:	00000406 	br	10c00 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10bf0:	00c20004 	movi	r3,2048
   10bf4:	e0bffc17 	ldw	r2,-16(fp)
   10bf8:	1885c83a 	sub	r2,r3,r2
   10bfc:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   10c00:	e0bffe17 	ldw	r2,-8(fp)
   10c04:	10001e26 	beq	r2,zero,10c80 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10c08:	e0fff617 	ldw	r3,-40(fp)
   10c0c:	e0bffe17 	ldw	r2,-8(fp)
   10c10:	1880022e 	bgeu	r3,r2,10c1c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10c14:	e0bff617 	ldw	r2,-40(fp)
   10c18:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10c1c:	e0bff817 	ldw	r2,-32(fp)
   10c20:	10c00e04 	addi	r3,r2,56
   10c24:	e0bffc17 	ldw	r2,-16(fp)
   10c28:	1885883a 	add	r2,r3,r2
   10c2c:	e1bffe17 	ldw	r6,-8(fp)
   10c30:	100b883a 	mov	r5,r2
   10c34:	e13fff17 	ldw	r4,-4(fp)
   10c38:	0012e8c0 	call	12e8c <memcpy>
      ptr   += n;
   10c3c:	e0ffff17 	ldw	r3,-4(fp)
   10c40:	e0bffe17 	ldw	r2,-8(fp)
   10c44:	1885883a 	add	r2,r3,r2
   10c48:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   10c4c:	e0fff617 	ldw	r3,-40(fp)
   10c50:	e0bffe17 	ldw	r2,-8(fp)
   10c54:	1885c83a 	sub	r2,r3,r2
   10c58:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10c5c:	e0fffc17 	ldw	r3,-16(fp)
   10c60:	e0bffe17 	ldw	r2,-8(fp)
   10c64:	1885883a 	add	r2,r3,r2
   10c68:	10c1ffcc 	andi	r3,r2,2047
   10c6c:	e0bff817 	ldw	r2,-32(fp)
   10c70:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10c74:	e0bff617 	ldw	r2,-40(fp)
   10c78:	00bfcf16 	blt	zero,r2,10bb8 <altera_avalon_jtag_uart_read+0x2c>
   10c7c:	00000106 	br	10c84 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   10c80:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   10c84:	e0ffff17 	ldw	r3,-4(fp)
   10c88:	e0bff717 	ldw	r2,-36(fp)
   10c8c:	1880141e 	bne	r3,r2,10ce0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10c90:	e0bff517 	ldw	r2,-44(fp)
   10c94:	1090000c 	andi	r2,r2,16384
   10c98:	1000131e 	bne	r2,zero,10ce8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10c9c:	0001883a 	nop
   10ca0:	e0bff817 	ldw	r2,-32(fp)
   10ca4:	10800a17 	ldw	r2,40(r2)
   10ca8:	e0fffd17 	ldw	r3,-12(fp)
   10cac:	1880051e 	bne	r3,r2,10cc4 <altera_avalon_jtag_uart_read+0x138>
   10cb0:	e0bff817 	ldw	r2,-32(fp)
   10cb4:	10c00917 	ldw	r3,36(r2)
   10cb8:	e0bff817 	ldw	r2,-32(fp)
   10cbc:	10800117 	ldw	r2,4(r2)
   10cc0:	18bff736 	bltu	r3,r2,10ca0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10cc4:	e0bff817 	ldw	r2,-32(fp)
   10cc8:	10800a17 	ldw	r2,40(r2)
   10ccc:	e0fffd17 	ldw	r3,-12(fp)
   10cd0:	18800726 	beq	r3,r2,10cf0 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   10cd4:	e0bff617 	ldw	r2,-40(fp)
   10cd8:	00bfb716 	blt	zero,r2,10bb8 <altera_avalon_jtag_uart_read+0x2c>
   10cdc:	00000506 	br	10cf4 <altera_avalon_jtag_uart_read+0x168>
      break;
   10ce0:	0001883a 	nop
   10ce4:	00000306 	br	10cf4 <altera_avalon_jtag_uart_read+0x168>
      break;
   10ce8:	0001883a 	nop
   10cec:	00000106 	br	10cf4 <altera_avalon_jtag_uart_read+0x168>
      break;
   10cf0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10cf4:	e0ffff17 	ldw	r3,-4(fp)
   10cf8:	e0bff717 	ldw	r2,-36(fp)
   10cfc:	18801926 	beq	r3,r2,10d64 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   10d00:	0005303a 	rdctl	r2,status
   10d04:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d08:	e0fff917 	ldw	r3,-28(fp)
   10d0c:	00bfff84 	movi	r2,-2
   10d10:	1884703a 	and	r2,r3,r2
   10d14:	1001703a 	wrctl	status,r2
  return context;
   10d18:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10d1c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10d20:	e0bff817 	ldw	r2,-32(fp)
   10d24:	10800817 	ldw	r2,32(r2)
   10d28:	10c00054 	ori	r3,r2,1
   10d2c:	e0bff817 	ldw	r2,-32(fp)
   10d30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10d34:	e0bff817 	ldw	r2,-32(fp)
   10d38:	10800017 	ldw	r2,0(r2)
   10d3c:	10800104 	addi	r2,r2,4
   10d40:	1007883a 	mov	r3,r2
   10d44:	e0bff817 	ldw	r2,-32(fp)
   10d48:	10800817 	ldw	r2,32(r2)
   10d4c:	18800035 	stwio	r2,0(r3)
   10d50:	e0bffb17 	ldw	r2,-20(fp)
   10d54:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   10d58:	e0bffa17 	ldw	r2,-24(fp)
   10d5c:	1001703a 	wrctl	status,r2
}
   10d60:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10d64:	e0ffff17 	ldw	r3,-4(fp)
   10d68:	e0bff717 	ldw	r2,-36(fp)
   10d6c:	18800426 	beq	r3,r2,10d80 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   10d70:	e0ffff17 	ldw	r3,-4(fp)
   10d74:	e0bff717 	ldw	r2,-36(fp)
   10d78:	1885c83a 	sub	r2,r3,r2
   10d7c:	00000606 	br	10d98 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   10d80:	e0bff517 	ldw	r2,-44(fp)
   10d84:	1090000c 	andi	r2,r2,16384
   10d88:	10000226 	beq	r2,zero,10d94 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   10d8c:	00bffd44 	movi	r2,-11
   10d90:	00000106 	br	10d98 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   10d94:	00bffec4 	movi	r2,-5
}
   10d98:	e037883a 	mov	sp,fp
   10d9c:	dfc00117 	ldw	ra,4(sp)
   10da0:	df000017 	ldw	fp,0(sp)
   10da4:	dec00204 	addi	sp,sp,8
   10da8:	f800283a 	ret

00010dac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10dac:	defff304 	addi	sp,sp,-52
   10db0:	dfc00c15 	stw	ra,48(sp)
   10db4:	df000b15 	stw	fp,44(sp)
   10db8:	df000b04 	addi	fp,sp,44
   10dbc:	e13ff815 	stw	r4,-32(fp)
   10dc0:	e17ff715 	stw	r5,-36(fp)
   10dc4:	e1bff615 	stw	r6,-40(fp)
   10dc8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10dcc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10dd0:	e0bff717 	ldw	r2,-36(fp)
   10dd4:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10dd8:	00003706 	br	10eb8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10ddc:	e0bff817 	ldw	r2,-32(fp)
   10de0:	10800c17 	ldw	r2,48(r2)
   10de4:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   10de8:	e0bff817 	ldw	r2,-32(fp)
   10dec:	10800d17 	ldw	r2,52(r2)
   10df0:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   10df4:	e0fffc17 	ldw	r3,-16(fp)
   10df8:	e0bfff17 	ldw	r2,-4(fp)
   10dfc:	1880062e 	bgeu	r3,r2,10e18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10e00:	e0ffff17 	ldw	r3,-4(fp)
   10e04:	e0bffc17 	ldw	r2,-16(fp)
   10e08:	1885c83a 	sub	r2,r3,r2
   10e0c:	10bfffc4 	addi	r2,r2,-1
   10e10:	e0bffe15 	stw	r2,-8(fp)
   10e14:	00000b06 	br	10e44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10e18:	e0bfff17 	ldw	r2,-4(fp)
   10e1c:	10000526 	beq	r2,zero,10e34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10e20:	00c20004 	movi	r3,2048
   10e24:	e0bffc17 	ldw	r2,-16(fp)
   10e28:	1885c83a 	sub	r2,r3,r2
   10e2c:	e0bffe15 	stw	r2,-8(fp)
   10e30:	00000406 	br	10e44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10e34:	00c1ffc4 	movi	r3,2047
   10e38:	e0bffc17 	ldw	r2,-16(fp)
   10e3c:	1885c83a 	sub	r2,r3,r2
   10e40:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   10e44:	e0bffe17 	ldw	r2,-8(fp)
   10e48:	10001e26 	beq	r2,zero,10ec4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10e4c:	e0fff617 	ldw	r3,-40(fp)
   10e50:	e0bffe17 	ldw	r2,-8(fp)
   10e54:	1880022e 	bgeu	r3,r2,10e60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10e58:	e0bff617 	ldw	r2,-40(fp)
   10e5c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10e60:	e0bff817 	ldw	r2,-32(fp)
   10e64:	10c20e04 	addi	r3,r2,2104
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	1885883a 	add	r2,r3,r2
   10e70:	e1bffe17 	ldw	r6,-8(fp)
   10e74:	e17ff717 	ldw	r5,-36(fp)
   10e78:	1009883a 	mov	r4,r2
   10e7c:	0012e8c0 	call	12e8c <memcpy>
      ptr   += n;
   10e80:	e0fff717 	ldw	r3,-36(fp)
   10e84:	e0bffe17 	ldw	r2,-8(fp)
   10e88:	1885883a 	add	r2,r3,r2
   10e8c:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   10e90:	e0fff617 	ldw	r3,-40(fp)
   10e94:	e0bffe17 	ldw	r2,-8(fp)
   10e98:	1885c83a 	sub	r2,r3,r2
   10e9c:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10ea0:	e0fffc17 	ldw	r3,-16(fp)
   10ea4:	e0bffe17 	ldw	r2,-8(fp)
   10ea8:	1885883a 	add	r2,r3,r2
   10eac:	10c1ffcc 	andi	r3,r2,2047
   10eb0:	e0bff817 	ldw	r2,-32(fp)
   10eb4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   10eb8:	e0bff617 	ldw	r2,-40(fp)
   10ebc:	00bfc716 	blt	zero,r2,10ddc <altera_avalon_jtag_uart_write+0x30>
   10ec0:	00000106 	br	10ec8 <altera_avalon_jtag_uart_write+0x11c>
        break;
   10ec4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   10ec8:	0005303a 	rdctl	r2,status
   10ecc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ed0:	e0fff917 	ldw	r3,-28(fp)
   10ed4:	00bfff84 	movi	r2,-2
   10ed8:	1884703a 	and	r2,r3,r2
   10edc:	1001703a 	wrctl	status,r2
  return context;
   10ee0:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10ee4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10ee8:	e0bff817 	ldw	r2,-32(fp)
   10eec:	10800817 	ldw	r2,32(r2)
   10ef0:	10c00094 	ori	r3,r2,2
   10ef4:	e0bff817 	ldw	r2,-32(fp)
   10ef8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10efc:	e0bff817 	ldw	r2,-32(fp)
   10f00:	10800017 	ldw	r2,0(r2)
   10f04:	10800104 	addi	r2,r2,4
   10f08:	1007883a 	mov	r3,r2
   10f0c:	e0bff817 	ldw	r2,-32(fp)
   10f10:	10800817 	ldw	r2,32(r2)
   10f14:	18800035 	stwio	r2,0(r3)
   10f18:	e0bffb17 	ldw	r2,-20(fp)
   10f1c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   10f20:	e0bffa17 	ldw	r2,-24(fp)
   10f24:	1001703a 	wrctl	status,r2
}
   10f28:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10f2c:	e0bff617 	ldw	r2,-40(fp)
   10f30:	0080100e 	bge	zero,r2,10f74 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10f34:	e0bff517 	ldw	r2,-44(fp)
   10f38:	1090000c 	andi	r2,r2,16384
   10f3c:	1000101e 	bne	r2,zero,10f80 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10f40:	0001883a 	nop
   10f44:	e0bff817 	ldw	r2,-32(fp)
   10f48:	10800d17 	ldw	r2,52(r2)
   10f4c:	e0ffff17 	ldw	r3,-4(fp)
   10f50:	1880051e 	bne	r3,r2,10f68 <altera_avalon_jtag_uart_write+0x1bc>
   10f54:	e0bff817 	ldw	r2,-32(fp)
   10f58:	10c00917 	ldw	r3,36(r2)
   10f5c:	e0bff817 	ldw	r2,-32(fp)
   10f60:	10800117 	ldw	r2,4(r2)
   10f64:	18bff736 	bltu	r3,r2,10f44 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10f68:	e0bff817 	ldw	r2,-32(fp)
   10f6c:	10800917 	ldw	r2,36(r2)
   10f70:	1000051e 	bne	r2,zero,10f88 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   10f74:	e0bff617 	ldw	r2,-40(fp)
   10f78:	00bfcf16 	blt	zero,r2,10eb8 <altera_avalon_jtag_uart_write+0x10c>
   10f7c:	00000306 	br	10f8c <altera_avalon_jtag_uart_write+0x1e0>
        break;
   10f80:	0001883a 	nop
   10f84:	00000106 	br	10f8c <altera_avalon_jtag_uart_write+0x1e0>
         break;
   10f88:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10f8c:	e0fff717 	ldw	r3,-36(fp)
   10f90:	e0bffd17 	ldw	r2,-12(fp)
   10f94:	18800426 	beq	r3,r2,10fa8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   10f98:	e0fff717 	ldw	r3,-36(fp)
   10f9c:	e0bffd17 	ldw	r2,-12(fp)
   10fa0:	1885c83a 	sub	r2,r3,r2
   10fa4:	00000606 	br	10fc0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   10fa8:	e0bff517 	ldw	r2,-44(fp)
   10fac:	1090000c 	andi	r2,r2,16384
   10fb0:	10000226 	beq	r2,zero,10fbc <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   10fb4:	00bffd44 	movi	r2,-11
   10fb8:	00000106 	br	10fc0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10fbc:	00bffec4 	movi	r2,-5
}
   10fc0:	e037883a 	mov	sp,fp
   10fc4:	dfc00117 	ldw	ra,4(sp)
   10fc8:	df000017 	ldw	fp,0(sp)
   10fcc:	dec00204 	addi	sp,sp,8
   10fd0:	f800283a 	ret

00010fd4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10fd4:	defff904 	addi	sp,sp,-28
   10fd8:	dfc00615 	stw	ra,24(sp)
   10fdc:	df000515 	stw	fp,20(sp)
   10fe0:	df000504 	addi	fp,sp,20
   10fe4:	e13ffc15 	stw	r4,-16(fp)
   10fe8:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   10fec:	0007883a 	mov	r3,zero
   10ff0:	e0bffc17 	ldw	r2,-16(fp)
   10ff4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   10ff8:	e0bffc17 	ldw	r2,-16(fp)
   10ffc:	10800104 	addi	r2,r2,4
   11000:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   11004:	0005303a 	rdctl	r2,status
   11008:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1100c:	e0fffd17 	ldw	r3,-12(fp)
   11010:	00bfff84 	movi	r2,-2
   11014:	1884703a 	and	r2,r3,r2
   11018:	1001703a 	wrctl	status,r2
  return context;
   1101c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11020:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   11024:	0011b900 	call	11b90 <alt_tick>
   11028:	e0bfff17 	ldw	r2,-4(fp)
   1102c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   11030:	e0bffe17 	ldw	r2,-8(fp)
   11034:	1001703a 	wrctl	status,r2
}
   11038:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   1103c:	0001883a 	nop
   11040:	e037883a 	mov	sp,fp
   11044:	dfc00117 	ldw	ra,4(sp)
   11048:	df000017 	ldw	fp,0(sp)
   1104c:	dec00204 	addi	sp,sp,8
   11050:	f800283a 	ret

00011054 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11054:	defff904 	addi	sp,sp,-28
   11058:	dfc00615 	stw	ra,24(sp)
   1105c:	df000515 	stw	fp,20(sp)
   11060:	df000504 	addi	fp,sp,20
   11064:	e13ffe15 	stw	r4,-8(fp)
   11068:	e17ffd15 	stw	r5,-12(fp)
   1106c:	e1bffc15 	stw	r6,-16(fp)
   11070:	e1fffb15 	stw	r7,-20(fp)
   11074:	e0bffb17 	ldw	r2,-20(fp)
   11078:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1107c:	d0a6b817 	ldw	r2,-25888(gp)
   11080:	1000031e 	bne	r2,zero,11090 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   11084:	e0bfff17 	ldw	r2,-4(fp)
   11088:	d0a6b815 	stw	r2,-25888(gp)
    return 0;
   1108c:	00000106 	br	11094 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   11090:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11094:	e0bffe17 	ldw	r2,-8(fp)
   11098:	10800104 	addi	r2,r2,4
   1109c:	00c001c4 	movi	r3,7
   110a0:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   110a4:	01800074 	movhi	r6,1
   110a8:	3183f504 	addi	r6,r6,4052
   110ac:	e17ffe17 	ldw	r5,-8(fp)
   110b0:	e13ffc17 	ldw	r4,-16(fp)
   110b4:	00116840 	call	11684 <alt_irq_register>
#endif  
}
   110b8:	0001883a 	nop
   110bc:	e037883a 	mov	sp,fp
   110c0:	dfc00117 	ldw	ra,4(sp)
   110c4:	df000017 	ldw	fp,0(sp)
   110c8:	dec00204 	addi	sp,sp,8
   110cc:	f800283a 	ret

000110d0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   110d0:	defff504 	addi	sp,sp,-44
   110d4:	df000a15 	stw	fp,40(sp)
   110d8:	df000a04 	addi	fp,sp,40
   110dc:	e13ff915 	stw	r4,-28(fp)
   110e0:	e17ff815 	stw	r5,-32(fp)
   110e4:	e1bff715 	stw	r6,-36(fp)
   110e8:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   110ec:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
   110f0:	d0a6b817 	ldw	r2,-25888(gp)
  
  if (alt_ticks_per_second ())
   110f4:	10003e26 	beq	r2,zero,111f0 <alt_alarm_start+0x120>
  {
    if (alarm)
   110f8:	e0bff917 	ldw	r2,-28(fp)
   110fc:	10003a26 	beq	r2,zero,111e8 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
   11100:	e0bff917 	ldw	r2,-28(fp)
   11104:	e0fff717 	ldw	r3,-36(fp)
   11108:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1110c:	e0bff917 	ldw	r2,-28(fp)
   11110:	e0fff617 	ldw	r3,-40(fp)
   11114:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   11118:	0005303a 	rdctl	r2,status
   1111c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11120:	e0fffd17 	ldw	r3,-12(fp)
   11124:	00bfff84 	movi	r2,-2
   11128:	1884703a 	and	r2,r3,r2
   1112c:	1001703a 	wrctl	status,r2
  return context;
   11130:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
   11134:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11138:	d0a6b917 	ldw	r2,-25884(gp)
      
      current_nticks = alt_nticks();
   1113c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11140:	e0fff817 	ldw	r3,-32(fp)
   11144:	e0bfff17 	ldw	r2,-4(fp)
   11148:	1885883a 	add	r2,r3,r2
   1114c:	10c00044 	addi	r3,r2,1
   11150:	e0bff917 	ldw	r2,-28(fp)
   11154:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11158:	e0bff917 	ldw	r2,-28(fp)
   1115c:	10c00217 	ldw	r3,8(r2)
   11160:	e0bfff17 	ldw	r2,-4(fp)
   11164:	1880042e 	bgeu	r3,r2,11178 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   11168:	e0bff917 	ldw	r2,-28(fp)
   1116c:	00c00044 	movi	r3,1
   11170:	10c00405 	stb	r3,16(r2)
   11174:	00000206 	br	11180 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   11178:	e0bff917 	ldw	r2,-28(fp)
   1117c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11180:	e0bff917 	ldw	r2,-28(fp)
   11184:	d0e00704 	addi	r3,gp,-32740
   11188:	e0fffb15 	stw	r3,-20(fp)
   1118c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11190:	e0bffa17 	ldw	r2,-24(fp)
   11194:	e0fffb17 	ldw	r3,-20(fp)
   11198:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1119c:	e0bffb17 	ldw	r2,-20(fp)
   111a0:	10c00017 	ldw	r3,0(r2)
   111a4:	e0bffa17 	ldw	r2,-24(fp)
   111a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   111ac:	e0bffb17 	ldw	r2,-20(fp)
   111b0:	10800017 	ldw	r2,0(r2)
   111b4:	e0fffa17 	ldw	r3,-24(fp)
   111b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   111bc:	e0bffb17 	ldw	r2,-20(fp)
   111c0:	e0fffa17 	ldw	r3,-24(fp)
   111c4:	10c00015 	stw	r3,0(r2)
}
   111c8:	0001883a 	nop
   111cc:	e0bffe17 	ldw	r2,-8(fp)
   111d0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   111d4:	e0bffc17 	ldw	r2,-16(fp)
   111d8:	1001703a 	wrctl	status,r2
}
   111dc:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   111e0:	0005883a 	mov	r2,zero
   111e4:	00000306 	br	111f4 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
   111e8:	00bffa84 	movi	r2,-22
   111ec:	00000106 	br	111f4 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
   111f0:	00bfde84 	movi	r2,-134
  }
}
   111f4:	e037883a 	mov	sp,fp
   111f8:	df000017 	ldw	fp,0(sp)
   111fc:	dec00104 	addi	sp,sp,4
   11200:	f800283a 	ret

00011204 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11204:	defffe04 	addi	sp,sp,-8
   11208:	dfc00115 	stw	ra,4(sp)
   1120c:	df000015 	stw	fp,0(sp)
   11210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11214:	d0a00517 	ldw	r2,-32748(gp)
   11218:	10000326 	beq	r2,zero,11228 <alt_get_errno+0x24>
   1121c:	d0a00517 	ldw	r2,-32748(gp)
   11220:	103ee83a 	callr	r2
   11224:	00000106 	br	1122c <alt_get_errno+0x28>
   11228:	d0a6bb04 	addi	r2,gp,-25876
}
   1122c:	e037883a 	mov	sp,fp
   11230:	dfc00117 	ldw	ra,4(sp)
   11234:	df000017 	ldw	fp,0(sp)
   11238:	dec00204 	addi	sp,sp,8
   1123c:	f800283a 	ret

00011240 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11240:	defffb04 	addi	sp,sp,-20
   11244:	dfc00415 	stw	ra,16(sp)
   11248:	df000315 	stw	fp,12(sp)
   1124c:	df000304 	addi	fp,sp,12
   11250:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	10000916 	blt	r2,zero,11280 <close+0x40>
   1125c:	e0fffd17 	ldw	r3,-12(fp)
   11260:	1805883a 	mov	r2,r3
   11264:	1085883a 	add	r2,r2,r2
   11268:	10c5883a 	add	r2,r2,r3
   1126c:	100490ba 	slli	r2,r2,2
   11270:	00c00074 	movhi	r3,1
   11274:	18da0b04 	addi	r3,r3,26668
   11278:	10c5883a 	add	r2,r2,r3
   1127c:	00000106 	br	11284 <close+0x44>
   11280:	0005883a 	mov	r2,zero
   11284:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   11288:	e0bfff17 	ldw	r2,-4(fp)
   1128c:	10001926 	beq	r2,zero,112f4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11290:	e0bfff17 	ldw	r2,-4(fp)
   11294:	10800017 	ldw	r2,0(r2)
   11298:	10800417 	ldw	r2,16(r2)
   1129c:	10000626 	beq	r2,zero,112b8 <close+0x78>
   112a0:	e0bfff17 	ldw	r2,-4(fp)
   112a4:	10800017 	ldw	r2,0(r2)
   112a8:	10800417 	ldw	r2,16(r2)
   112ac:	e13fff17 	ldw	r4,-4(fp)
   112b0:	103ee83a 	callr	r2
   112b4:	00000106 	br	112bc <close+0x7c>
   112b8:	0005883a 	mov	r2,zero
   112bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   112c0:	e13ffd17 	ldw	r4,-12(fp)
   112c4:	0011a7c0 	call	11a7c <alt_release_fd>
    if (rval < 0)
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	1000070e 	bge	r2,zero,112ec <close+0xac>
    {
      ALT_ERRNO = -rval;
   112d0:	00112040 	call	11204 <alt_get_errno>
   112d4:	1007883a 	mov	r3,r2
   112d8:	e0bffe17 	ldw	r2,-8(fp)
   112dc:	0085c83a 	sub	r2,zero,r2
   112e0:	18800015 	stw	r2,0(r3)
      return -1;
   112e4:	00bfffc4 	movi	r2,-1
   112e8:	00000706 	br	11308 <close+0xc8>
    }
    return 0;
   112ec:	0005883a 	mov	r2,zero
   112f0:	00000506 	br	11308 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   112f4:	00112040 	call	11204 <alt_get_errno>
   112f8:	1007883a 	mov	r3,r2
   112fc:	00801444 	movi	r2,81
   11300:	18800015 	stw	r2,0(r3)
    return -1;
   11304:	00bfffc4 	movi	r2,-1
  }
}
   11308:	e037883a 	mov	sp,fp
   1130c:	dfc00117 	ldw	ra,4(sp)
   11310:	df000017 	ldw	fp,0(sp)
   11314:	dec00204 	addi	sp,sp,8
   11318:	f800283a 	ret

0001131c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1131c:	deffff04 	addi	sp,sp,-4
   11320:	df000015 	stw	fp,0(sp)
   11324:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11328:	0001883a 	nop
   1132c:	e037883a 	mov	sp,fp
   11330:	df000017 	ldw	fp,0(sp)
   11334:	dec00104 	addi	sp,sp,4
   11338:	f800283a 	ret

0001133c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1133c:	defffc04 	addi	sp,sp,-16
   11340:	df000315 	stw	fp,12(sp)
   11344:	df000304 	addi	fp,sp,12
   11348:	e13fff15 	stw	r4,-4(fp)
   1134c:	e17ffe15 	stw	r5,-8(fp)
   11350:	e1bffd15 	stw	r6,-12(fp)
  return len;
   11354:	e0bffd17 	ldw	r2,-12(fp)
}
   11358:	e037883a 	mov	sp,fp
   1135c:	df000017 	ldw	fp,0(sp)
   11360:	dec00104 	addi	sp,sp,4
   11364:	f800283a 	ret

00011368 <alt_get_errno>:
{
   11368:	defffe04 	addi	sp,sp,-8
   1136c:	dfc00115 	stw	ra,4(sp)
   11370:	df000015 	stw	fp,0(sp)
   11374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11378:	d0a00517 	ldw	r2,-32748(gp)
   1137c:	10000326 	beq	r2,zero,1138c <alt_get_errno+0x24>
   11380:	d0a00517 	ldw	r2,-32748(gp)
   11384:	103ee83a 	callr	r2
   11388:	00000106 	br	11390 <alt_get_errno+0x28>
   1138c:	d0a6bb04 	addi	r2,gp,-25876
}
   11390:	e037883a 	mov	sp,fp
   11394:	dfc00117 	ldw	ra,4(sp)
   11398:	df000017 	ldw	fp,0(sp)
   1139c:	dec00204 	addi	sp,sp,8
   113a0:	f800283a 	ret

000113a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   113a4:	defffa04 	addi	sp,sp,-24
   113a8:	dfc00515 	stw	ra,20(sp)
   113ac:	df000415 	stw	fp,16(sp)
   113b0:	df000404 	addi	fp,sp,16
   113b4:	e13ffd15 	stw	r4,-12(fp)
   113b8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   113bc:	e0bffd17 	ldw	r2,-12(fp)
   113c0:	10000326 	beq	r2,zero,113d0 <alt_dev_llist_insert+0x2c>
   113c4:	e0bffd17 	ldw	r2,-12(fp)
   113c8:	10800217 	ldw	r2,8(r2)
   113cc:	1000061e 	bne	r2,zero,113e8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   113d0:	00113680 	call	11368 <alt_get_errno>
   113d4:	1007883a 	mov	r3,r2
   113d8:	00800584 	movi	r2,22
   113dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   113e0:	00bffa84 	movi	r2,-22
   113e4:	00001406 	br	11438 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   113e8:	e0bffd17 	ldw	r2,-12(fp)
   113ec:	e0fffc17 	ldw	r3,-16(fp)
   113f0:	e0ffff15 	stw	r3,-4(fp)
   113f4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   113f8:	e0bffe17 	ldw	r2,-8(fp)
   113fc:	e0ffff17 	ldw	r3,-4(fp)
   11400:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11404:	e0bfff17 	ldw	r2,-4(fp)
   11408:	10c00017 	ldw	r3,0(r2)
   1140c:	e0bffe17 	ldw	r2,-8(fp)
   11410:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   11414:	e0bfff17 	ldw	r2,-4(fp)
   11418:	10800017 	ldw	r2,0(r2)
   1141c:	e0fffe17 	ldw	r3,-8(fp)
   11420:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11424:	e0bfff17 	ldw	r2,-4(fp)
   11428:	e0fffe17 	ldw	r3,-8(fp)
   1142c:	10c00015 	stw	r3,0(r2)
}
   11430:	0001883a 	nop

  return 0;  
   11434:	0005883a 	mov	r2,zero
}
   11438:	e037883a 	mov	sp,fp
   1143c:	dfc00117 	ldw	ra,4(sp)
   11440:	df000017 	ldw	fp,0(sp)
   11444:	dec00204 	addi	sp,sp,8
   11448:	f800283a 	ret

0001144c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1144c:	defffd04 	addi	sp,sp,-12
   11450:	dfc00215 	stw	ra,8(sp)
   11454:	df000115 	stw	fp,4(sp)
   11458:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1145c:	00800074 	movhi	r2,1
   11460:	1095c604 	addi	r2,r2,22296
   11464:	e0bfff15 	stw	r2,-4(fp)
   11468:	00000606 	br	11484 <_do_ctors+0x38>
        (*ctor) (); 
   1146c:	e0bfff17 	ldw	r2,-4(fp)
   11470:	10800017 	ldw	r2,0(r2)
   11474:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11478:	e0bfff17 	ldw	r2,-4(fp)
   1147c:	10bfff04 	addi	r2,r2,-4
   11480:	e0bfff15 	stw	r2,-4(fp)
   11484:	e0ffff17 	ldw	r3,-4(fp)
   11488:	00800074 	movhi	r2,1
   1148c:	1095c704 	addi	r2,r2,22300
   11490:	18bff62e 	bgeu	r3,r2,1146c <_do_ctors+0x20>
}
   11494:	0001883a 	nop
   11498:	0001883a 	nop
   1149c:	e037883a 	mov	sp,fp
   114a0:	dfc00117 	ldw	ra,4(sp)
   114a4:	df000017 	ldw	fp,0(sp)
   114a8:	dec00204 	addi	sp,sp,8
   114ac:	f800283a 	ret

000114b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   114b0:	defffd04 	addi	sp,sp,-12
   114b4:	dfc00215 	stw	ra,8(sp)
   114b8:	df000115 	stw	fp,4(sp)
   114bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   114c0:	00800074 	movhi	r2,1
   114c4:	1095c604 	addi	r2,r2,22296
   114c8:	e0bfff15 	stw	r2,-4(fp)
   114cc:	00000606 	br	114e8 <_do_dtors+0x38>
        (*dtor) (); 
   114d0:	e0bfff17 	ldw	r2,-4(fp)
   114d4:	10800017 	ldw	r2,0(r2)
   114d8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   114dc:	e0bfff17 	ldw	r2,-4(fp)
   114e0:	10bfff04 	addi	r2,r2,-4
   114e4:	e0bfff15 	stw	r2,-4(fp)
   114e8:	e0ffff17 	ldw	r3,-4(fp)
   114ec:	00800074 	movhi	r2,1
   114f0:	1095c704 	addi	r2,r2,22300
   114f4:	18bff62e 	bgeu	r3,r2,114d0 <_do_dtors+0x20>
}
   114f8:	0001883a 	nop
   114fc:	0001883a 	nop
   11500:	e037883a 	mov	sp,fp
   11504:	dfc00117 	ldw	ra,4(sp)
   11508:	df000017 	ldw	fp,0(sp)
   1150c:	dec00204 	addi	sp,sp,8
   11510:	f800283a 	ret

00011514 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11514:	deffff04 	addi	sp,sp,-4
   11518:	df000015 	stw	fp,0(sp)
   1151c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   11520:	0001883a 	nop
   11524:	e037883a 	mov	sp,fp
   11528:	df000017 	ldw	fp,0(sp)
   1152c:	dec00104 	addi	sp,sp,4
   11530:	f800283a 	ret

00011534 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11534:	defff904 	addi	sp,sp,-28
   11538:	dfc00615 	stw	ra,24(sp)
   1153c:	df000515 	stw	fp,20(sp)
   11540:	df000504 	addi	fp,sp,20
   11544:	e13ffe15 	stw	r4,-8(fp)
   11548:	e17ffd15 	stw	r5,-12(fp)
   1154c:	e1bffc15 	stw	r6,-16(fp)
   11550:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   11554:	e1bffb17 	ldw	r6,-20(fp)
   11558:	e17ffc17 	ldw	r5,-16(fp)
   1155c:	e13ffd17 	ldw	r4,-12(fp)
   11560:	001191c0 	call	1191c <open>
   11564:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   11568:	e0bfff17 	ldw	r2,-4(fp)
   1156c:	10002016 	blt	r2,zero,115f0 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   11570:	e0ffff17 	ldw	r3,-4(fp)
   11574:	1805883a 	mov	r2,r3
   11578:	1085883a 	add	r2,r2,r2
   1157c:	10c5883a 	add	r2,r2,r3
   11580:	100490ba 	slli	r2,r2,2
   11584:	00c00074 	movhi	r3,1
   11588:	10c7883a 	add	r3,r2,r3
   1158c:	18da0b17 	ldw	r3,26668(r3)
   11590:	e0bffe17 	ldw	r2,-8(fp)
   11594:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11598:	e0ffff17 	ldw	r3,-4(fp)
   1159c:	1805883a 	mov	r2,r3
   115a0:	1085883a 	add	r2,r2,r2
   115a4:	10c5883a 	add	r2,r2,r3
   115a8:	100490ba 	slli	r2,r2,2
   115ac:	00c00074 	movhi	r3,1
   115b0:	10c7883a 	add	r3,r2,r3
   115b4:	18da0c17 	ldw	r3,26672(r3)
   115b8:	e0bffe17 	ldw	r2,-8(fp)
   115bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   115c0:	e0ffff17 	ldw	r3,-4(fp)
   115c4:	1805883a 	mov	r2,r3
   115c8:	1085883a 	add	r2,r2,r2
   115cc:	10c5883a 	add	r2,r2,r3
   115d0:	100490ba 	slli	r2,r2,2
   115d4:	00c00074 	movhi	r3,1
   115d8:	10c7883a 	add	r3,r2,r3
   115dc:	18da0d17 	ldw	r3,26676(r3)
   115e0:	e0bffe17 	ldw	r2,-8(fp)
   115e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   115e8:	e13fff17 	ldw	r4,-4(fp)
   115ec:	0011a7c0 	call	11a7c <alt_release_fd>
  }
} 
   115f0:	0001883a 	nop
   115f4:	e037883a 	mov	sp,fp
   115f8:	dfc00117 	ldw	ra,4(sp)
   115fc:	df000017 	ldw	fp,0(sp)
   11600:	dec00204 	addi	sp,sp,8
   11604:	f800283a 	ret

00011608 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11608:	defffb04 	addi	sp,sp,-20
   1160c:	dfc00415 	stw	ra,16(sp)
   11610:	df000315 	stw	fp,12(sp)
   11614:	df000304 	addi	fp,sp,12
   11618:	e13fff15 	stw	r4,-4(fp)
   1161c:	e17ffe15 	stw	r5,-8(fp)
   11620:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11624:	01c07fc4 	movi	r7,511
   11628:	01800044 	movi	r6,1
   1162c:	e17fff17 	ldw	r5,-4(fp)
   11630:	01000074 	movhi	r4,1
   11634:	211a0e04 	addi	r4,r4,26680
   11638:	00115340 	call	11534 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1163c:	01c07fc4 	movi	r7,511
   11640:	000d883a 	mov	r6,zero
   11644:	e17ffe17 	ldw	r5,-8(fp)
   11648:	01000074 	movhi	r4,1
   1164c:	211a0b04 	addi	r4,r4,26668
   11650:	00115340 	call	11534 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   11654:	01c07fc4 	movi	r7,511
   11658:	01800044 	movi	r6,1
   1165c:	e17ffd17 	ldw	r5,-12(fp)
   11660:	01000074 	movhi	r4,1
   11664:	211a1104 	addi	r4,r4,26692
   11668:	00115340 	call	11534 <alt_open_fd>
}  
   1166c:	0001883a 	nop
   11670:	e037883a 	mov	sp,fp
   11674:	dfc00117 	ldw	ra,4(sp)
   11678:	df000017 	ldw	fp,0(sp)
   1167c:	dec00204 	addi	sp,sp,8
   11680:	f800283a 	ret

00011684 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   11684:	defff004 	addi	sp,sp,-64
   11688:	df000f15 	stw	fp,60(sp)
   1168c:	df000f04 	addi	fp,sp,60
   11690:	e13ff315 	stw	r4,-52(fp)
   11694:	e17ff215 	stw	r5,-56(fp)
   11698:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
   1169c:	00bffa84 	movi	r2,-22
   116a0:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   116a4:	e0bff317 	ldw	r2,-52(fp)
   116a8:	10800828 	cmpgeui	r2,r2,32
   116ac:	1000501e 	bne	r2,zero,117f0 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
   116b0:	0005303a 	rdctl	r2,status
   116b4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   116b8:	e0fffd17 	ldw	r3,-12(fp)
   116bc:	00bfff84 	movi	r2,-2
   116c0:	1884703a 	and	r2,r3,r2
   116c4:	1001703a 	wrctl	status,r2
  return context;
   116c8:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   116cc:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
   116d0:	e0bff317 	ldw	r2,-52(fp)
   116d4:	100890fa 	slli	r4,r2,3
   116d8:	e0fff117 	ldw	r3,-60(fp)
   116dc:	008000b4 	movhi	r2,2
   116e0:	2085883a 	add	r2,r4,r2
   116e4:	10e33515 	stw	r3,-29484(r2)
    alt_irq[id].context = context;
   116e8:	e0bff317 	ldw	r2,-52(fp)
   116ec:	100890fa 	slli	r4,r2,3
   116f0:	e0fff217 	ldw	r3,-56(fp)
   116f4:	008000b4 	movhi	r2,2
   116f8:	2085883a 	add	r2,r4,r2
   116fc:	10e33615 	stw	r3,-29480(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   11700:	e0bff117 	ldw	r2,-60(fp)
   11704:	10001a26 	beq	r2,zero,11770 <alt_irq_register+0xec>
   11708:	e0bff317 	ldw	r2,-52(fp)
   1170c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
   11710:	0005303a 	rdctl	r2,status
   11714:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11718:	e0fffb17 	ldw	r3,-20(fp)
   1171c:	00bfff84 	movi	r2,-2
   11720:	1884703a 	and	r2,r3,r2
   11724:	1001703a 	wrctl	status,r2
  return context;
   11728:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1172c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
   11730:	00c00044 	movi	r3,1
   11734:	e0bffc17 	ldw	r2,-16(fp)
   11738:	1884983a 	sll	r2,r3,r2
   1173c:	1007883a 	mov	r3,r2
   11740:	d0a6b717 	ldw	r2,-25892(gp)
   11744:	1884b03a 	or	r2,r3,r2
   11748:	d0a6b715 	stw	r2,-25892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1174c:	d0a6b717 	ldw	r2,-25892(gp)
   11750:	100170fa 	wrctl	ienable,r2
   11754:	e0bffa17 	ldw	r2,-24(fp)
   11758:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
   1175c:	e0bff917 	ldw	r2,-28(fp)
   11760:	1001703a 	wrctl	status,r2
}
   11764:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   11768:	0005883a 	mov	r2,zero
   1176c:	00001a06 	br	117d8 <alt_irq_register+0x154>
   11770:	e0bff317 	ldw	r2,-52(fp)
   11774:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
   11778:	0005303a 	rdctl	r2,status
   1177c:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11780:	e0fff717 	ldw	r3,-36(fp)
   11784:	00bfff84 	movi	r2,-2
   11788:	1884703a 	and	r2,r3,r2
   1178c:	1001703a 	wrctl	status,r2
  return context;
   11790:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
   11794:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
   11798:	00c00044 	movi	r3,1
   1179c:	e0bff817 	ldw	r2,-32(fp)
   117a0:	1884983a 	sll	r2,r3,r2
   117a4:	0084303a 	nor	r2,zero,r2
   117a8:	1007883a 	mov	r3,r2
   117ac:	d0a6b717 	ldw	r2,-25892(gp)
   117b0:	1884703a 	and	r2,r3,r2
   117b4:	d0a6b715 	stw	r2,-25892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   117b8:	d0a6b717 	ldw	r2,-25892(gp)
   117bc:	100170fa 	wrctl	ienable,r2
   117c0:	e0bff617 	ldw	r2,-40(fp)
   117c4:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
   117c8:	e0bff517 	ldw	r2,-44(fp)
   117cc:	1001703a 	wrctl	status,r2
}
   117d0:	0001883a 	nop
  return 0;
   117d4:	0005883a 	mov	r2,zero
   117d8:	e0bfff15 	stw	r2,-4(fp)
   117dc:	e0bffe17 	ldw	r2,-8(fp)
   117e0:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
   117e4:	e0bff417 	ldw	r2,-48(fp)
   117e8:	1001703a 	wrctl	status,r2
}
   117ec:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
   117f0:	e0bfff17 	ldw	r2,-4(fp)
}
   117f4:	e037883a 	mov	sp,fp
   117f8:	df000017 	ldw	fp,0(sp)
   117fc:	dec00104 	addi	sp,sp,4
   11800:	f800283a 	ret

00011804 <alt_get_errno>:
{
   11804:	defffe04 	addi	sp,sp,-8
   11808:	dfc00115 	stw	ra,4(sp)
   1180c:	df000015 	stw	fp,0(sp)
   11810:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11814:	d0a00517 	ldw	r2,-32748(gp)
   11818:	10000326 	beq	r2,zero,11828 <alt_get_errno+0x24>
   1181c:	d0a00517 	ldw	r2,-32748(gp)
   11820:	103ee83a 	callr	r2
   11824:	00000106 	br	1182c <alt_get_errno+0x28>
   11828:	d0a6bb04 	addi	r2,gp,-25876
}
   1182c:	e037883a 	mov	sp,fp
   11830:	dfc00117 	ldw	ra,4(sp)
   11834:	df000017 	ldw	fp,0(sp)
   11838:	dec00204 	addi	sp,sp,8
   1183c:	f800283a 	ret

00011840 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11840:	defffd04 	addi	sp,sp,-12
   11844:	df000215 	stw	fp,8(sp)
   11848:	df000204 	addi	fp,sp,8
   1184c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11850:	e0bffe17 	ldw	r2,-8(fp)
   11854:	10800217 	ldw	r2,8(r2)
   11858:	10d00034 	orhi	r3,r2,16384
   1185c:	e0bffe17 	ldw	r2,-8(fp)
   11860:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11864:	e03fff15 	stw	zero,-4(fp)
   11868:	00002306 	br	118f8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1186c:	e0ffff17 	ldw	r3,-4(fp)
   11870:	1805883a 	mov	r2,r3
   11874:	1085883a 	add	r2,r2,r2
   11878:	10c5883a 	add	r2,r2,r3
   1187c:	100490ba 	slli	r2,r2,2
   11880:	00c00074 	movhi	r3,1
   11884:	10c7883a 	add	r3,r2,r3
   11888:	18da0b17 	ldw	r3,26668(r3)
   1188c:	e0bffe17 	ldw	r2,-8(fp)
   11890:	10800017 	ldw	r2,0(r2)
   11894:	1880151e 	bne	r3,r2,118ec <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11898:	e0ffff17 	ldw	r3,-4(fp)
   1189c:	1805883a 	mov	r2,r3
   118a0:	1085883a 	add	r2,r2,r2
   118a4:	10c5883a 	add	r2,r2,r3
   118a8:	100490ba 	slli	r2,r2,2
   118ac:	00c00074 	movhi	r3,1
   118b0:	10c7883a 	add	r3,r2,r3
   118b4:	189a0d17 	ldw	r2,26676(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   118b8:	10000c0e 	bge	r2,zero,118ec <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   118bc:	e0ffff17 	ldw	r3,-4(fp)
   118c0:	1805883a 	mov	r2,r3
   118c4:	1085883a 	add	r2,r2,r2
   118c8:	10c5883a 	add	r2,r2,r3
   118cc:	100490ba 	slli	r2,r2,2
   118d0:	00c00074 	movhi	r3,1
   118d4:	18da0b04 	addi	r3,r3,26668
   118d8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   118dc:	e0fffe17 	ldw	r3,-8(fp)
   118e0:	18800226 	beq	r3,r2,118ec <alt_file_locked+0xac>
    {
      return -EACCES;
   118e4:	00bffcc4 	movi	r2,-13
   118e8:	00000806 	br	1190c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   118ec:	e0bfff17 	ldw	r2,-4(fp)
   118f0:	10800044 	addi	r2,r2,1
   118f4:	e0bfff15 	stw	r2,-4(fp)
   118f8:	d0a00417 	ldw	r2,-32752(gp)
   118fc:	1007883a 	mov	r3,r2
   11900:	e0bfff17 	ldw	r2,-4(fp)
   11904:	18bfd92e 	bgeu	r3,r2,1186c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11908:	0005883a 	mov	r2,zero
}
   1190c:	e037883a 	mov	sp,fp
   11910:	df000017 	ldw	fp,0(sp)
   11914:	dec00104 	addi	sp,sp,4
   11918:	f800283a 	ret

0001191c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1191c:	defff604 	addi	sp,sp,-40
   11920:	dfc00915 	stw	ra,36(sp)
   11924:	df000815 	stw	fp,32(sp)
   11928:	df000804 	addi	fp,sp,32
   1192c:	e13ffa15 	stw	r4,-24(fp)
   11930:	e17ff915 	stw	r5,-28(fp)
   11934:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11938:	00bfffc4 	movi	r2,-1
   1193c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   11940:	00bffb44 	movi	r2,-19
   11944:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   11948:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1194c:	d1600204 	addi	r5,gp,-32760
   11950:	e13ffa17 	ldw	r4,-24(fp)
   11954:	0011cbc0 	call	11cbc <alt_find_dev>
   11958:	e0bfff15 	stw	r2,-4(fp)
   1195c:	e0bfff17 	ldw	r2,-4(fp)
   11960:	1000051e 	bne	r2,zero,11978 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11964:	e13ffa17 	ldw	r4,-24(fp)
   11968:	0011d4c0 	call	11d4c <alt_find_file>
   1196c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   11970:	00800044 	movi	r2,1
   11974:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11978:	e0bfff17 	ldw	r2,-4(fp)
   1197c:	10002c26 	beq	r2,zero,11a30 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11980:	e13fff17 	ldw	r4,-4(fp)
   11984:	0011e540 	call	11e54 <alt_get_fd>
   11988:	e0bffe15 	stw	r2,-8(fp)
   1198c:	e0bffe17 	ldw	r2,-8(fp)
   11990:	1000030e 	bge	r2,zero,119a0 <open+0x84>
    {
      status = index;
   11994:	e0bffe17 	ldw	r2,-8(fp)
   11998:	e0bffd15 	stw	r2,-12(fp)
   1199c:	00002606 	br	11a38 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   119a0:	e0fffe17 	ldw	r3,-8(fp)
   119a4:	1805883a 	mov	r2,r3
   119a8:	1085883a 	add	r2,r2,r2
   119ac:	10c5883a 	add	r2,r2,r3
   119b0:	100490ba 	slli	r2,r2,2
   119b4:	00c00074 	movhi	r3,1
   119b8:	18da0b04 	addi	r3,r3,26668
   119bc:	10c5883a 	add	r2,r2,r3
   119c0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   119c4:	e0fff917 	ldw	r3,-28(fp)
   119c8:	00900034 	movhi	r2,16384
   119cc:	10bfffc4 	addi	r2,r2,-1
   119d0:	1886703a 	and	r3,r3,r2
   119d4:	e0bffb17 	ldw	r2,-20(fp)
   119d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   119dc:	e0bffc17 	ldw	r2,-16(fp)
   119e0:	1000051e 	bne	r2,zero,119f8 <open+0xdc>
   119e4:	e13ffb17 	ldw	r4,-20(fp)
   119e8:	00118400 	call	11840 <alt_file_locked>
   119ec:	e0bffd15 	stw	r2,-12(fp)
   119f0:	e0bffd17 	ldw	r2,-12(fp)
   119f4:	10001016 	blt	r2,zero,11a38 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   119f8:	e0bfff17 	ldw	r2,-4(fp)
   119fc:	10800317 	ldw	r2,12(r2)
   11a00:	10000826 	beq	r2,zero,11a24 <open+0x108>
   11a04:	e0bfff17 	ldw	r2,-4(fp)
   11a08:	10800317 	ldw	r2,12(r2)
   11a0c:	e1fff817 	ldw	r7,-32(fp)
   11a10:	e1bff917 	ldw	r6,-28(fp)
   11a14:	e17ffa17 	ldw	r5,-24(fp)
   11a18:	e13ffb17 	ldw	r4,-20(fp)
   11a1c:	103ee83a 	callr	r2
   11a20:	00000106 	br	11a28 <open+0x10c>
   11a24:	0005883a 	mov	r2,zero
   11a28:	e0bffd15 	stw	r2,-12(fp)
   11a2c:	00000206 	br	11a38 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11a30:	00bffb44 	movi	r2,-19
   11a34:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11a38:	e0bffd17 	ldw	r2,-12(fp)
   11a3c:	1000090e 	bge	r2,zero,11a64 <open+0x148>
  {
    alt_release_fd (index);  
   11a40:	e13ffe17 	ldw	r4,-8(fp)
   11a44:	0011a7c0 	call	11a7c <alt_release_fd>
    ALT_ERRNO = -status;
   11a48:	00118040 	call	11804 <alt_get_errno>
   11a4c:	1007883a 	mov	r3,r2
   11a50:	e0bffd17 	ldw	r2,-12(fp)
   11a54:	0085c83a 	sub	r2,zero,r2
   11a58:	18800015 	stw	r2,0(r3)
    return -1;
   11a5c:	00bfffc4 	movi	r2,-1
   11a60:	00000106 	br	11a68 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11a64:	e0bffe17 	ldw	r2,-8(fp)
}
   11a68:	e037883a 	mov	sp,fp
   11a6c:	dfc00117 	ldw	ra,4(sp)
   11a70:	df000017 	ldw	fp,0(sp)
   11a74:	dec00204 	addi	sp,sp,8
   11a78:	f800283a 	ret

00011a7c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11a7c:	defffe04 	addi	sp,sp,-8
   11a80:	df000115 	stw	fp,4(sp)
   11a84:	df000104 	addi	fp,sp,4
   11a88:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11a8c:	e0bfff17 	ldw	r2,-4(fp)
   11a90:	108000d0 	cmplti	r2,r2,3
   11a94:	1000101e 	bne	r2,zero,11ad8 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   11a98:	e0ffff17 	ldw	r3,-4(fp)
   11a9c:	1805883a 	mov	r2,r3
   11aa0:	1085883a 	add	r2,r2,r2
   11aa4:	10c5883a 	add	r2,r2,r3
   11aa8:	100490ba 	slli	r2,r2,2
   11aac:	00c00074 	movhi	r3,1
   11ab0:	10c7883a 	add	r3,r2,r3
   11ab4:	181a0d15 	stw	zero,26676(r3)
    alt_fd_list[fd].dev      = 0;
   11ab8:	e0ffff17 	ldw	r3,-4(fp)
   11abc:	1805883a 	mov	r2,r3
   11ac0:	1085883a 	add	r2,r2,r2
   11ac4:	10c5883a 	add	r2,r2,r3
   11ac8:	100490ba 	slli	r2,r2,2
   11acc:	00c00074 	movhi	r3,1
   11ad0:	10c7883a 	add	r3,r2,r3
   11ad4:	181a0b15 	stw	zero,26668(r3)
  }
}
   11ad8:	0001883a 	nop
   11adc:	e037883a 	mov	sp,fp
   11ae0:	df000017 	ldw	fp,0(sp)
   11ae4:	dec00104 	addi	sp,sp,4
   11ae8:	f800283a 	ret

00011aec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11aec:	defffa04 	addi	sp,sp,-24
   11af0:	df000515 	stw	fp,20(sp)
   11af4:	df000504 	addi	fp,sp,20
   11af8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   11afc:	0005303a 	rdctl	r2,status
   11b00:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b04:	e0fffc17 	ldw	r3,-16(fp)
   11b08:	00bfff84 	movi	r2,-2
   11b0c:	1884703a 	and	r2,r3,r2
   11b10:	1001703a 	wrctl	status,r2
  return context;
   11b14:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11b18:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   11b1c:	e0bffb17 	ldw	r2,-20(fp)
   11b20:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11b24:	e0bffd17 	ldw	r2,-12(fp)
   11b28:	10800017 	ldw	r2,0(r2)
   11b2c:	e0fffd17 	ldw	r3,-12(fp)
   11b30:	18c00117 	ldw	r3,4(r3)
   11b34:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11b38:	e0bffd17 	ldw	r2,-12(fp)
   11b3c:	10800117 	ldw	r2,4(r2)
   11b40:	e0fffd17 	ldw	r3,-12(fp)
   11b44:	18c00017 	ldw	r3,0(r3)
   11b48:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11b4c:	e0bffd17 	ldw	r2,-12(fp)
   11b50:	e0fffd17 	ldw	r3,-12(fp)
   11b54:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11b58:	e0bffd17 	ldw	r2,-12(fp)
   11b5c:	e0fffd17 	ldw	r3,-12(fp)
   11b60:	10c00015 	stw	r3,0(r2)
} 
   11b64:	0001883a 	nop
   11b68:	e0bfff17 	ldw	r2,-4(fp)
   11b6c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   11b70:	e0bffe17 	ldw	r2,-8(fp)
   11b74:	1001703a 	wrctl	status,r2
}
   11b78:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   11b7c:	0001883a 	nop
   11b80:	e037883a 	mov	sp,fp
   11b84:	df000017 	ldw	fp,0(sp)
   11b88:	dec00104 	addi	sp,sp,4
   11b8c:	f800283a 	ret

00011b90 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11b90:	defffb04 	addi	sp,sp,-20
   11b94:	dfc00415 	stw	ra,16(sp)
   11b98:	df000315 	stw	fp,12(sp)
   11b9c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11ba0:	d0a00717 	ldw	r2,-32740(gp)
   11ba4:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11ba8:	d0a6b917 	ldw	r2,-25884(gp)
   11bac:	10800044 	addi	r2,r2,1
   11bb0:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11bb4:	00002e06 	br	11c70 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11bb8:	e0bfff17 	ldw	r2,-4(fp)
   11bbc:	10800017 	ldw	r2,0(r2)
   11bc0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11bc4:	e0bfff17 	ldw	r2,-4(fp)
   11bc8:	10800403 	ldbu	r2,16(r2)
   11bcc:	10803fcc 	andi	r2,r2,255
   11bd0:	10000426 	beq	r2,zero,11be4 <alt_tick+0x54>
   11bd4:	d0a6b917 	ldw	r2,-25884(gp)
   11bd8:	1000021e 	bne	r2,zero,11be4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11bdc:	e0bfff17 	ldw	r2,-4(fp)
   11be0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11be4:	e0bfff17 	ldw	r2,-4(fp)
   11be8:	10800217 	ldw	r2,8(r2)
   11bec:	d0e6b917 	ldw	r3,-25884(gp)
   11bf0:	18801d36 	bltu	r3,r2,11c68 <alt_tick+0xd8>
   11bf4:	e0bfff17 	ldw	r2,-4(fp)
   11bf8:	10800403 	ldbu	r2,16(r2)
   11bfc:	10803fcc 	andi	r2,r2,255
   11c00:	1000191e 	bne	r2,zero,11c68 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11c04:	e0bfff17 	ldw	r2,-4(fp)
   11c08:	10800317 	ldw	r2,12(r2)
   11c0c:	e0ffff17 	ldw	r3,-4(fp)
   11c10:	18c00517 	ldw	r3,20(r3)
   11c14:	1809883a 	mov	r4,r3
   11c18:	103ee83a 	callr	r2
   11c1c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11c20:	e0bffd17 	ldw	r2,-12(fp)
   11c24:	1000031e 	bne	r2,zero,11c34 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11c28:	e13fff17 	ldw	r4,-4(fp)
   11c2c:	0011aec0 	call	11aec <alt_alarm_stop>
   11c30:	00000d06 	br	11c68 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11c34:	e0bfff17 	ldw	r2,-4(fp)
   11c38:	10c00217 	ldw	r3,8(r2)
   11c3c:	e0bffd17 	ldw	r2,-12(fp)
   11c40:	1887883a 	add	r3,r3,r2
   11c44:	e0bfff17 	ldw	r2,-4(fp)
   11c48:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11c4c:	e0bfff17 	ldw	r2,-4(fp)
   11c50:	10c00217 	ldw	r3,8(r2)
   11c54:	d0a6b917 	ldw	r2,-25884(gp)
   11c58:	1880032e 	bgeu	r3,r2,11c68 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   11c5c:	e0bfff17 	ldw	r2,-4(fp)
   11c60:	00c00044 	movi	r3,1
   11c64:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   11c68:	e0bffe17 	ldw	r2,-8(fp)
   11c6c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   11c70:	e0ffff17 	ldw	r3,-4(fp)
   11c74:	d0a00704 	addi	r2,gp,-32740
   11c78:	18bfcf1e 	bne	r3,r2,11bb8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11c7c:	0001883a 	nop
}
   11c80:	0001883a 	nop
   11c84:	e037883a 	mov	sp,fp
   11c88:	dfc00117 	ldw	ra,4(sp)
   11c8c:	df000017 	ldw	fp,0(sp)
   11c90:	dec00204 	addi	sp,sp,8
   11c94:	f800283a 	ret

00011c98 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11c98:	deffff04 	addi	sp,sp,-4
   11c9c:	df000015 	stw	fp,0(sp)
   11ca0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11ca4:	000170fa 	wrctl	ienable,zero
}
   11ca8:	0001883a 	nop
   11cac:	e037883a 	mov	sp,fp
   11cb0:	df000017 	ldw	fp,0(sp)
   11cb4:	dec00104 	addi	sp,sp,4
   11cb8:	f800283a 	ret

00011cbc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11cbc:	defffa04 	addi	sp,sp,-24
   11cc0:	dfc00515 	stw	ra,20(sp)
   11cc4:	df000415 	stw	fp,16(sp)
   11cc8:	df000404 	addi	fp,sp,16
   11ccc:	e13ffd15 	stw	r4,-12(fp)
   11cd0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11cd4:	e0bffc17 	ldw	r2,-16(fp)
   11cd8:	10800017 	ldw	r2,0(r2)
   11cdc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11ce0:	e13ffd17 	ldw	r4,-12(fp)
   11ce4:	00136740 	call	13674 <strlen>
   11ce8:	10800044 	addi	r2,r2,1
   11cec:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11cf0:	00000d06 	br	11d28 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11cf4:	e0bfff17 	ldw	r2,-4(fp)
   11cf8:	10800217 	ldw	r2,8(r2)
   11cfc:	e0fffe17 	ldw	r3,-8(fp)
   11d00:	180d883a 	mov	r6,r3
   11d04:	e17ffd17 	ldw	r5,-12(fp)
   11d08:	1009883a 	mov	r4,r2
   11d0c:	0012e140 	call	12e14 <memcmp>
   11d10:	1000021e 	bne	r2,zero,11d1c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11d14:	e0bfff17 	ldw	r2,-4(fp)
   11d18:	00000706 	br	11d38 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11d1c:	e0bfff17 	ldw	r2,-4(fp)
   11d20:	10800017 	ldw	r2,0(r2)
   11d24:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   11d28:	e0ffff17 	ldw	r3,-4(fp)
   11d2c:	e0bffc17 	ldw	r2,-16(fp)
   11d30:	18bff01e 	bne	r3,r2,11cf4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   11d34:	0005883a 	mov	r2,zero
}
   11d38:	e037883a 	mov	sp,fp
   11d3c:	dfc00117 	ldw	ra,4(sp)
   11d40:	df000017 	ldw	fp,0(sp)
   11d44:	dec00204 	addi	sp,sp,8
   11d48:	f800283a 	ret

00011d4c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11d4c:	defffb04 	addi	sp,sp,-20
   11d50:	dfc00415 	stw	ra,16(sp)
   11d54:	df000315 	stw	fp,12(sp)
   11d58:	df000304 	addi	fp,sp,12
   11d5c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11d60:	d0a00017 	ldw	r2,-32768(gp)
   11d64:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11d68:	00003106 	br	11e30 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11d6c:	e0bfff17 	ldw	r2,-4(fp)
   11d70:	10800217 	ldw	r2,8(r2)
   11d74:	1009883a 	mov	r4,r2
   11d78:	00136740 	call	13674 <strlen>
   11d7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11d80:	e0bfff17 	ldw	r2,-4(fp)
   11d84:	10c00217 	ldw	r3,8(r2)
   11d88:	e0bffe17 	ldw	r2,-8(fp)
   11d8c:	10bfffc4 	addi	r2,r2,-1
   11d90:	1885883a 	add	r2,r3,r2
   11d94:	10800003 	ldbu	r2,0(r2)
   11d98:	10803fcc 	andi	r2,r2,255
   11d9c:	1080201c 	xori	r2,r2,128
   11da0:	10bfe004 	addi	r2,r2,-128
   11da4:	10800bd8 	cmpnei	r2,r2,47
   11da8:	1000031e 	bne	r2,zero,11db8 <alt_find_file+0x6c>
    {
      len -= 1;
   11dac:	e0bffe17 	ldw	r2,-8(fp)
   11db0:	10bfffc4 	addi	r2,r2,-1
   11db4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11db8:	e0bffe17 	ldw	r2,-8(fp)
   11dbc:	e0fffd17 	ldw	r3,-12(fp)
   11dc0:	1885883a 	add	r2,r3,r2
   11dc4:	10800003 	ldbu	r2,0(r2)
   11dc8:	10803fcc 	andi	r2,r2,255
   11dcc:	1080201c 	xori	r2,r2,128
   11dd0:	10bfe004 	addi	r2,r2,-128
   11dd4:	10800be0 	cmpeqi	r2,r2,47
   11dd8:	1000081e 	bne	r2,zero,11dfc <alt_find_file+0xb0>
   11ddc:	e0bffe17 	ldw	r2,-8(fp)
   11de0:	e0fffd17 	ldw	r3,-12(fp)
   11de4:	1885883a 	add	r2,r3,r2
   11de8:	10800003 	ldbu	r2,0(r2)
   11dec:	10803fcc 	andi	r2,r2,255
   11df0:	1080201c 	xori	r2,r2,128
   11df4:	10bfe004 	addi	r2,r2,-128
   11df8:	10000a1e 	bne	r2,zero,11e24 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11dfc:	e0bfff17 	ldw	r2,-4(fp)
   11e00:	10800217 	ldw	r2,8(r2)
   11e04:	e0fffe17 	ldw	r3,-8(fp)
   11e08:	180d883a 	mov	r6,r3
   11e0c:	e17ffd17 	ldw	r5,-12(fp)
   11e10:	1009883a 	mov	r4,r2
   11e14:	0012e140 	call	12e14 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   11e18:	1000021e 	bne	r2,zero,11e24 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	00000706 	br	11e40 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11e24:	e0bfff17 	ldw	r2,-4(fp)
   11e28:	10800017 	ldw	r2,0(r2)
   11e2c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   11e30:	e0ffff17 	ldw	r3,-4(fp)
   11e34:	d0a00004 	addi	r2,gp,-32768
   11e38:	18bfcc1e 	bne	r3,r2,11d6c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   11e3c:	0005883a 	mov	r2,zero
}
   11e40:	e037883a 	mov	sp,fp
   11e44:	dfc00117 	ldw	ra,4(sp)
   11e48:	df000017 	ldw	fp,0(sp)
   11e4c:	dec00204 	addi	sp,sp,8
   11e50:	f800283a 	ret

00011e54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11e54:	defffc04 	addi	sp,sp,-16
   11e58:	df000315 	stw	fp,12(sp)
   11e5c:	df000304 	addi	fp,sp,12
   11e60:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   11e64:	00bffa04 	movi	r2,-24
   11e68:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11e6c:	e03fff15 	stw	zero,-4(fp)
   11e70:	00001d06 	br	11ee8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   11e74:	e0ffff17 	ldw	r3,-4(fp)
   11e78:	1805883a 	mov	r2,r3
   11e7c:	1085883a 	add	r2,r2,r2
   11e80:	10c5883a 	add	r2,r2,r3
   11e84:	100490ba 	slli	r2,r2,2
   11e88:	00c00074 	movhi	r3,1
   11e8c:	10c7883a 	add	r3,r2,r3
   11e90:	189a0b17 	ldw	r2,26668(r3)
   11e94:	1000111e 	bne	r2,zero,11edc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   11e98:	e0ffff17 	ldw	r3,-4(fp)
   11e9c:	1805883a 	mov	r2,r3
   11ea0:	1085883a 	add	r2,r2,r2
   11ea4:	10c5883a 	add	r2,r2,r3
   11ea8:	100490ba 	slli	r2,r2,2
   11eac:	e13ffd17 	ldw	r4,-12(fp)
   11eb0:	00c00074 	movhi	r3,1
   11eb4:	10c7883a 	add	r3,r2,r3
   11eb8:	191a0b15 	stw	r4,26668(r3)
      if (i > alt_max_fd)
   11ebc:	d0e00417 	ldw	r3,-32752(gp)
   11ec0:	e0bfff17 	ldw	r2,-4(fp)
   11ec4:	1880020e 	bge	r3,r2,11ed0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   11ec8:	e0bfff17 	ldw	r2,-4(fp)
   11ecc:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   11ed0:	e0bfff17 	ldw	r2,-4(fp)
   11ed4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11ed8:	00000706 	br	11ef8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   11edc:	e0bfff17 	ldw	r2,-4(fp)
   11ee0:	10800044 	addi	r2,r2,1
   11ee4:	e0bfff15 	stw	r2,-4(fp)
   11ee8:	e0bfff17 	ldw	r2,-4(fp)
   11eec:	10800810 	cmplti	r2,r2,32
   11ef0:	103fe01e 	bne	r2,zero,11e74 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   11ef4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11ef8:	e0bffe17 	ldw	r2,-8(fp)
}
   11efc:	e037883a 	mov	sp,fp
   11f00:	df000017 	ldw	fp,0(sp)
   11f04:	dec00104 	addi	sp,sp,4
   11f08:	f800283a 	ret

00011f0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11f0c:	defffe04 	addi	sp,sp,-8
   11f10:	df000115 	stw	fp,4(sp)
   11f14:	df000104 	addi	fp,sp,4
   11f18:	e13fff15 	stw	r4,-4(fp)
   11f1c:	e0bfff17 	ldw	r2,-4(fp)
   11f20:	10bffe84 	addi	r2,r2,-6
   11f24:	10c00428 	cmpgeui	r3,r2,16
   11f28:	1800191e 	bne	r3,zero,11f90 <alt_exception_cause_generated_bad_addr+0x84>
   11f2c:	100690ba 	slli	r3,r2,2
   11f30:	00800074 	movhi	r2,1
   11f34:	1885883a 	add	r2,r3,r2
   11f38:	1087d017 	ldw	r2,8000(r2)
   11f3c:	1000683a 	jmp	r2
   11f40:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
   11f44:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
   11f48:	00011f90 	cmplti	zero,zero,1150
   11f4c:	00011f90 	cmplti	zero,zero,1150
   11f50:	00011f90 	cmplti	zero,zero,1150
   11f54:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
   11f58:	00011f88 	cmpgei	zero,zero,1150
   11f5c:	00011f90 	cmplti	zero,zero,1150
   11f60:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
   11f64:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
   11f68:	00011f90 	cmplti	zero,zero,1150
   11f6c:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
   11f70:	00011f88 	cmpgei	zero,zero,1150
   11f74:	00011f90 	cmplti	zero,zero,1150
   11f78:	00011f90 	cmplti	zero,zero,1150
   11f7c:	00011f80 	call	11f8 <__alt_mem_onchip_memory-0xee08>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11f80:	00800044 	movi	r2,1
   11f84:	00000306 	br	11f94 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11f88:	0005883a 	mov	r2,zero
   11f8c:	00000106 	br	11f94 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   11f90:	0005883a 	mov	r2,zero
  }
}
   11f94:	e037883a 	mov	sp,fp
   11f98:	df000017 	ldw	fp,0(sp)
   11f9c:	dec00104 	addi	sp,sp,4
   11fa0:	f800283a 	ret

00011fa4 <atexit>:
   11fa4:	200b883a 	mov	r5,r4
   11fa8:	000f883a 	mov	r7,zero
   11fac:	000d883a 	mov	r6,zero
   11fb0:	0009883a 	mov	r4,zero
   11fb4:	00138701 	jmpi	13870 <__register_exitproc>

00011fb8 <exit>:
   11fb8:	defffe04 	addi	sp,sp,-8
   11fbc:	000b883a 	mov	r5,zero
   11fc0:	dc000015 	stw	r16,0(sp)
   11fc4:	dfc00115 	stw	ra,4(sp)
   11fc8:	2021883a 	mov	r16,r4
   11fcc:	00139000 	call	13900 <__call_exitprocs>
   11fd0:	00800074 	movhi	r2,1
   11fd4:	111c7f17 	ldw	r4,29180(r2)
   11fd8:	20800f17 	ldw	r2,60(r4)
   11fdc:	10000126 	beq	r2,zero,11fe4 <exit+0x2c>
   11fe0:	103ee83a 	callr	r2
   11fe4:	8009883a 	mov	r4,r16
   11fe8:	00150600 	call	15060 <_exit>

00011fec <_fputs_r>:
   11fec:	defff804 	addi	sp,sp,-32
   11ff0:	dc400615 	stw	r17,24(sp)
   11ff4:	2023883a 	mov	r17,r4
   11ff8:	2809883a 	mov	r4,r5
   11ffc:	dc000515 	stw	r16,20(sp)
   12000:	dfc00715 	stw	ra,28(sp)
   12004:	3021883a 	mov	r16,r6
   12008:	d9400015 	stw	r5,0(sp)
   1200c:	00136740 	call	13674 <strlen>
   12010:	d8800415 	stw	r2,16(sp)
   12014:	d8800115 	stw	r2,4(sp)
   12018:	00800044 	movi	r2,1
   1201c:	dec00215 	stw	sp,8(sp)
   12020:	d8800315 	stw	r2,12(sp)
   12024:	88000226 	beq	r17,zero,12030 <_fputs_r+0x44>
   12028:	88800e17 	ldw	r2,56(r17)
   1202c:	10001226 	beq	r2,zero,12078 <_fputs_r+0x8c>
   12030:	8080030b 	ldhu	r2,12(r16)
   12034:	10c8000c 	andi	r3,r2,8192
   12038:	1800061e 	bne	r3,zero,12054 <_fputs_r+0x68>
   1203c:	80c01917 	ldw	r3,100(r16)
   12040:	0137ffc4 	movi	r4,-8193
   12044:	10880014 	ori	r2,r2,8192
   12048:	1906703a 	and	r3,r3,r4
   1204c:	8080030d 	sth	r2,12(r16)
   12050:	80c01915 	stw	r3,100(r16)
   12054:	d9800204 	addi	r6,sp,8
   12058:	800b883a 	mov	r5,r16
   1205c:	8809883a 	mov	r4,r17
   12060:	001209c0 	call	1209c <__sfvwrite_r>
   12064:	dfc00717 	ldw	ra,28(sp)
   12068:	dc400617 	ldw	r17,24(sp)
   1206c:	dc000517 	ldw	r16,20(sp)
   12070:	dec00804 	addi	sp,sp,32
   12074:	f800283a 	ret
   12078:	8809883a 	mov	r4,r17
   1207c:	00140900 	call	14090 <__sinit>
   12080:	003feb06 	br	12030 <_fputs_r+0x44>

00012084 <fputs>:
   12084:	00c00074 	movhi	r3,1
   12088:	2005883a 	mov	r2,r4
   1208c:	191c8017 	ldw	r4,29184(r3)
   12090:	280d883a 	mov	r6,r5
   12094:	100b883a 	mov	r5,r2
   12098:	0011fec1 	jmpi	11fec <_fputs_r>

0001209c <__sfvwrite_r>:
   1209c:	30800217 	ldw	r2,8(r6)
   120a0:	1000a326 	beq	r2,zero,12330 <__sfvwrite_r+0x294>
   120a4:	29c0030b 	ldhu	r7,12(r5)
   120a8:	defff404 	addi	sp,sp,-48
   120ac:	ddc00915 	stw	r23,36(sp)
   120b0:	dd400715 	stw	r21,28(sp)
   120b4:	dc000215 	stw	r16,8(sp)
   120b8:	dfc00b15 	stw	ra,44(sp)
   120bc:	df000a15 	stw	fp,40(sp)
   120c0:	dd800815 	stw	r22,32(sp)
   120c4:	dd000615 	stw	r20,24(sp)
   120c8:	dcc00515 	stw	r19,20(sp)
   120cc:	dc800415 	stw	r18,16(sp)
   120d0:	dc400315 	stw	r17,12(sp)
   120d4:	3880020c 	andi	r2,r7,8
   120d8:	302f883a 	mov	r23,r6
   120dc:	202b883a 	mov	r21,r4
   120e0:	2821883a 	mov	r16,r5
   120e4:	10002226 	beq	r2,zero,12170 <__sfvwrite_r+0xd4>
   120e8:	28800417 	ldw	r2,16(r5)
   120ec:	10002026 	beq	r2,zero,12170 <__sfvwrite_r+0xd4>
   120f0:	3880008c 	andi	r2,r7,2
   120f4:	bc400017 	ldw	r17,0(r23)
   120f8:	10002526 	beq	r2,zero,12190 <__sfvwrite_r+0xf4>
   120fc:	80800917 	ldw	r2,36(r16)
   12100:	81400717 	ldw	r5,28(r16)
   12104:	05200034 	movhi	r20,32768
   12108:	0027883a 	mov	r19,zero
   1210c:	0025883a 	mov	r18,zero
   12110:	a53f0004 	addi	r20,r20,-1024
   12114:	980d883a 	mov	r6,r19
   12118:	a809883a 	mov	r4,r21
   1211c:	90001026 	beq	r18,zero,12160 <__sfvwrite_r+0xc4>
   12120:	900f883a 	mov	r7,r18
   12124:	a480012e 	bgeu	r20,r18,1212c <__sfvwrite_r+0x90>
   12128:	a00f883a 	mov	r7,r20
   1212c:	103ee83a 	callr	r2
   12130:	00807a0e 	bge	zero,r2,1231c <__sfvwrite_r+0x280>
   12134:	b9000217 	ldw	r4,8(r23)
   12138:	98a7883a 	add	r19,r19,r2
   1213c:	90a5c83a 	sub	r18,r18,r2
   12140:	2085c83a 	sub	r2,r4,r2
   12144:	b8800215 	stw	r2,8(r23)
   12148:	10006326 	beq	r2,zero,122d8 <__sfvwrite_r+0x23c>
   1214c:	80800917 	ldw	r2,36(r16)
   12150:	81400717 	ldw	r5,28(r16)
   12154:	980d883a 	mov	r6,r19
   12158:	a809883a 	mov	r4,r21
   1215c:	903ff01e 	bne	r18,zero,12120 <__sfvwrite_r+0x84>
   12160:	8cc00017 	ldw	r19,0(r17)
   12164:	8c800117 	ldw	r18,4(r17)
   12168:	8c400204 	addi	r17,r17,8
   1216c:	003fe906 	br	12114 <__sfvwrite_r+0x78>
   12170:	800b883a 	mov	r5,r16
   12174:	a809883a 	mov	r4,r21
   12178:	001370c0 	call	1370c <__swsetup_r>
   1217c:	1000f71e 	bne	r2,zero,1255c <__sfvwrite_r+0x4c0>
   12180:	81c0030b 	ldhu	r7,12(r16)
   12184:	bc400017 	ldw	r17,0(r23)
   12188:	3880008c 	andi	r2,r7,2
   1218c:	103fdb1e 	bne	r2,zero,120fc <__sfvwrite_r+0x60>
   12190:	3880004c 	andi	r2,r7,1
   12194:	84800217 	ldw	r18,8(r16)
   12198:	82000017 	ldw	r8,0(r16)
   1219c:	1000661e 	bne	r2,zero,12338 <__sfvwrite_r+0x29c>
   121a0:	00a00034 	movhi	r2,32768
   121a4:	10bfff84 	addi	r2,r2,-2
   121a8:	00e00034 	movhi	r3,32768
   121ac:	d8800015 	stw	r2,0(sp)
   121b0:	18bfffc4 	addi	r2,r3,-1
   121b4:	0039883a 	mov	fp,zero
   121b8:	0027883a 	mov	r19,zero
   121bc:	d8800115 	stw	r2,4(sp)
   121c0:	98004126 	beq	r19,zero,122c8 <__sfvwrite_r+0x22c>
   121c4:	3880800c 	andi	r2,r7,512
   121c8:	10009726 	beq	r2,zero,12428 <__sfvwrite_r+0x38c>
   121cc:	902d883a 	mov	r22,r18
   121d0:	9c80be36 	bltu	r19,r18,124cc <__sfvwrite_r+0x430>
   121d4:	3881200c 	andi	r2,r7,1152
   121d8:	10002626 	beq	r2,zero,12274 <__sfvwrite_r+0x1d8>
   121dc:	81800517 	ldw	r6,20(r16)
   121e0:	81400417 	ldw	r5,16(r16)
   121e4:	98800044 	addi	r2,r19,1
   121e8:	3189883a 	add	r4,r6,r6
   121ec:	2189883a 	add	r4,r4,r6
   121f0:	2028d7fa 	srli	r20,r4,31
   121f4:	4165c83a 	sub	r18,r8,r5
   121f8:	1485883a 	add	r2,r2,r18
   121fc:	a109883a 	add	r4,r20,r4
   12200:	2029d07a 	srai	r20,r4,1
   12204:	a00d883a 	mov	r6,r20
   12208:	a080022e 	bgeu	r20,r2,12214 <__sfvwrite_r+0x178>
   1220c:	1029883a 	mov	r20,r2
   12210:	100d883a 	mov	r6,r2
   12214:	39c1000c 	andi	r7,r7,1024
   12218:	3800c026 	beq	r7,zero,1251c <__sfvwrite_r+0x480>
   1221c:	a809883a 	mov	r4,r21
   12220:	300b883a 	mov	r5,r6
   12224:	00125640 	call	12564 <_malloc_r>
   12228:	1009883a 	mov	r4,r2
   1222c:	1000c726 	beq	r2,zero,1254c <__sfvwrite_r+0x4b0>
   12230:	81400417 	ldw	r5,16(r16)
   12234:	900d883a 	mov	r6,r18
   12238:	0012e8c0 	call	12e8c <memcpy>
   1223c:	1009883a 	mov	r4,r2
   12240:	8080030b 	ldhu	r2,12(r16)
   12244:	00fedfc4 	movi	r3,-1153
   12248:	10c4703a 	and	r2,r2,r3
   1224c:	10802014 	ori	r2,r2,128
   12250:	8080030d 	sth	r2,12(r16)
   12254:	2491883a 	add	r8,r4,r18
   12258:	a485c83a 	sub	r2,r20,r18
   1225c:	81000415 	stw	r4,16(r16)
   12260:	82000015 	stw	r8,0(r16)
   12264:	85000515 	stw	r20,20(r16)
   12268:	9825883a 	mov	r18,r19
   1226c:	80800215 	stw	r2,8(r16)
   12270:	982d883a 	mov	r22,r19
   12274:	4009883a 	mov	r4,r8
   12278:	b00d883a 	mov	r6,r22
   1227c:	e00b883a 	mov	r5,fp
   12280:	0012f8c0 	call	12f8c <memmove>
   12284:	81000217 	ldw	r4,8(r16)
   12288:	80800017 	ldw	r2,0(r16)
   1228c:	9829883a 	mov	r20,r19
   12290:	24a5c83a 	sub	r18,r4,r18
   12294:	1585883a 	add	r2,r2,r22
   12298:	84800215 	stw	r18,8(r16)
   1229c:	80800015 	stw	r2,0(r16)
   122a0:	0027883a 	mov	r19,zero
   122a4:	b8800217 	ldw	r2,8(r23)
   122a8:	e539883a 	add	fp,fp,r20
   122ac:	1529c83a 	sub	r20,r2,r20
   122b0:	bd000215 	stw	r20,8(r23)
   122b4:	a0000826 	beq	r20,zero,122d8 <__sfvwrite_r+0x23c>
   122b8:	81c0030b 	ldhu	r7,12(r16)
   122bc:	84800217 	ldw	r18,8(r16)
   122c0:	82000017 	ldw	r8,0(r16)
   122c4:	983fbf1e 	bne	r19,zero,121c4 <__sfvwrite_r+0x128>
   122c8:	8f000017 	ldw	fp,0(r17)
   122cc:	8cc00117 	ldw	r19,4(r17)
   122d0:	8c400204 	addi	r17,r17,8
   122d4:	003fba06 	br	121c0 <__sfvwrite_r+0x124>
   122d8:	0005883a 	mov	r2,zero
   122dc:	dfc00b17 	ldw	ra,44(sp)
   122e0:	df000a17 	ldw	fp,40(sp)
   122e4:	ddc00917 	ldw	r23,36(sp)
   122e8:	dd800817 	ldw	r22,32(sp)
   122ec:	dd400717 	ldw	r21,28(sp)
   122f0:	dd000617 	ldw	r20,24(sp)
   122f4:	dcc00517 	ldw	r19,20(sp)
   122f8:	dc800417 	ldw	r18,16(sp)
   122fc:	dc400317 	ldw	r17,12(sp)
   12300:	dc000217 	ldw	r16,8(sp)
   12304:	dec00c04 	addi	sp,sp,48
   12308:	f800283a 	ret
   1230c:	800b883a 	mov	r5,r16
   12310:	a809883a 	mov	r4,r21
   12314:	0013c480 	call	13c48 <_fflush_r>
   12318:	10002026 	beq	r2,zero,1239c <__sfvwrite_r+0x300>
   1231c:	8080030b 	ldhu	r2,12(r16)
   12320:	10801014 	ori	r2,r2,64
   12324:	8080030d 	sth	r2,12(r16)
   12328:	00bfffc4 	movi	r2,-1
   1232c:	003feb06 	br	122dc <__sfvwrite_r+0x240>
   12330:	0005883a 	mov	r2,zero
   12334:	f800283a 	ret
   12338:	002d883a 	mov	r22,zero
   1233c:	0027883a 	mov	r19,zero
   12340:	0005883a 	mov	r2,zero
   12344:	0039883a 	mov	fp,zero
   12348:	b0001d26 	beq	r22,zero,123c0 <__sfvwrite_r+0x324>
   1234c:	10002026 	beq	r2,zero,123d0 <__sfvwrite_r+0x334>
   12350:	9829883a 	mov	r20,r19
   12354:	b500012e 	bgeu	r22,r20,1235c <__sfvwrite_r+0x2c0>
   12358:	b029883a 	mov	r20,r22
   1235c:	80800417 	ldw	r2,16(r16)
   12360:	81c00517 	ldw	r7,20(r16)
   12364:	1200022e 	bgeu	r2,r8,12370 <__sfvwrite_r+0x2d4>
   12368:	3ca5883a 	add	r18,r7,r18
   1236c:	95002216 	blt	r18,r20,123f8 <__sfvwrite_r+0x35c>
   12370:	a1c05916 	blt	r20,r7,124d8 <__sfvwrite_r+0x43c>
   12374:	80800917 	ldw	r2,36(r16)
   12378:	81400717 	ldw	r5,28(r16)
   1237c:	e00d883a 	mov	r6,fp
   12380:	a809883a 	mov	r4,r21
   12384:	103ee83a 	callr	r2
   12388:	1025883a 	mov	r18,r2
   1238c:	00bfe30e 	bge	zero,r2,1231c <__sfvwrite_r+0x280>
   12390:	9ca7c83a 	sub	r19,r19,r18
   12394:	983fdd26 	beq	r19,zero,1230c <__sfvwrite_r+0x270>
   12398:	00800044 	movi	r2,1
   1239c:	b9800217 	ldw	r6,8(r23)
   123a0:	e4b9883a 	add	fp,fp,r18
   123a4:	b4adc83a 	sub	r22,r22,r18
   123a8:	34a5c83a 	sub	r18,r6,r18
   123ac:	bc800215 	stw	r18,8(r23)
   123b0:	903fc926 	beq	r18,zero,122d8 <__sfvwrite_r+0x23c>
   123b4:	84800217 	ldw	r18,8(r16)
   123b8:	82000017 	ldw	r8,0(r16)
   123bc:	b03fe31e 	bne	r22,zero,1234c <__sfvwrite_r+0x2b0>
   123c0:	8d800117 	ldw	r22,4(r17)
   123c4:	8f000017 	ldw	fp,0(r17)
   123c8:	8c400204 	addi	r17,r17,8
   123cc:	b03ffc26 	beq	r22,zero,123c0 <__sfvwrite_r+0x324>
   123d0:	b00d883a 	mov	r6,r22
   123d4:	01400284 	movi	r5,10
   123d8:	e009883a 	mov	r4,fp
   123dc:	da000015 	stw	r8,0(sp)
   123e0:	0012d440 	call	12d44 <memchr>
   123e4:	da000017 	ldw	r8,0(sp)
   123e8:	10004926 	beq	r2,zero,12510 <__sfvwrite_r+0x474>
   123ec:	10800044 	addi	r2,r2,1
   123f0:	1727c83a 	sub	r19,r2,fp
   123f4:	003fd606 	br	12350 <__sfvwrite_r+0x2b4>
   123f8:	e00b883a 	mov	r5,fp
   123fc:	4009883a 	mov	r4,r8
   12400:	900d883a 	mov	r6,r18
   12404:	0012f8c0 	call	12f8c <memmove>
   12408:	80800017 	ldw	r2,0(r16)
   1240c:	800b883a 	mov	r5,r16
   12410:	a809883a 	mov	r4,r21
   12414:	1485883a 	add	r2,r2,r18
   12418:	80800015 	stw	r2,0(r16)
   1241c:	0013c480 	call	13c48 <_fflush_r>
   12420:	103fdb26 	beq	r2,zero,12390 <__sfvwrite_r+0x2f4>
   12424:	003fbd06 	br	1231c <__sfvwrite_r+0x280>
   12428:	80800417 	ldw	r2,16(r16)
   1242c:	12001436 	bltu	r2,r8,12480 <__sfvwrite_r+0x3e4>
   12430:	85000517 	ldw	r20,20(r16)
   12434:	9d001236 	bltu	r19,r20,12480 <__sfvwrite_r+0x3e4>
   12438:	d8800017 	ldw	r2,0(sp)
   1243c:	14c0322e 	bgeu	r2,r19,12508 <__sfvwrite_r+0x46c>
   12440:	d9000117 	ldw	r4,4(sp)
   12444:	a00b883a 	mov	r5,r20
   12448:	0014e840 	call	14e84 <__divsi3>
   1244c:	a00b883a 	mov	r5,r20
   12450:	1009883a 	mov	r4,r2
   12454:	00150380 	call	15038 <__mulsi3>
   12458:	82000917 	ldw	r8,36(r16)
   1245c:	81400717 	ldw	r5,28(r16)
   12460:	100f883a 	mov	r7,r2
   12464:	e00d883a 	mov	r6,fp
   12468:	a809883a 	mov	r4,r21
   1246c:	403ee83a 	callr	r8
   12470:	1029883a 	mov	r20,r2
   12474:	00bfa90e 	bge	zero,r2,1231c <__sfvwrite_r+0x280>
   12478:	9d27c83a 	sub	r19,r19,r20
   1247c:	003f8906 	br	122a4 <__sfvwrite_r+0x208>
   12480:	9029883a 	mov	r20,r18
   12484:	9c80012e 	bgeu	r19,r18,1248c <__sfvwrite_r+0x3f0>
   12488:	9829883a 	mov	r20,r19
   1248c:	4009883a 	mov	r4,r8
   12490:	a00d883a 	mov	r6,r20
   12494:	e00b883a 	mov	r5,fp
   12498:	0012f8c0 	call	12f8c <memmove>
   1249c:	80800217 	ldw	r2,8(r16)
   124a0:	81000017 	ldw	r4,0(r16)
   124a4:	1505c83a 	sub	r2,r2,r20
   124a8:	2509883a 	add	r4,r4,r20
   124ac:	80800215 	stw	r2,8(r16)
   124b0:	81000015 	stw	r4,0(r16)
   124b4:	103ff01e 	bne	r2,zero,12478 <__sfvwrite_r+0x3dc>
   124b8:	800b883a 	mov	r5,r16
   124bc:	a809883a 	mov	r4,r21
   124c0:	0013c480 	call	13c48 <_fflush_r>
   124c4:	103fec26 	beq	r2,zero,12478 <__sfvwrite_r+0x3dc>
   124c8:	003f9406 	br	1231c <__sfvwrite_r+0x280>
   124cc:	9825883a 	mov	r18,r19
   124d0:	982d883a 	mov	r22,r19
   124d4:	003f6706 	br	12274 <__sfvwrite_r+0x1d8>
   124d8:	4009883a 	mov	r4,r8
   124dc:	a00d883a 	mov	r6,r20
   124e0:	e00b883a 	mov	r5,fp
   124e4:	0012f8c0 	call	12f8c <memmove>
   124e8:	81000217 	ldw	r4,8(r16)
   124ec:	80800017 	ldw	r2,0(r16)
   124f0:	a025883a 	mov	r18,r20
   124f4:	2509c83a 	sub	r4,r4,r20
   124f8:	1505883a 	add	r2,r2,r20
   124fc:	81000215 	stw	r4,8(r16)
   12500:	80800015 	stw	r2,0(r16)
   12504:	003fa206 	br	12390 <__sfvwrite_r+0x2f4>
   12508:	9809883a 	mov	r4,r19
   1250c:	003fcd06 	br	12444 <__sfvwrite_r+0x3a8>
   12510:	b5000044 	addi	r20,r22,1
   12514:	a027883a 	mov	r19,r20
   12518:	003f8e06 	br	12354 <__sfvwrite_r+0x2b8>
   1251c:	a809883a 	mov	r4,r21
   12520:	00130b80 	call	130b8 <_realloc_r>
   12524:	1009883a 	mov	r4,r2
   12528:	103f4a1e 	bne	r2,zero,12254 <__sfvwrite_r+0x1b8>
   1252c:	81400417 	ldw	r5,16(r16)
   12530:	a809883a 	mov	r4,r21
   12534:	00141f40 	call	141f4 <_free_r>
   12538:	8080030b 	ldhu	r2,12(r16)
   1253c:	00c00304 	movi	r3,12
   12540:	a8c00015 	stw	r3,0(r21)
   12544:	10bfdfcc 	andi	r2,r2,65407
   12548:	003f7506 	br	12320 <__sfvwrite_r+0x284>
   1254c:	00c00304 	movi	r3,12
   12550:	8080030b 	ldhu	r2,12(r16)
   12554:	a8c00015 	stw	r3,0(r21)
   12558:	003f7106 	br	12320 <__sfvwrite_r+0x284>
   1255c:	00bfffc4 	movi	r2,-1
   12560:	003f5e06 	br	122dc <__sfvwrite_r+0x240>

00012564 <_malloc_r>:
   12564:	defff604 	addi	sp,sp,-40
   12568:	dc400115 	stw	r17,4(sp)
   1256c:	2c4002c4 	addi	r17,r5,11
   12570:	dc800215 	stw	r18,8(sp)
   12574:	dfc00915 	stw	ra,36(sp)
   12578:	df000815 	stw	fp,32(sp)
   1257c:	ddc00715 	stw	r23,28(sp)
   12580:	dd800615 	stw	r22,24(sp)
   12584:	dd400515 	stw	r21,20(sp)
   12588:	dd000415 	stw	r20,16(sp)
   1258c:	dcc00315 	stw	r19,12(sp)
   12590:	dc000015 	stw	r16,0(sp)
   12594:	888005e8 	cmpgeui	r2,r17,23
   12598:	2025883a 	mov	r18,r4
   1259c:	10001b1e 	bne	r2,zero,1260c <_malloc_r+0xa8>
   125a0:	29400468 	cmpgeui	r5,r5,17
   125a4:	2800821e 	bne	r5,zero,127b0 <_malloc_r+0x24c>
   125a8:	00153980 	call	15398 <__malloc_lock>
   125ac:	04400404 	movi	r17,16
   125b0:	00800604 	movi	r2,24
   125b4:	01c00084 	movi	r7,2
   125b8:	04c00074 	movhi	r19,1
   125bc:	9cdb7404 	addi	r19,r19,28112
   125c0:	9885883a 	add	r2,r19,r2
   125c4:	14000117 	ldw	r16,4(r2)
   125c8:	10fffe04 	addi	r3,r2,-8
   125cc:	80c08b26 	beq	r16,r3,127fc <_malloc_r+0x298>
   125d0:	80800117 	ldw	r2,4(r16)
   125d4:	81000317 	ldw	r4,12(r16)
   125d8:	00ffff04 	movi	r3,-4
   125dc:	10c4703a 	and	r2,r2,r3
   125e0:	81400217 	ldw	r5,8(r16)
   125e4:	8085883a 	add	r2,r16,r2
   125e8:	10c00117 	ldw	r3,4(r2)
   125ec:	29000315 	stw	r4,12(r5)
   125f0:	21400215 	stw	r5,8(r4)
   125f4:	18c00054 	ori	r3,r3,1
   125f8:	10c00115 	stw	r3,4(r2)
   125fc:	9009883a 	mov	r4,r18
   12600:	00153bc0 	call	153bc <__malloc_unlock>
   12604:	80800204 	addi	r2,r16,8
   12608:	00006c06 	br	127bc <_malloc_r+0x258>
   1260c:	00bffe04 	movi	r2,-8
   12610:	88a2703a 	and	r17,r17,r2
   12614:	88006616 	blt	r17,zero,127b0 <_malloc_r+0x24c>
   12618:	89406536 	bltu	r17,r5,127b0 <_malloc_r+0x24c>
   1261c:	00153980 	call	15398 <__malloc_lock>
   12620:	88807e28 	cmpgeui	r2,r17,504
   12624:	10012226 	beq	r2,zero,12ab0 <_malloc_r+0x54c>
   12628:	8804d27a 	srli	r2,r17,9
   1262c:	10006f26 	beq	r2,zero,127ec <_malloc_r+0x288>
   12630:	10c00168 	cmpgeui	r3,r2,5
   12634:	1800fe1e 	bne	r3,zero,12a30 <_malloc_r+0x4cc>
   12638:	8804d1ba 	srli	r2,r17,6
   1263c:	11c00e44 	addi	r7,r2,57
   12640:	380890fa 	slli	r4,r7,3
   12644:	12000e04 	addi	r8,r2,56
   12648:	04c00074 	movhi	r19,1
   1264c:	9cdb7404 	addi	r19,r19,28112
   12650:	9909883a 	add	r4,r19,r4
   12654:	24000117 	ldw	r16,4(r4)
   12658:	213ffe04 	addi	r4,r4,-8
   1265c:	24000b26 	beq	r4,r16,1268c <_malloc_r+0x128>
   12660:	01bfff04 	movi	r6,-4
   12664:	00000306 	br	12674 <_malloc_r+0x110>
   12668:	1800d60e 	bge	r3,zero,129c4 <_malloc_r+0x460>
   1266c:	84000317 	ldw	r16,12(r16)
   12670:	24000626 	beq	r4,r16,1268c <_malloc_r+0x128>
   12674:	80800117 	ldw	r2,4(r16)
   12678:	1184703a 	and	r2,r2,r6
   1267c:	1447c83a 	sub	r3,r2,r17
   12680:	19400408 	cmpgei	r5,r3,16
   12684:	283ff826 	beq	r5,zero,12668 <_malloc_r+0x104>
   12688:	400f883a 	mov	r7,r8
   1268c:	9c000417 	ldw	r16,16(r19)
   12690:	02400074 	movhi	r9,1
   12694:	4a5b7604 	addi	r9,r9,28120
   12698:	82405f26 	beq	r16,r9,12818 <_malloc_r+0x2b4>
   1269c:	80c00117 	ldw	r3,4(r16)
   126a0:	00bfff04 	movi	r2,-4
   126a4:	1884703a 	and	r2,r3,r2
   126a8:	1447c83a 	sub	r3,r2,r17
   126ac:	19000410 	cmplti	r4,r3,16
   126b0:	20010a26 	beq	r4,zero,12adc <_malloc_r+0x578>
   126b4:	9a400515 	stw	r9,20(r19)
   126b8:	9a400415 	stw	r9,16(r19)
   126bc:	1800ff0e 	bge	r3,zero,12abc <_malloc_r+0x558>
   126c0:	10c08028 	cmpgeui	r3,r2,512
   126c4:	1800c11e 	bne	r3,zero,129cc <_malloc_r+0x468>
   126c8:	1006d0fa 	srli	r3,r2,3
   126cc:	1008d17a 	srli	r4,r2,5
   126d0:	00800044 	movi	r2,1
   126d4:	18c00044 	addi	r3,r3,1
   126d8:	180690fa 	slli	r3,r3,3
   126dc:	99400117 	ldw	r5,4(r19)
   126e0:	1104983a 	sll	r2,r2,r4
   126e4:	98c7883a 	add	r3,r19,r3
   126e8:	19000017 	ldw	r4,0(r3)
   126ec:	1144b03a 	or	r2,r2,r5
   126f0:	197ffe04 	addi	r5,r3,-8
   126f4:	81400315 	stw	r5,12(r16)
   126f8:	81000215 	stw	r4,8(r16)
   126fc:	98800115 	stw	r2,4(r19)
   12700:	1c000015 	stw	r16,0(r3)
   12704:	24000315 	stw	r16,12(r4)
   12708:	3807d0ba 	srai	r3,r7,2
   1270c:	01000044 	movi	r4,1
   12710:	20c8983a 	sll	r4,r4,r3
   12714:	11004536 	bltu	r2,r4,1282c <_malloc_r+0x2c8>
   12718:	2086703a 	and	r3,r4,r2
   1271c:	18000a1e 	bne	r3,zero,12748 <_malloc_r+0x1e4>
   12720:	00ffff04 	movi	r3,-4
   12724:	2109883a 	add	r4,r4,r4
   12728:	38ce703a 	and	r7,r7,r3
   1272c:	2086703a 	and	r3,r4,r2
   12730:	39c00104 	addi	r7,r7,4
   12734:	1800041e 	bne	r3,zero,12748 <_malloc_r+0x1e4>
   12738:	2109883a 	add	r4,r4,r4
   1273c:	2086703a 	and	r3,r4,r2
   12740:	39c00104 	addi	r7,r7,4
   12744:	183ffc26 	beq	r3,zero,12738 <_malloc_r+0x1d4>
   12748:	02bfff04 	movi	r10,-4
   1274c:	381690fa 	slli	r11,r7,3
   12750:	3819883a 	mov	r12,r7
   12754:	9ad7883a 	add	r11,r19,r11
   12758:	5811883a 	mov	r8,r11
   1275c:	40800317 	ldw	r2,12(r8)
   12760:	4080bc26 	beq	r8,r2,12a54 <_malloc_r+0x4f0>
   12764:	10c00117 	ldw	r3,4(r2)
   12768:	1021883a 	mov	r16,r2
   1276c:	10800317 	ldw	r2,12(r2)
   12770:	1a86703a 	and	r3,r3,r10
   12774:	1c4bc83a 	sub	r5,r3,r17
   12778:	29800410 	cmplti	r6,r5,16
   1277c:	3000ba26 	beq	r6,zero,12a68 <_malloc_r+0x504>
   12780:	283ff716 	blt	r5,zero,12760 <_malloc_r+0x1fc>
   12784:	80c7883a 	add	r3,r16,r3
   12788:	19400117 	ldw	r5,4(r3)
   1278c:	81800217 	ldw	r6,8(r16)
   12790:	9009883a 	mov	r4,r18
   12794:	29400054 	ori	r5,r5,1
   12798:	19400115 	stw	r5,4(r3)
   1279c:	30800315 	stw	r2,12(r6)
   127a0:	11800215 	stw	r6,8(r2)
   127a4:	00153bc0 	call	153bc <__malloc_unlock>
   127a8:	80800204 	addi	r2,r16,8
   127ac:	00000306 	br	127bc <_malloc_r+0x258>
   127b0:	00800304 	movi	r2,12
   127b4:	90800015 	stw	r2,0(r18)
   127b8:	0005883a 	mov	r2,zero
   127bc:	dfc00917 	ldw	ra,36(sp)
   127c0:	df000817 	ldw	fp,32(sp)
   127c4:	ddc00717 	ldw	r23,28(sp)
   127c8:	dd800617 	ldw	r22,24(sp)
   127cc:	dd400517 	ldw	r21,20(sp)
   127d0:	dd000417 	ldw	r20,16(sp)
   127d4:	dcc00317 	ldw	r19,12(sp)
   127d8:	dc800217 	ldw	r18,8(sp)
   127dc:	dc400117 	ldw	r17,4(sp)
   127e0:	dc000017 	ldw	r16,0(sp)
   127e4:	dec00a04 	addi	sp,sp,40
   127e8:	f800283a 	ret
   127ec:	01008004 	movi	r4,512
   127f0:	01c01004 	movi	r7,64
   127f4:	02000fc4 	movi	r8,63
   127f8:	003f9306 	br	12648 <_malloc_r+0xe4>
   127fc:	14000317 	ldw	r16,12(r2)
   12800:	39c00084 	addi	r7,r7,2
   12804:	143f721e 	bne	r2,r16,125d0 <_malloc_r+0x6c>
   12808:	9c000417 	ldw	r16,16(r19)
   1280c:	02400074 	movhi	r9,1
   12810:	4a5b7604 	addi	r9,r9,28120
   12814:	827fa11e 	bne	r16,r9,1269c <_malloc_r+0x138>
   12818:	3807d0ba 	srai	r3,r7,2
   1281c:	01000044 	movi	r4,1
   12820:	98800117 	ldw	r2,4(r19)
   12824:	20c8983a 	sll	r4,r4,r3
   12828:	113fbb2e 	bgeu	r2,r4,12718 <_malloc_r+0x1b4>
   1282c:	9c000217 	ldw	r16,8(r19)
   12830:	00bfff04 	movi	r2,-4
   12834:	85400117 	ldw	r21,4(r16)
   12838:	a8ac703a 	and	r22,r21,r2
   1283c:	b4400336 	bltu	r22,r17,1284c <_malloc_r+0x2e8>
   12840:	b445c83a 	sub	r2,r22,r17
   12844:	10c00408 	cmpgei	r3,r2,16
   12848:	1800541e 	bne	r3,zero,1299c <_malloc_r+0x438>
   1284c:	00800074 	movhi	r2,1
   12850:	109c8117 	ldw	r2,29188(r2)
   12854:	00c000b4 	movhi	r3,2
   12858:	1d633417 	ldw	r21,-29488(r3)
   1285c:	10bfffd8 	cmpnei	r2,r2,-1
   12860:	85b9883a 	add	fp,r16,r22
   12864:	8d6b883a 	add	r21,r17,r21
   12868:	1000d626 	beq	r2,zero,12bc4 <_malloc_r+0x660>
   1286c:	ad4403c4 	addi	r21,r21,4111
   12870:	00bc0004 	movi	r2,-4096
   12874:	a8aa703a 	and	r21,r21,r2
   12878:	a80b883a 	mov	r5,r21
   1287c:	9009883a 	mov	r4,r18
   12880:	001361c0 	call	1361c <_sbrk_r>
   12884:	102f883a 	mov	r23,r2
   12888:	10bfffd8 	cmpnei	r2,r2,-1
   1288c:	1000a826 	beq	r2,zero,12b30 <_malloc_r+0x5cc>
   12890:	bf00a636 	bltu	r23,fp,12b2c <_malloc_r+0x5c8>
   12894:	008000b4 	movhi	r2,2
   12898:	15237517 	ldw	r20,-29228(r2)
   1289c:	ad29883a 	add	r20,r21,r20
   128a0:	15237515 	stw	r20,-29228(r2)
   128a4:	a007883a 	mov	r3,r20
   128a8:	e5c0ec26 	beq	fp,r23,12c5c <_malloc_r+0x6f8>
   128ac:	00800074 	movhi	r2,1
   128b0:	109c8117 	ldw	r2,29188(r2)
   128b4:	10bfffd8 	cmpnei	r2,r2,-1
   128b8:	1000ef26 	beq	r2,zero,12c78 <_malloc_r+0x714>
   128bc:	bf39c83a 	sub	fp,r23,fp
   128c0:	e0c7883a 	add	r3,fp,r3
   128c4:	008000b4 	movhi	r2,2
   128c8:	10e37515 	stw	r3,-29228(r2)
   128cc:	bf0001cc 	andi	fp,r23,7
   128d0:	e000c526 	beq	fp,zero,12be8 <_malloc_r+0x684>
   128d4:	bf2fc83a 	sub	r23,r23,fp
   128d8:	bdc00204 	addi	r23,r23,8
   128dc:	05040204 	movi	r20,4104
   128e0:	a729c83a 	sub	r20,r20,fp
   128e4:	bd6b883a 	add	r21,r23,r21
   128e8:	a569c83a 	sub	r20,r20,r21
   128ec:	a503ffcc 	andi	r20,r20,4095
   128f0:	a00b883a 	mov	r5,r20
   128f4:	9009883a 	mov	r4,r18
   128f8:	001361c0 	call	1361c <_sbrk_r>
   128fc:	10ffffe0 	cmpeqi	r3,r2,-1
   12900:	1800f31e 	bne	r3,zero,12cd0 <_malloc_r+0x76c>
   12904:	15c5c83a 	sub	r2,r2,r23
   12908:	152b883a 	add	r21,r2,r20
   1290c:	008000b4 	movhi	r2,2
   12910:	11637517 	ldw	r5,-29228(r2)
   12914:	9dc00215 	stw	r23,8(r19)
   12918:	ad400054 	ori	r21,r21,1
   1291c:	a169883a 	add	r20,r20,r5
   12920:	15237515 	stw	r20,-29228(r2)
   12924:	bd400115 	stw	r21,4(r23)
   12928:	84c0d626 	beq	r16,r19,12c84 <_malloc_r+0x720>
   1292c:	b0800428 	cmpgeui	r2,r22,16
   12930:	1000d626 	beq	r2,zero,12c8c <_malloc_r+0x728>
   12934:	80c00117 	ldw	r3,4(r16)
   12938:	013ffe04 	movi	r4,-8
   1293c:	b0bffd04 	addi	r2,r22,-12
   12940:	1104703a 	and	r2,r2,r4
   12944:	18c0004c 	andi	r3,r3,1
   12948:	1886b03a 	or	r3,r3,r2
   1294c:	80c00115 	stw	r3,4(r16)
   12950:	01000144 	movi	r4,5
   12954:	8087883a 	add	r3,r16,r2
   12958:	19000115 	stw	r4,4(r3)
   1295c:	19000215 	stw	r4,8(r3)
   12960:	10800428 	cmpgeui	r2,r2,16
   12964:	1000df1e 	bne	r2,zero,12ce4 <_malloc_r+0x780>
   12968:	bd400117 	ldw	r21,4(r23)
   1296c:	b821883a 	mov	r16,r23
   12970:	008000b4 	movhi	r2,2
   12974:	10a33317 	ldw	r2,-29492(r2)
   12978:	1500022e 	bgeu	r2,r20,12984 <_malloc_r+0x420>
   1297c:	008000b4 	movhi	r2,2
   12980:	15233315 	stw	r20,-29492(r2)
   12984:	008000b4 	movhi	r2,2
   12988:	10a33217 	ldw	r2,-29496(r2)
   1298c:	15006a2e 	bgeu	r2,r20,12b38 <_malloc_r+0x5d4>
   12990:	008000b4 	movhi	r2,2
   12994:	15233215 	stw	r20,-29496(r2)
   12998:	00006706 	br	12b38 <_malloc_r+0x5d4>
   1299c:	88c00054 	ori	r3,r17,1
   129a0:	80c00115 	stw	r3,4(r16)
   129a4:	8463883a 	add	r17,r16,r17
   129a8:	10800054 	ori	r2,r2,1
   129ac:	9c400215 	stw	r17,8(r19)
   129b0:	88800115 	stw	r2,4(r17)
   129b4:	9009883a 	mov	r4,r18
   129b8:	00153bc0 	call	153bc <__malloc_unlock>
   129bc:	80800204 	addi	r2,r16,8
   129c0:	003f7e06 	br	127bc <_malloc_r+0x258>
   129c4:	81000317 	ldw	r4,12(r16)
   129c8:	003f0506 	br	125e0 <_malloc_r+0x7c>
   129cc:	1006d27a 	srli	r3,r2,9
   129d0:	19000168 	cmpgeui	r4,r3,5
   129d4:	20005026 	beq	r4,zero,12b18 <_malloc_r+0x5b4>
   129d8:	19000568 	cmpgeui	r4,r3,21
   129dc:	20008c1e 	bne	r4,zero,12c10 <_malloc_r+0x6ac>
   129e0:	19401704 	addi	r5,r3,92
   129e4:	280a90fa 	slli	r5,r5,3
   129e8:	190016c4 	addi	r4,r3,91
   129ec:	994b883a 	add	r5,r19,r5
   129f0:	28c00017 	ldw	r3,0(r5)
   129f4:	297ffe04 	addi	r5,r5,-8
   129f8:	28c07426 	beq	r5,r3,12bcc <_malloc_r+0x668>
   129fc:	01bfff04 	movi	r6,-4
   12a00:	19000117 	ldw	r4,4(r3)
   12a04:	2188703a 	and	r4,r4,r6
   12a08:	1100022e 	bgeu	r2,r4,12a14 <_malloc_r+0x4b0>
   12a0c:	18c00217 	ldw	r3,8(r3)
   12a10:	28fffb1e 	bne	r5,r3,12a00 <_malloc_r+0x49c>
   12a14:	19400317 	ldw	r5,12(r3)
   12a18:	98800117 	ldw	r2,4(r19)
   12a1c:	81400315 	stw	r5,12(r16)
   12a20:	80c00215 	stw	r3,8(r16)
   12a24:	2c000215 	stw	r16,8(r5)
   12a28:	1c000315 	stw	r16,12(r3)
   12a2c:	003f3606 	br	12708 <_malloc_r+0x1a4>
   12a30:	10c00568 	cmpgeui	r3,r2,21
   12a34:	18004a26 	beq	r3,zero,12b60 <_malloc_r+0x5fc>
   12a38:	10c01568 	cmpgeui	r3,r2,85
   12a3c:	18007b1e 	bne	r3,zero,12c2c <_malloc_r+0x6c8>
   12a40:	8804d33a 	srli	r2,r17,12
   12a44:	11c01bc4 	addi	r7,r2,111
   12a48:	380890fa 	slli	r4,r7,3
   12a4c:	12001b84 	addi	r8,r2,110
   12a50:	003efd06 	br	12648 <_malloc_r+0xe4>
   12a54:	63000044 	addi	r12,r12,1
   12a58:	608000cc 	andi	r2,r12,3
   12a5c:	42000204 	addi	r8,r8,8
   12a60:	103f3e1e 	bne	r2,zero,1275c <_malloc_r+0x1f8>
   12a64:	00004506 	br	12b7c <_malloc_r+0x618>
   12a68:	81000217 	ldw	r4,8(r16)
   12a6c:	89800054 	ori	r6,r17,1
   12a70:	81800115 	stw	r6,4(r16)
   12a74:	20800315 	stw	r2,12(r4)
   12a78:	11000215 	stw	r4,8(r2)
   12a7c:	8463883a 	add	r17,r16,r17
   12a80:	9c400515 	stw	r17,20(r19)
   12a84:	9c400415 	stw	r17,16(r19)
   12a88:	28800054 	ori	r2,r5,1
   12a8c:	88800115 	stw	r2,4(r17)
   12a90:	8a400315 	stw	r9,12(r17)
   12a94:	8a400215 	stw	r9,8(r17)
   12a98:	80c7883a 	add	r3,r16,r3
   12a9c:	19400015 	stw	r5,0(r3)
   12aa0:	9009883a 	mov	r4,r18
   12aa4:	00153bc0 	call	153bc <__malloc_unlock>
   12aa8:	80800204 	addi	r2,r16,8
   12aac:	003f4306 	br	127bc <_malloc_r+0x258>
   12ab0:	880ed0fa 	srli	r7,r17,3
   12ab4:	88800204 	addi	r2,r17,8
   12ab8:	003ebf06 	br	125b8 <_malloc_r+0x54>
   12abc:	8085883a 	add	r2,r16,r2
   12ac0:	10c00117 	ldw	r3,4(r2)
   12ac4:	9009883a 	mov	r4,r18
   12ac8:	18c00054 	ori	r3,r3,1
   12acc:	10c00115 	stw	r3,4(r2)
   12ad0:	00153bc0 	call	153bc <__malloc_unlock>
   12ad4:	80800204 	addi	r2,r16,8
   12ad8:	003f3806 	br	127bc <_malloc_r+0x258>
   12adc:	89000054 	ori	r4,r17,1
   12ae0:	81000115 	stw	r4,4(r16)
   12ae4:	8463883a 	add	r17,r16,r17
   12ae8:	9c400515 	stw	r17,20(r19)
   12aec:	9c400415 	stw	r17,16(r19)
   12af0:	19000054 	ori	r4,r3,1
   12af4:	89000115 	stw	r4,4(r17)
   12af8:	8085883a 	add	r2,r16,r2
   12afc:	8a400315 	stw	r9,12(r17)
   12b00:	8a400215 	stw	r9,8(r17)
   12b04:	10c00015 	stw	r3,0(r2)
   12b08:	9009883a 	mov	r4,r18
   12b0c:	00153bc0 	call	153bc <__malloc_unlock>
   12b10:	80800204 	addi	r2,r16,8
   12b14:	003f2906 	br	127bc <_malloc_r+0x258>
   12b18:	1006d1ba 	srli	r3,r2,6
   12b1c:	19400e44 	addi	r5,r3,57
   12b20:	280a90fa 	slli	r5,r5,3
   12b24:	19000e04 	addi	r4,r3,56
   12b28:	003fb006 	br	129ec <_malloc_r+0x488>
   12b2c:	84c04626 	beq	r16,r19,12c48 <_malloc_r+0x6e4>
   12b30:	9c000217 	ldw	r16,8(r19)
   12b34:	85400117 	ldw	r21,4(r16)
   12b38:	00bfff04 	movi	r2,-4
   12b3c:	a8aa703a 	and	r21,r21,r2
   12b40:	ac45c83a 	sub	r2,r21,r17
   12b44:	ac400236 	bltu	r21,r17,12b50 <_malloc_r+0x5ec>
   12b48:	10c00408 	cmpgei	r3,r2,16
   12b4c:	183f931e 	bne	r3,zero,1299c <_malloc_r+0x438>
   12b50:	9009883a 	mov	r4,r18
   12b54:	00153bc0 	call	153bc <__malloc_unlock>
   12b58:	0005883a 	mov	r2,zero
   12b5c:	003f1706 	br	127bc <_malloc_r+0x258>
   12b60:	11c01704 	addi	r7,r2,92
   12b64:	380890fa 	slli	r4,r7,3
   12b68:	120016c4 	addi	r8,r2,91
   12b6c:	003eb606 	br	12648 <_malloc_r+0xe4>
   12b70:	58800217 	ldw	r2,8(r11)
   12b74:	39ffffc4 	addi	r7,r7,-1
   12b78:	12c0701e 	bne	r2,r11,12d3c <_malloc_r+0x7d8>
   12b7c:	388000cc 	andi	r2,r7,3
   12b80:	5afffe04 	addi	r11,r11,-8
   12b84:	103ffa1e 	bne	r2,zero,12b70 <_malloc_r+0x60c>
   12b88:	98c00117 	ldw	r3,4(r19)
   12b8c:	0104303a 	nor	r2,zero,r4
   12b90:	10c4703a 	and	r2,r2,r3
   12b94:	98800115 	stw	r2,4(r19)
   12b98:	2109883a 	add	r4,r4,r4
   12b9c:	113f2336 	bltu	r2,r4,1282c <_malloc_r+0x2c8>
   12ba0:	203f2226 	beq	r4,zero,1282c <_malloc_r+0x2c8>
   12ba4:	2086703a 	and	r3,r4,r2
   12ba8:	1800041e 	bne	r3,zero,12bbc <_malloc_r+0x658>
   12bac:	2109883a 	add	r4,r4,r4
   12bb0:	2086703a 	and	r3,r4,r2
   12bb4:	63000104 	addi	r12,r12,4
   12bb8:	183ffc26 	beq	r3,zero,12bac <_malloc_r+0x648>
   12bbc:	600f883a 	mov	r7,r12
   12bc0:	003ee206 	br	1274c <_malloc_r+0x1e8>
   12bc4:	ad400404 	addi	r21,r21,16
   12bc8:	003f2b06 	br	12878 <_malloc_r+0x314>
   12bcc:	2009d0ba 	srai	r4,r4,2
   12bd0:	00800044 	movi	r2,1
   12bd4:	99800117 	ldw	r6,4(r19)
   12bd8:	1104983a 	sll	r2,r2,r4
   12bdc:	1184b03a 	or	r2,r2,r6
   12be0:	98800115 	stw	r2,4(r19)
   12be4:	003f8d06 	br	12a1c <_malloc_r+0x4b8>
   12be8:	bd69883a 	add	r20,r23,r21
   12bec:	0529c83a 	sub	r20,zero,r20
   12bf0:	a503ffcc 	andi	r20,r20,4095
   12bf4:	a00b883a 	mov	r5,r20
   12bf8:	9009883a 	mov	r4,r18
   12bfc:	001361c0 	call	1361c <_sbrk_r>
   12c00:	10ffffe0 	cmpeqi	r3,r2,-1
   12c04:	183f3f26 	beq	r3,zero,12904 <_malloc_r+0x3a0>
   12c08:	0029883a 	mov	r20,zero
   12c0c:	003f3f06 	br	1290c <_malloc_r+0x3a8>
   12c10:	19001568 	cmpgeui	r4,r3,85
   12c14:	2000201e 	bne	r4,zero,12c98 <_malloc_r+0x734>
   12c18:	1006d33a 	srli	r3,r2,12
   12c1c:	19401bc4 	addi	r5,r3,111
   12c20:	280a90fa 	slli	r5,r5,3
   12c24:	19001b84 	addi	r4,r3,110
   12c28:	003f7006 	br	129ec <_malloc_r+0x488>
   12c2c:	10c05568 	cmpgeui	r3,r2,341
   12c30:	1800201e 	bne	r3,zero,12cb4 <_malloc_r+0x750>
   12c34:	8804d3fa 	srli	r2,r17,15
   12c38:	11c01e04 	addi	r7,r2,120
   12c3c:	380890fa 	slli	r4,r7,3
   12c40:	12001dc4 	addi	r8,r2,119
   12c44:	003e8006 	br	12648 <_malloc_r+0xe4>
   12c48:	008000b4 	movhi	r2,2
   12c4c:	10e37517 	ldw	r3,-29228(r2)
   12c50:	a8c7883a 	add	r3,r21,r3
   12c54:	10e37515 	stw	r3,-29228(r2)
   12c58:	003f1406 	br	128ac <_malloc_r+0x348>
   12c5c:	e083ffcc 	andi	r2,fp,4095
   12c60:	103f121e 	bne	r2,zero,128ac <_malloc_r+0x348>
   12c64:	9c000217 	ldw	r16,8(r19)
   12c68:	b56b883a 	add	r21,r22,r21
   12c6c:	ad400054 	ori	r21,r21,1
   12c70:	85400115 	stw	r21,4(r16)
   12c74:	003f3e06 	br	12970 <_malloc_r+0x40c>
   12c78:	00800074 	movhi	r2,1
   12c7c:	15dc8115 	stw	r23,29188(r2)
   12c80:	003f1206 	br	128cc <_malloc_r+0x368>
   12c84:	b821883a 	mov	r16,r23
   12c88:	003f3906 	br	12970 <_malloc_r+0x40c>
   12c8c:	00800044 	movi	r2,1
   12c90:	b8800115 	stw	r2,4(r23)
   12c94:	003fae06 	br	12b50 <_malloc_r+0x5ec>
   12c98:	19005568 	cmpgeui	r4,r3,341
   12c9c:	2000191e 	bne	r4,zero,12d04 <_malloc_r+0x7a0>
   12ca0:	1006d3fa 	srli	r3,r2,15
   12ca4:	19401e04 	addi	r5,r3,120
   12ca8:	280a90fa 	slli	r5,r5,3
   12cac:	19001dc4 	addi	r4,r3,119
   12cb0:	003f4e06 	br	129ec <_malloc_r+0x488>
   12cb4:	10815568 	cmpgeui	r2,r2,1365
   12cb8:	1000191e 	bne	r2,zero,12d20 <_malloc_r+0x7bc>
   12cbc:	8804d4ba 	srli	r2,r17,18
   12cc0:	11c01f44 	addi	r7,r2,125
   12cc4:	380890fa 	slli	r4,r7,3
   12cc8:	12001f04 	addi	r8,r2,124
   12ccc:	003e5e06 	br	12648 <_malloc_r+0xe4>
   12cd0:	e73ffe04 	addi	fp,fp,-8
   12cd4:	af2b883a 	add	r21,r21,fp
   12cd8:	adebc83a 	sub	r21,r21,r23
   12cdc:	0029883a 	mov	r20,zero
   12ce0:	003f0a06 	br	1290c <_malloc_r+0x3a8>
   12ce4:	81400204 	addi	r5,r16,8
   12ce8:	9009883a 	mov	r4,r18
   12cec:	00141f40 	call	141f4 <_free_r>
   12cf0:	9c000217 	ldw	r16,8(r19)
   12cf4:	008000b4 	movhi	r2,2
   12cf8:	15237517 	ldw	r20,-29228(r2)
   12cfc:	85400117 	ldw	r21,4(r16)
   12d00:	003f1b06 	br	12970 <_malloc_r+0x40c>
   12d04:	18c15568 	cmpgeui	r3,r3,1365
   12d08:	1800091e 	bne	r3,zero,12d30 <_malloc_r+0x7cc>
   12d0c:	1006d4ba 	srli	r3,r2,18
   12d10:	19401f44 	addi	r5,r3,125
   12d14:	280a90fa 	slli	r5,r5,3
   12d18:	19001f04 	addi	r4,r3,124
   12d1c:	003f3306 	br	129ec <_malloc_r+0x488>
   12d20:	0100fe04 	movi	r4,1016
   12d24:	01c01fc4 	movi	r7,127
   12d28:	02001f84 	movi	r8,126
   12d2c:	003e4606 	br	12648 <_malloc_r+0xe4>
   12d30:	0140fe04 	movi	r5,1016
   12d34:	01001f84 	movi	r4,126
   12d38:	003f2c06 	br	129ec <_malloc_r+0x488>
   12d3c:	98800117 	ldw	r2,4(r19)
   12d40:	003f9506 	br	12b98 <_malloc_r+0x634>

00012d44 <memchr>:
   12d44:	208000cc 	andi	r2,r4,3
   12d48:	280f883a 	mov	r7,r5
   12d4c:	10000e26 	beq	r2,zero,12d88 <memchr+0x44>
   12d50:	30bfffc4 	addi	r2,r6,-1
   12d54:	30001726 	beq	r6,zero,12db4 <memchr+0x70>
   12d58:	29803fcc 	andi	r6,r5,255
   12d5c:	00000606 	br	12d78 <memchr+0x34>
   12d60:	21000044 	addi	r4,r4,1
   12d64:	20c000cc 	andi	r3,r4,3
   12d68:	18000826 	beq	r3,zero,12d8c <memchr+0x48>
   12d6c:	10bfffc4 	addi	r2,r2,-1
   12d70:	10ffffe0 	cmpeqi	r3,r2,-1
   12d74:	18000f1e 	bne	r3,zero,12db4 <memchr+0x70>
   12d78:	20c00003 	ldbu	r3,0(r4)
   12d7c:	19bff81e 	bne	r3,r6,12d60 <memchr+0x1c>
   12d80:	2005883a 	mov	r2,r4
   12d84:	f800283a 	ret
   12d88:	3005883a 	mov	r2,r6
   12d8c:	10c00128 	cmpgeui	r3,r2,4
   12d90:	18000a1e 	bne	r3,zero,12dbc <memchr+0x78>
   12d94:	10001e26 	beq	r2,zero,12e10 <memchr+0xcc>
   12d98:	2087883a 	add	r3,r4,r2
   12d9c:	39803fcc 	andi	r6,r7,255
   12da0:	2005883a 	mov	r2,r4
   12da4:	11000003 	ldbu	r4,0(r2)
   12da8:	21bff626 	beq	r4,r6,12d84 <memchr+0x40>
   12dac:	10800044 	addi	r2,r2,1
   12db0:	18bffc1e 	bne	r3,r2,12da4 <memchr+0x60>
   12db4:	0005883a 	mov	r2,zero
   12db8:	f800283a 	ret
   12dbc:	29403fcc 	andi	r5,r5,255
   12dc0:	280c923a 	slli	r6,r5,8
   12dc4:	027fbff4 	movhi	r9,65279
   12dc8:	02202074 	movhi	r8,32897
   12dcc:	314ab03a 	or	r5,r6,r5
   12dd0:	280c943a 	slli	r6,r5,16
   12dd4:	4a7fbfc4 	addi	r9,r9,-257
   12dd8:	42202004 	addi	r8,r8,-32640
   12ddc:	314cb03a 	or	r6,r6,r5
   12de0:	20c00017 	ldw	r3,0(r4)
   12de4:	30c6f03a 	xor	r3,r6,r3
   12de8:	1a4b883a 	add	r5,r3,r9
   12dec:	00c6303a 	nor	r3,zero,r3
   12df0:	28c6703a 	and	r3,r5,r3
   12df4:	1a06703a 	and	r3,r3,r8
   12df8:	183fe71e 	bne	r3,zero,12d98 <memchr+0x54>
   12dfc:	10bfff04 	addi	r2,r2,-4
   12e00:	10c00128 	cmpgeui	r3,r2,4
   12e04:	21000104 	addi	r4,r4,4
   12e08:	183ff51e 	bne	r3,zero,12de0 <memchr+0x9c>
   12e0c:	003fe106 	br	12d94 <memchr+0x50>
   12e10:	f800283a 	ret

00012e14 <memcmp>:
   12e14:	30800130 	cmpltui	r2,r6,4
   12e18:	10000b1e 	bne	r2,zero,12e48 <memcmp+0x34>
   12e1c:	2144b03a 	or	r2,r4,r5
   12e20:	108000cc 	andi	r2,r2,3
   12e24:	1000171e 	bne	r2,zero,12e84 <memcmp+0x70>
   12e28:	20c00017 	ldw	r3,0(r4)
   12e2c:	28800017 	ldw	r2,0(r5)
   12e30:	1880141e 	bne	r3,r2,12e84 <memcmp+0x70>
   12e34:	31bfff04 	addi	r6,r6,-4
   12e38:	30800128 	cmpgeui	r2,r6,4
   12e3c:	21000104 	addi	r4,r4,4
   12e40:	29400104 	addi	r5,r5,4
   12e44:	103ff81e 	bne	r2,zero,12e28 <memcmp+0x14>
   12e48:	30bfffc4 	addi	r2,r6,-1
   12e4c:	30000b26 	beq	r6,zero,12e7c <memcmp+0x68>
   12e50:	11800044 	addi	r6,r2,1
   12e54:	218d883a 	add	r6,r4,r6
   12e58:	00000106 	br	12e60 <memcmp+0x4c>
   12e5c:	21800726 	beq	r4,r6,12e7c <memcmp+0x68>
   12e60:	20800003 	ldbu	r2,0(r4)
   12e64:	28c00003 	ldbu	r3,0(r5)
   12e68:	21000044 	addi	r4,r4,1
   12e6c:	29400044 	addi	r5,r5,1
   12e70:	10fffa26 	beq	r2,r3,12e5c <memcmp+0x48>
   12e74:	10c5c83a 	sub	r2,r2,r3
   12e78:	f800283a 	ret
   12e7c:	0005883a 	mov	r2,zero
   12e80:	f800283a 	ret
   12e84:	30bfffc4 	addi	r2,r6,-1
   12e88:	003ff106 	br	12e50 <memcmp+0x3c>

00012e8c <memcpy>:
   12e8c:	30c00430 	cmpltui	r3,r6,16
   12e90:	2005883a 	mov	r2,r4
   12e94:	18002d1e 	bne	r3,zero,12f4c <memcpy+0xc0>
   12e98:	2906b03a 	or	r3,r5,r4
   12e9c:	18c000cc 	andi	r3,r3,3
   12ea0:	1800351e 	bne	r3,zero,12f78 <memcpy+0xec>
   12ea4:	32fffc04 	addi	r11,r6,-16
   12ea8:	5816d13a 	srli	r11,r11,4
   12eac:	280f883a 	mov	r7,r5
   12eb0:	2007883a 	mov	r3,r4
   12eb4:	5ac00044 	addi	r11,r11,1
   12eb8:	5816913a 	slli	r11,r11,4
   12ebc:	22d5883a 	add	r10,r4,r11
   12ec0:	39000117 	ldw	r4,4(r7)
   12ec4:	3a400017 	ldw	r9,0(r7)
   12ec8:	3a000217 	ldw	r8,8(r7)
   12ecc:	19000115 	stw	r4,4(r3)
   12ed0:	39000317 	ldw	r4,12(r7)
   12ed4:	1a400015 	stw	r9,0(r3)
   12ed8:	1a000215 	stw	r8,8(r3)
   12edc:	19000315 	stw	r4,12(r3)
   12ee0:	18c00404 	addi	r3,r3,16
   12ee4:	39c00404 	addi	r7,r7,16
   12ee8:	50fff51e 	bne	r10,r3,12ec0 <memcpy+0x34>
   12eec:	3100030c 	andi	r4,r6,12
   12ef0:	2acb883a 	add	r5,r5,r11
   12ef4:	320003cc 	andi	r8,r6,15
   12ef8:	20002226 	beq	r4,zero,12f84 <memcpy+0xf8>
   12efc:	280f883a 	mov	r7,r5
   12f00:	1813883a 	mov	r9,r3
   12f04:	39c00104 	addi	r7,r7,4
   12f08:	3abfff17 	ldw	r10,-4(r7)
   12f0c:	41c9c83a 	sub	r4,r8,r7
   12f10:	2909883a 	add	r4,r5,r4
   12f14:	4a800015 	stw	r10,0(r9)
   12f18:	21000128 	cmpgeui	r4,r4,4
   12f1c:	4a400104 	addi	r9,r9,4
   12f20:	203ff81e 	bne	r4,zero,12f04 <memcpy+0x78>
   12f24:	413fff04 	addi	r4,r8,-4
   12f28:	2008d0ba 	srli	r4,r4,2
   12f2c:	318000cc 	andi	r6,r6,3
   12f30:	31ffffc4 	addi	r7,r6,-1
   12f34:	21000044 	addi	r4,r4,1
   12f38:	200890ba 	slli	r4,r4,2
   12f3c:	1907883a 	add	r3,r3,r4
   12f40:	290b883a 	add	r5,r5,r4
   12f44:	3000041e 	bne	r6,zero,12f58 <memcpy+0xcc>
   12f48:	f800283a 	ret
   12f4c:	2007883a 	mov	r3,r4
   12f50:	31ffffc4 	addi	r7,r6,-1
   12f54:	303ffc26 	beq	r6,zero,12f48 <memcpy+0xbc>
   12f58:	39c00044 	addi	r7,r7,1
   12f5c:	19cf883a 	add	r7,r3,r7
   12f60:	29800003 	ldbu	r6,0(r5)
   12f64:	18c00044 	addi	r3,r3,1
   12f68:	29400044 	addi	r5,r5,1
   12f6c:	19bfffc5 	stb	r6,-1(r3)
   12f70:	38fffb1e 	bne	r7,r3,12f60 <memcpy+0xd4>
   12f74:	f800283a 	ret
   12f78:	31ffffc4 	addi	r7,r6,-1
   12f7c:	2007883a 	mov	r3,r4
   12f80:	003ff506 	br	12f58 <memcpy+0xcc>
   12f84:	400d883a 	mov	r6,r8
   12f88:	003ff106 	br	12f50 <memcpy+0xc4>

00012f8c <memmove>:
   12f8c:	2005883a 	mov	r2,r4
   12f90:	29000a2e 	bgeu	r5,r4,12fbc <memmove+0x30>
   12f94:	2989883a 	add	r4,r5,r6
   12f98:	1100082e 	bgeu	r2,r4,12fbc <memmove+0x30>
   12f9c:	1187883a 	add	r3,r2,r6
   12fa0:	30003e26 	beq	r6,zero,1309c <memmove+0x110>
   12fa4:	217fffc3 	ldbu	r5,-1(r4)
   12fa8:	18ffffc4 	addi	r3,r3,-1
   12fac:	213fffc4 	addi	r4,r4,-1
   12fb0:	19400005 	stb	r5,0(r3)
   12fb4:	10fffb1e 	bne	r2,r3,12fa4 <memmove+0x18>
   12fb8:	f800283a 	ret
   12fbc:	30c00430 	cmpltui	r3,r6,16
   12fc0:	18000b26 	beq	r3,zero,12ff0 <memmove+0x64>
   12fc4:	1007883a 	mov	r3,r2
   12fc8:	31ffffc4 	addi	r7,r6,-1
   12fcc:	30003726 	beq	r6,zero,130ac <memmove+0x120>
   12fd0:	39c00044 	addi	r7,r7,1
   12fd4:	29cf883a 	add	r7,r5,r7
   12fd8:	29800003 	ldbu	r6,0(r5)
   12fdc:	29400044 	addi	r5,r5,1
   12fe0:	18c00044 	addi	r3,r3,1
   12fe4:	19bfffc5 	stb	r6,-1(r3)
   12fe8:	29fffb1e 	bne	r5,r7,12fd8 <memmove+0x4c>
   12fec:	f800283a 	ret
   12ff0:	2886b03a 	or	r3,r5,r2
   12ff4:	18c000cc 	andi	r3,r3,3
   12ff8:	1800291e 	bne	r3,zero,130a0 <memmove+0x114>
   12ffc:	327ffc04 	addi	r9,r6,-16
   13000:	4812d13a 	srli	r9,r9,4
   13004:	280f883a 	mov	r7,r5
   13008:	1007883a 	mov	r3,r2
   1300c:	4a400044 	addi	r9,r9,1
   13010:	4812913a 	slli	r9,r9,4
   13014:	1251883a 	add	r8,r2,r9
   13018:	39000017 	ldw	r4,0(r7)
   1301c:	39c00404 	addi	r7,r7,16
   13020:	18c00404 	addi	r3,r3,16
   13024:	193ffc15 	stw	r4,-16(r3)
   13028:	393ffd17 	ldw	r4,-12(r7)
   1302c:	193ffd15 	stw	r4,-12(r3)
   13030:	393ffe17 	ldw	r4,-8(r7)
   13034:	193ffe15 	stw	r4,-8(r3)
   13038:	393fff17 	ldw	r4,-4(r7)
   1303c:	193fff15 	stw	r4,-4(r3)
   13040:	40fff51e 	bne	r8,r3,13018 <memmove+0x8c>
   13044:	3100030c 	andi	r4,r6,12
   13048:	2a4b883a 	add	r5,r5,r9
   1304c:	320003cc 	andi	r8,r6,15
   13050:	20001726 	beq	r4,zero,130b0 <memmove+0x124>
   13054:	2813883a 	mov	r9,r5
   13058:	180f883a 	mov	r7,r3
   1305c:	4a800017 	ldw	r10,0(r9)
   13060:	39c00104 	addi	r7,r7,4
   13064:	41c9c83a 	sub	r4,r8,r7
   13068:	1909883a 	add	r4,r3,r4
   1306c:	21000128 	cmpgeui	r4,r4,4
   13070:	3abfff15 	stw	r10,-4(r7)
   13074:	4a400104 	addi	r9,r9,4
   13078:	203ff81e 	bne	r4,zero,1305c <memmove+0xd0>
   1307c:	413fff04 	addi	r4,r8,-4
   13080:	2008d0ba 	srli	r4,r4,2
   13084:	318000cc 	andi	r6,r6,3
   13088:	21000044 	addi	r4,r4,1
   1308c:	200890ba 	slli	r4,r4,2
   13090:	1907883a 	add	r3,r3,r4
   13094:	290b883a 	add	r5,r5,r4
   13098:	003fcb06 	br	12fc8 <memmove+0x3c>
   1309c:	f800283a 	ret
   130a0:	31ffffc4 	addi	r7,r6,-1
   130a4:	1007883a 	mov	r3,r2
   130a8:	003fc906 	br	12fd0 <memmove+0x44>
   130ac:	f800283a 	ret
   130b0:	400d883a 	mov	r6,r8
   130b4:	003fc406 	br	12fc8 <memmove+0x3c>

000130b8 <_realloc_r>:
   130b8:	defff504 	addi	sp,sp,-44
   130bc:	dc800315 	stw	r18,12(sp)
   130c0:	dfc00a15 	stw	ra,40(sp)
   130c4:	df000915 	stw	fp,36(sp)
   130c8:	ddc00815 	stw	r23,32(sp)
   130cc:	dd800715 	stw	r22,28(sp)
   130d0:	dd400615 	stw	r21,24(sp)
   130d4:	dd000515 	stw	r20,20(sp)
   130d8:	dcc00415 	stw	r19,16(sp)
   130dc:	dc400215 	stw	r17,8(sp)
   130e0:	dc000115 	stw	r16,4(sp)
   130e4:	3025883a 	mov	r18,r6
   130e8:	28008b26 	beq	r5,zero,13318 <_realloc_r+0x260>
   130ec:	2821883a 	mov	r16,r5
   130f0:	2027883a 	mov	r19,r4
   130f4:	944002c4 	addi	r17,r18,11
   130f8:	00153980 	call	15398 <__malloc_lock>
   130fc:	888005f0 	cmpltui	r2,r17,23
   13100:	1000521e 	bne	r2,zero,1324c <_realloc_r+0x194>
   13104:	017ffe04 	movi	r5,-8
   13108:	8962703a 	and	r17,r17,r5
   1310c:	8807883a 	mov	r3,r17
   13110:	88005116 	blt	r17,zero,13258 <_realloc_r+0x1a0>
   13114:	8c805036 	bltu	r17,r18,13258 <_realloc_r+0x1a0>
   13118:	80bfff17 	ldw	r2,-4(r16)
   1311c:	017fff04 	movi	r5,-4
   13120:	857ffe04 	addi	r21,r16,-8
   13124:	1168703a 	and	r20,r2,r5
   13128:	ad2d883a 	add	r22,r21,r20
   1312c:	a0c0390e 	bge	r20,r3,13214 <_realloc_r+0x15c>
   13130:	07000074 	movhi	fp,1
   13134:	e71b7404 	addi	fp,fp,28112
   13138:	e2000217 	ldw	r8,8(fp)
   1313c:	b1000117 	ldw	r4,4(r22)
   13140:	45808e26 	beq	r8,r22,1337c <_realloc_r+0x2c4>
   13144:	01bfff84 	movi	r6,-2
   13148:	218c703a 	and	r6,r4,r6
   1314c:	b18d883a 	add	r6,r22,r6
   13150:	31800117 	ldw	r6,4(r6)
   13154:	3180004c 	andi	r6,r6,1
   13158:	30004f1e 	bne	r6,zero,13298 <_realloc_r+0x1e0>
   1315c:	2148703a 	and	r4,r4,r5
   13160:	a10b883a 	add	r5,r20,r4
   13164:	28c0bf0e 	bge	r5,r3,13464 <_realloc_r+0x3ac>
   13168:	1080004c 	andi	r2,r2,1
   1316c:	10004c1e 	bne	r2,zero,132a0 <_realloc_r+0x1e8>
   13170:	81fffe17 	ldw	r7,-8(r16)
   13174:	00bfff04 	movi	r2,-4
   13178:	a9cfc83a 	sub	r7,r21,r7
   1317c:	39400117 	ldw	r5,4(r7)
   13180:	288a703a 	and	r5,r5,r2
   13184:	b0000426 	beq	r22,zero,13198 <_realloc_r+0xe0>
   13188:	a16f883a 	add	r23,r20,r5
   1318c:	b92f883a 	add	r23,r23,r4
   13190:	4580bf26 	beq	r8,r22,13490 <_realloc_r+0x3d8>
   13194:	b8c0930e 	bge	r23,r3,133e4 <_realloc_r+0x32c>
   13198:	38004126 	beq	r7,zero,132a0 <_realloc_r+0x1e8>
   1319c:	a16f883a 	add	r23,r20,r5
   131a0:	b8c03f16 	blt	r23,r3,132a0 <_realloc_r+0x1e8>
   131a4:	38800317 	ldw	r2,12(r7)
   131a8:	38c00217 	ldw	r3,8(r7)
   131ac:	a1bfff04 	addi	r6,r20,-4
   131b0:	31400968 	cmpgeui	r5,r6,37
   131b4:	18800315 	stw	r2,12(r3)
   131b8:	10c00215 	stw	r3,8(r2)
   131bc:	39000204 	addi	r4,r7,8
   131c0:	3ded883a 	add	r22,r7,r23
   131c4:	2800941e 	bne	r5,zero,13418 <_realloc_r+0x360>
   131c8:	30800530 	cmpltui	r2,r6,20
   131cc:	80c00017 	ldw	r3,0(r16)
   131d0:	1000df1e 	bne	r2,zero,13550 <_realloc_r+0x498>
   131d4:	38c00215 	stw	r3,8(r7)
   131d8:	80c00117 	ldw	r3,4(r16)
   131dc:	30800728 	cmpgeui	r2,r6,28
   131e0:	38c00315 	stw	r3,12(r7)
   131e4:	1000dc1e 	bne	r2,zero,13558 <_realloc_r+0x4a0>
   131e8:	80c00217 	ldw	r3,8(r16)
   131ec:	38800404 	addi	r2,r7,16
   131f0:	84000204 	addi	r16,r16,8
   131f4:	10c00015 	stw	r3,0(r2)
   131f8:	80c00117 	ldw	r3,4(r16)
   131fc:	b829883a 	mov	r20,r23
   13200:	382b883a 	mov	r21,r7
   13204:	10c00115 	stw	r3,4(r2)
   13208:	80c00217 	ldw	r3,8(r16)
   1320c:	2021883a 	mov	r16,r4
   13210:	10c00215 	stw	r3,8(r2)
   13214:	a9800117 	ldw	r6,4(r21)
   13218:	a445c83a 	sub	r2,r20,r17
   1321c:	10c00430 	cmpltui	r3,r2,16
   13220:	3180004c 	andi	r6,r6,1
   13224:	18004926 	beq	r3,zero,1334c <_realloc_r+0x294>
   13228:	a18cb03a 	or	r6,r20,r6
   1322c:	a9800115 	stw	r6,4(r21)
   13230:	b0800117 	ldw	r2,4(r22)
   13234:	10800054 	ori	r2,r2,1
   13238:	b0800115 	stw	r2,4(r22)
   1323c:	9809883a 	mov	r4,r19
   13240:	00153bc0 	call	153bc <__malloc_unlock>
   13244:	8025883a 	mov	r18,r16
   13248:	00000606 	br	13264 <_realloc_r+0x1ac>
   1324c:	04400404 	movi	r17,16
   13250:	00c00404 	movi	r3,16
   13254:	8cbfb02e 	bgeu	r17,r18,13118 <_realloc_r+0x60>
   13258:	00800304 	movi	r2,12
   1325c:	98800015 	stw	r2,0(r19)
   13260:	0025883a 	mov	r18,zero
   13264:	9005883a 	mov	r2,r18
   13268:	dfc00a17 	ldw	ra,40(sp)
   1326c:	df000917 	ldw	fp,36(sp)
   13270:	ddc00817 	ldw	r23,32(sp)
   13274:	dd800717 	ldw	r22,28(sp)
   13278:	dd400617 	ldw	r21,24(sp)
   1327c:	dd000517 	ldw	r20,20(sp)
   13280:	dcc00417 	ldw	r19,16(sp)
   13284:	dc800317 	ldw	r18,12(sp)
   13288:	dc400217 	ldw	r17,8(sp)
   1328c:	dc000117 	ldw	r16,4(sp)
   13290:	dec00b04 	addi	sp,sp,44
   13294:	f800283a 	ret
   13298:	1080004c 	andi	r2,r2,1
   1329c:	10006c26 	beq	r2,zero,13450 <_realloc_r+0x398>
   132a0:	900b883a 	mov	r5,r18
   132a4:	9809883a 	mov	r4,r19
   132a8:	00125640 	call	12564 <_malloc_r>
   132ac:	1025883a 	mov	r18,r2
   132b0:	10001626 	beq	r2,zero,1330c <_realloc_r+0x254>
   132b4:	80bfff17 	ldw	r2,-4(r16)
   132b8:	013fff84 	movi	r4,-2
   132bc:	90fffe04 	addi	r3,r18,-8
   132c0:	1104703a 	and	r2,r2,r4
   132c4:	a885883a 	add	r2,r21,r2
   132c8:	10c05b26 	beq	r2,r3,13438 <_realloc_r+0x380>
   132cc:	a1bfff04 	addi	r6,r20,-4
   132d0:	30800968 	cmpgeui	r2,r6,37
   132d4:	10006a1e 	bne	r2,zero,13480 <_realloc_r+0x3c8>
   132d8:	30800530 	cmpltui	r2,r6,20
   132dc:	81000017 	ldw	r4,0(r16)
   132e0:	10003726 	beq	r2,zero,133c0 <_realloc_r+0x308>
   132e4:	9005883a 	mov	r2,r18
   132e8:	8007883a 	mov	r3,r16
   132ec:	11000015 	stw	r4,0(r2)
   132f0:	19000117 	ldw	r4,4(r3)
   132f4:	11000115 	stw	r4,4(r2)
   132f8:	18c00217 	ldw	r3,8(r3)
   132fc:	10c00215 	stw	r3,8(r2)
   13300:	800b883a 	mov	r5,r16
   13304:	9809883a 	mov	r4,r19
   13308:	00141f40 	call	141f4 <_free_r>
   1330c:	9809883a 	mov	r4,r19
   13310:	00153bc0 	call	153bc <__malloc_unlock>
   13314:	003fd306 	br	13264 <_realloc_r+0x1ac>
   13318:	300b883a 	mov	r5,r6
   1331c:	dfc00a17 	ldw	ra,40(sp)
   13320:	df000917 	ldw	fp,36(sp)
   13324:	ddc00817 	ldw	r23,32(sp)
   13328:	dd800717 	ldw	r22,28(sp)
   1332c:	dd400617 	ldw	r21,24(sp)
   13330:	dd000517 	ldw	r20,20(sp)
   13334:	dcc00417 	ldw	r19,16(sp)
   13338:	dc800317 	ldw	r18,12(sp)
   1333c:	dc400217 	ldw	r17,8(sp)
   13340:	dc000117 	ldw	r16,4(sp)
   13344:	dec00b04 	addi	sp,sp,44
   13348:	00125641 	jmpi	12564 <_malloc_r>
   1334c:	344cb03a 	or	r6,r6,r17
   13350:	a9800115 	stw	r6,4(r21)
   13354:	ac4b883a 	add	r5,r21,r17
   13358:	10800054 	ori	r2,r2,1
   1335c:	28800115 	stw	r2,4(r5)
   13360:	b0800117 	ldw	r2,4(r22)
   13364:	29400204 	addi	r5,r5,8
   13368:	9809883a 	mov	r4,r19
   1336c:	10800054 	ori	r2,r2,1
   13370:	b0800115 	stw	r2,4(r22)
   13374:	00141f40 	call	141f4 <_free_r>
   13378:	003fb006 	br	1323c <_realloc_r+0x184>
   1337c:	2148703a 	and	r4,r4,r5
   13380:	a10b883a 	add	r5,r20,r4
   13384:	89800404 	addi	r6,r17,16
   13388:	29bf7716 	blt	r5,r6,13168 <_realloc_r+0xb0>
   1338c:	ac6b883a 	add	r21,r21,r17
   13390:	2c45c83a 	sub	r2,r5,r17
   13394:	e5400215 	stw	r21,8(fp)
   13398:	10800054 	ori	r2,r2,1
   1339c:	a8800115 	stw	r2,4(r21)
   133a0:	80bfff17 	ldw	r2,-4(r16)
   133a4:	9809883a 	mov	r4,r19
   133a8:	8025883a 	mov	r18,r16
   133ac:	1080004c 	andi	r2,r2,1
   133b0:	1462b03a 	or	r17,r2,r17
   133b4:	847fff15 	stw	r17,-4(r16)
   133b8:	00153bc0 	call	153bc <__malloc_unlock>
   133bc:	003fa906 	br	13264 <_realloc_r+0x1ac>
   133c0:	91000015 	stw	r4,0(r18)
   133c4:	80c00117 	ldw	r3,4(r16)
   133c8:	30800728 	cmpgeui	r2,r6,28
   133cc:	90c00115 	stw	r3,4(r18)
   133d0:	1000551e 	bne	r2,zero,13528 <_realloc_r+0x470>
   133d4:	81000217 	ldw	r4,8(r16)
   133d8:	80c00204 	addi	r3,r16,8
   133dc:	90800204 	addi	r2,r18,8
   133e0:	003fc206 	br	132ec <_realloc_r+0x234>
   133e4:	b0800317 	ldw	r2,12(r22)
   133e8:	b0c00217 	ldw	r3,8(r22)
   133ec:	a1bfff04 	addi	r6,r20,-4
   133f0:	31400968 	cmpgeui	r5,r6,37
   133f4:	18800315 	stw	r2,12(r3)
   133f8:	10c00215 	stw	r3,8(r2)
   133fc:	38c00217 	ldw	r3,8(r7)
   13400:	38800317 	ldw	r2,12(r7)
   13404:	39000204 	addi	r4,r7,8
   13408:	3ded883a 	add	r22,r7,r23
   1340c:	18800315 	stw	r2,12(r3)
   13410:	10c00215 	stw	r3,8(r2)
   13414:	283f6c26 	beq	r5,zero,131c8 <_realloc_r+0x110>
   13418:	800b883a 	mov	r5,r16
   1341c:	d9c00015 	stw	r7,0(sp)
   13420:	0012f8c0 	call	12f8c <memmove>
   13424:	d9c00017 	ldw	r7,0(sp)
   13428:	1021883a 	mov	r16,r2
   1342c:	b829883a 	mov	r20,r23
   13430:	382b883a 	mov	r21,r7
   13434:	003f7706 	br	13214 <_realloc_r+0x15c>
   13438:	90bfff17 	ldw	r2,-4(r18)
   1343c:	00ffff04 	movi	r3,-4
   13440:	10c4703a 	and	r2,r2,r3
   13444:	a0a9883a 	add	r20,r20,r2
   13448:	ad2d883a 	add	r22,r21,r20
   1344c:	003f7106 	br	13214 <_realloc_r+0x15c>
   13450:	81fffe17 	ldw	r7,-8(r16)
   13454:	a9cfc83a 	sub	r7,r21,r7
   13458:	38800117 	ldw	r2,4(r7)
   1345c:	114a703a 	and	r5,r2,r5
   13460:	003f4d06 	br	13198 <_realloc_r+0xe0>
   13464:	b0800317 	ldw	r2,12(r22)
   13468:	b0c00217 	ldw	r3,8(r22)
   1346c:	2829883a 	mov	r20,r5
   13470:	a96d883a 	add	r22,r21,r5
   13474:	18800315 	stw	r2,12(r3)
   13478:	10c00215 	stw	r3,8(r2)
   1347c:	003f6506 	br	13214 <_realloc_r+0x15c>
   13480:	800b883a 	mov	r5,r16
   13484:	9009883a 	mov	r4,r18
   13488:	0012f8c0 	call	12f8c <memmove>
   1348c:	003f9c06 	br	13300 <_realloc_r+0x248>
   13490:	88800404 	addi	r2,r17,16
   13494:	b8bf4016 	blt	r23,r2,13198 <_realloc_r+0xe0>
   13498:	38800317 	ldw	r2,12(r7)
   1349c:	38c00217 	ldw	r3,8(r7)
   134a0:	a1bfff04 	addi	r6,r20,-4
   134a4:	31000968 	cmpgeui	r4,r6,37
   134a8:	18800315 	stw	r2,12(r3)
   134ac:	10c00215 	stw	r3,8(r2)
   134b0:	3c800204 	addi	r18,r7,8
   134b4:	20003b1e 	bne	r4,zero,135a4 <_realloc_r+0x4ec>
   134b8:	30800530 	cmpltui	r2,r6,20
   134bc:	80c00017 	ldw	r3,0(r16)
   134c0:	1000361e 	bne	r2,zero,1359c <_realloc_r+0x4e4>
   134c4:	38c00215 	stw	r3,8(r7)
   134c8:	80c00117 	ldw	r3,4(r16)
   134cc:	30800728 	cmpgeui	r2,r6,28
   134d0:	38c00315 	stw	r3,12(r7)
   134d4:	1000401e 	bne	r2,zero,135d8 <_realloc_r+0x520>
   134d8:	80c00217 	ldw	r3,8(r16)
   134dc:	38800404 	addi	r2,r7,16
   134e0:	84000204 	addi	r16,r16,8
   134e4:	10c00015 	stw	r3,0(r2)
   134e8:	80c00117 	ldw	r3,4(r16)
   134ec:	10c00115 	stw	r3,4(r2)
   134f0:	80c00217 	ldw	r3,8(r16)
   134f4:	10c00215 	stw	r3,8(r2)
   134f8:	3c47883a 	add	r3,r7,r17
   134fc:	bc45c83a 	sub	r2,r23,r17
   13500:	e0c00215 	stw	r3,8(fp)
   13504:	10800054 	ori	r2,r2,1
   13508:	18800115 	stw	r2,4(r3)
   1350c:	38800117 	ldw	r2,4(r7)
   13510:	9809883a 	mov	r4,r19
   13514:	1080004c 	andi	r2,r2,1
   13518:	1462b03a 	or	r17,r2,r17
   1351c:	3c400115 	stw	r17,4(r7)
   13520:	00153bc0 	call	153bc <__malloc_unlock>
   13524:	003f4f06 	br	13264 <_realloc_r+0x1ac>
   13528:	80800217 	ldw	r2,8(r16)
   1352c:	31800920 	cmpeqi	r6,r6,36
   13530:	90800215 	stw	r2,8(r18)
   13534:	80800317 	ldw	r2,12(r16)
   13538:	90800315 	stw	r2,12(r18)
   1353c:	81000417 	ldw	r4,16(r16)
   13540:	30000f1e 	bne	r6,zero,13580 <_realloc_r+0x4c8>
   13544:	80c00404 	addi	r3,r16,16
   13548:	90800404 	addi	r2,r18,16
   1354c:	003f6706 	br	132ec <_realloc_r+0x234>
   13550:	2005883a 	mov	r2,r4
   13554:	003f2706 	br	131f4 <_realloc_r+0x13c>
   13558:	80800217 	ldw	r2,8(r16)
   1355c:	31800920 	cmpeqi	r6,r6,36
   13560:	38800415 	stw	r2,16(r7)
   13564:	80800317 	ldw	r2,12(r16)
   13568:	38800515 	stw	r2,20(r7)
   1356c:	80c00417 	ldw	r3,16(r16)
   13570:	3000121e 	bne	r6,zero,135bc <_realloc_r+0x504>
   13574:	38800604 	addi	r2,r7,24
   13578:	84000404 	addi	r16,r16,16
   1357c:	003f1d06 	br	131f4 <_realloc_r+0x13c>
   13580:	91000415 	stw	r4,16(r18)
   13584:	81000517 	ldw	r4,20(r16)
   13588:	80c00604 	addi	r3,r16,24
   1358c:	90800604 	addi	r2,r18,24
   13590:	91000515 	stw	r4,20(r18)
   13594:	81000617 	ldw	r4,24(r16)
   13598:	003f5406 	br	132ec <_realloc_r+0x234>
   1359c:	9005883a 	mov	r2,r18
   135a0:	003fd006 	br	134e4 <_realloc_r+0x42c>
   135a4:	800b883a 	mov	r5,r16
   135a8:	9009883a 	mov	r4,r18
   135ac:	d9c00015 	stw	r7,0(sp)
   135b0:	0012f8c0 	call	12f8c <memmove>
   135b4:	d9c00017 	ldw	r7,0(sp)
   135b8:	003fcf06 	br	134f8 <_realloc_r+0x440>
   135bc:	84000604 	addi	r16,r16,24
   135c0:	38c00615 	stw	r3,24(r7)
   135c4:	80ffff17 	ldw	r3,-4(r16)
   135c8:	38800804 	addi	r2,r7,32
   135cc:	38c00715 	stw	r3,28(r7)
   135d0:	80c00017 	ldw	r3,0(r16)
   135d4:	003f0706 	br	131f4 <_realloc_r+0x13c>
   135d8:	80800217 	ldw	r2,8(r16)
   135dc:	31800920 	cmpeqi	r6,r6,36
   135e0:	38800415 	stw	r2,16(r7)
   135e4:	80800317 	ldw	r2,12(r16)
   135e8:	38800515 	stw	r2,20(r7)
   135ec:	80c00417 	ldw	r3,16(r16)
   135f0:	3000031e 	bne	r6,zero,13600 <_realloc_r+0x548>
   135f4:	38800604 	addi	r2,r7,24
   135f8:	84000404 	addi	r16,r16,16
   135fc:	003fb906 	br	134e4 <_realloc_r+0x42c>
   13600:	84000604 	addi	r16,r16,24
   13604:	38c00615 	stw	r3,24(r7)
   13608:	80ffff17 	ldw	r3,-4(r16)
   1360c:	38800804 	addi	r2,r7,32
   13610:	38c00715 	stw	r3,28(r7)
   13614:	80c00017 	ldw	r3,0(r16)
   13618:	003fb206 	br	134e4 <_realloc_r+0x42c>

0001361c <_sbrk_r>:
   1361c:	defffe04 	addi	sp,sp,-8
   13620:	dc000015 	stw	r16,0(sp)
   13624:	008000b4 	movhi	r2,2
   13628:	2021883a 	mov	r16,r4
   1362c:	2809883a 	mov	r4,r5
   13630:	dfc00115 	stw	ra,4(sp)
   13634:	10233115 	stw	zero,-29500(r2)
   13638:	00155240 	call	15524 <sbrk>
   1363c:	10ffffd8 	cmpnei	r3,r2,-1
   13640:	18000426 	beq	r3,zero,13654 <_sbrk_r+0x38>
   13644:	dfc00117 	ldw	ra,4(sp)
   13648:	dc000017 	ldw	r16,0(sp)
   1364c:	dec00204 	addi	sp,sp,8
   13650:	f800283a 	ret
   13654:	00c000b4 	movhi	r3,2
   13658:	18e33117 	ldw	r3,-29500(r3)
   1365c:	183ff926 	beq	r3,zero,13644 <_sbrk_r+0x28>
   13660:	80c00015 	stw	r3,0(r16)
   13664:	dfc00117 	ldw	ra,4(sp)
   13668:	dc000017 	ldw	r16,0(sp)
   1366c:	dec00204 	addi	sp,sp,8
   13670:	f800283a 	ret

00013674 <strlen>:
   13674:	208000cc 	andi	r2,r4,3
   13678:	10000926 	beq	r2,zero,136a0 <strlen+0x2c>
   1367c:	2005883a 	mov	r2,r4
   13680:	00000306 	br	13690 <strlen+0x1c>
   13684:	10800044 	addi	r2,r2,1
   13688:	10c000cc 	andi	r3,r2,3
   1368c:	18000526 	beq	r3,zero,136a4 <strlen+0x30>
   13690:	10c00007 	ldb	r3,0(r2)
   13694:	183ffb1e 	bne	r3,zero,13684 <strlen+0x10>
   13698:	1105c83a 	sub	r2,r2,r4
   1369c:	f800283a 	ret
   136a0:	2005883a 	mov	r2,r4
   136a4:	11400017 	ldw	r5,0(r2)
   136a8:	01ffbff4 	movhi	r7,65279
   136ac:	39ffbfc4 	addi	r7,r7,-257
   136b0:	29c7883a 	add	r3,r5,r7
   136b4:	01a02074 	movhi	r6,32897
   136b8:	014a303a 	nor	r5,zero,r5
   136bc:	1946703a 	and	r3,r3,r5
   136c0:	31a02004 	addi	r6,r6,-32640
   136c4:	1986703a 	and	r3,r3,r6
   136c8:	1800071e 	bne	r3,zero,136e8 <strlen+0x74>
   136cc:	11400117 	ldw	r5,4(r2)
   136d0:	10800104 	addi	r2,r2,4
   136d4:	29c7883a 	add	r3,r5,r7
   136d8:	014a303a 	nor	r5,zero,r5
   136dc:	1946703a 	and	r3,r3,r5
   136e0:	1986703a 	and	r3,r3,r6
   136e4:	183ff926 	beq	r3,zero,136cc <strlen+0x58>
   136e8:	10c00007 	ldb	r3,0(r2)
   136ec:	183fea26 	beq	r3,zero,13698 <strlen+0x24>
   136f0:	10c00047 	ldb	r3,1(r2)
   136f4:	10800044 	addi	r2,r2,1
   136f8:	183fe726 	beq	r3,zero,13698 <strlen+0x24>
   136fc:	10c00047 	ldb	r3,1(r2)
   13700:	10800044 	addi	r2,r2,1
   13704:	183ffa1e 	bne	r3,zero,136f0 <strlen+0x7c>
   13708:	003fe306 	br	13698 <strlen+0x24>

0001370c <__swsetup_r>:
   1370c:	00800074 	movhi	r2,1
   13710:	109c8017 	ldw	r2,29184(r2)
   13714:	defffd04 	addi	sp,sp,-12
   13718:	dc400115 	stw	r17,4(sp)
   1371c:	dc000015 	stw	r16,0(sp)
   13720:	dfc00215 	stw	ra,8(sp)
   13724:	2023883a 	mov	r17,r4
   13728:	2821883a 	mov	r16,r5
   1372c:	10000226 	beq	r2,zero,13738 <__swsetup_r+0x2c>
   13730:	10c00e17 	ldw	r3,56(r2)
   13734:	18001f26 	beq	r3,zero,137b4 <__swsetup_r+0xa8>
   13738:	8180030b 	ldhu	r6,12(r16)
   1373c:	30c0020c 	andi	r3,r6,8
   13740:	3005883a 	mov	r2,r6
   13744:	18002126 	beq	r3,zero,137cc <__swsetup_r+0xc0>
   13748:	80c00417 	ldw	r3,16(r16)
   1374c:	18002826 	beq	r3,zero,137f0 <__swsetup_r+0xe4>
   13750:	1100004c 	andi	r4,r2,1
   13754:	20000b1e 	bne	r4,zero,13784 <__swsetup_r+0x78>
   13758:	1100008c 	andi	r4,r2,2
   1375c:	20002e1e 	bne	r4,zero,13818 <__swsetup_r+0x10c>
   13760:	81000517 	ldw	r4,20(r16)
   13764:	81000215 	stw	r4,8(r16)
   13768:	18000b26 	beq	r3,zero,13798 <__swsetup_r+0x8c>
   1376c:	0005883a 	mov	r2,zero
   13770:	dfc00217 	ldw	ra,8(sp)
   13774:	dc400117 	ldw	r17,4(sp)
   13778:	dc000017 	ldw	r16,0(sp)
   1377c:	dec00304 	addi	sp,sp,12
   13780:	f800283a 	ret
   13784:	81000517 	ldw	r4,20(r16)
   13788:	80000215 	stw	zero,8(r16)
   1378c:	0109c83a 	sub	r4,zero,r4
   13790:	81000615 	stw	r4,24(r16)
   13794:	183ff51e 	bne	r3,zero,1376c <__swsetup_r+0x60>
   13798:	10c0200c 	andi	r3,r2,128
   1379c:	0005883a 	mov	r2,zero
   137a0:	183ff326 	beq	r3,zero,13770 <__swsetup_r+0x64>
   137a4:	31801014 	ori	r6,r6,64
   137a8:	8180030d 	sth	r6,12(r16)
   137ac:	00bfffc4 	movi	r2,-1
   137b0:	003fef06 	br	13770 <__swsetup_r+0x64>
   137b4:	1009883a 	mov	r4,r2
   137b8:	00140900 	call	14090 <__sinit>
   137bc:	8180030b 	ldhu	r6,12(r16)
   137c0:	30c0020c 	andi	r3,r6,8
   137c4:	3005883a 	mov	r2,r6
   137c8:	183fdf1e 	bne	r3,zero,13748 <__swsetup_r+0x3c>
   137cc:	3080040c 	andi	r2,r6,16
   137d0:	10002126 	beq	r2,zero,13858 <__swsetup_r+0x14c>
   137d4:	3080010c 	andi	r2,r6,4
   137d8:	1000111e 	bne	r2,zero,13820 <__swsetup_r+0x114>
   137dc:	80c00417 	ldw	r3,16(r16)
   137e0:	30800214 	ori	r2,r6,8
   137e4:	8080030d 	sth	r2,12(r16)
   137e8:	100d883a 	mov	r6,r2
   137ec:	183fd81e 	bne	r3,zero,13750 <__swsetup_r+0x44>
   137f0:	1100a00c 	andi	r4,r2,640
   137f4:	21008020 	cmpeqi	r4,r4,512
   137f8:	203fd51e 	bne	r4,zero,13750 <__swsetup_r+0x44>
   137fc:	800b883a 	mov	r5,r16
   13800:	8809883a 	mov	r4,r17
   13804:	00146300 	call	14630 <__smakebuf_r>
   13808:	8180030b 	ldhu	r6,12(r16)
   1380c:	80c00417 	ldw	r3,16(r16)
   13810:	3005883a 	mov	r2,r6
   13814:	003fce06 	br	13750 <__swsetup_r+0x44>
   13818:	0009883a 	mov	r4,zero
   1381c:	003fd106 	br	13764 <__swsetup_r+0x58>
   13820:	81400c17 	ldw	r5,48(r16)
   13824:	28000626 	beq	r5,zero,13840 <__swsetup_r+0x134>
   13828:	80801004 	addi	r2,r16,64
   1382c:	28800326 	beq	r5,r2,1383c <__swsetup_r+0x130>
   13830:	8809883a 	mov	r4,r17
   13834:	00141f40 	call	141f4 <_free_r>
   13838:	8180030b 	ldhu	r6,12(r16)
   1383c:	80000c15 	stw	zero,48(r16)
   13840:	80c00417 	ldw	r3,16(r16)
   13844:	00bff6c4 	movi	r2,-37
   13848:	118c703a 	and	r6,r2,r6
   1384c:	80000115 	stw	zero,4(r16)
   13850:	80c00015 	stw	r3,0(r16)
   13854:	003fe206 	br	137e0 <__swsetup_r+0xd4>
   13858:	00800244 	movi	r2,9
   1385c:	88800015 	stw	r2,0(r17)
   13860:	31801014 	ori	r6,r6,64
   13864:	8180030d 	sth	r6,12(r16)
   13868:	00bfffc4 	movi	r2,-1
   1386c:	003fc006 	br	13770 <__swsetup_r+0x64>

00013870 <__register_exitproc>:
   13870:	00800074 	movhi	r2,1
   13874:	10dc7f17 	ldw	r3,29180(r2)
   13878:	18805217 	ldw	r2,328(r3)
   1387c:	10001726 	beq	r2,zero,138dc <__register_exitproc+0x6c>
   13880:	10c00117 	ldw	r3,4(r2)
   13884:	1a000808 	cmpgei	r8,r3,32
   13888:	40001b1e 	bne	r8,zero,138f8 <__register_exitproc+0x88>
   1388c:	20000b26 	beq	r4,zero,138bc <__register_exitproc+0x4c>
   13890:	181090ba 	slli	r8,r3,2
   13894:	02400044 	movi	r9,1
   13898:	48d2983a 	sll	r9,r9,r3
   1389c:	1211883a 	add	r8,r2,r8
   138a0:	41802215 	stw	r6,136(r8)
   138a4:	11806217 	ldw	r6,392(r2)
   138a8:	21000098 	cmpnei	r4,r4,2
   138ac:	324cb03a 	or	r6,r6,r9
   138b0:	11806215 	stw	r6,392(r2)
   138b4:	41c04215 	stw	r7,264(r8)
   138b8:	20000b26 	beq	r4,zero,138e8 <__register_exitproc+0x78>
   138bc:	19000084 	addi	r4,r3,2
   138c0:	200890ba 	slli	r4,r4,2
   138c4:	18c00044 	addi	r3,r3,1
   138c8:	10c00115 	stw	r3,4(r2)
   138cc:	1105883a 	add	r2,r2,r4
   138d0:	11400015 	stw	r5,0(r2)
   138d4:	0005883a 	mov	r2,zero
   138d8:	f800283a 	ret
   138dc:	18805304 	addi	r2,r3,332
   138e0:	18805215 	stw	r2,328(r3)
   138e4:	003fe606 	br	13880 <__register_exitproc+0x10>
   138e8:	11006317 	ldw	r4,396(r2)
   138ec:	2252b03a 	or	r9,r4,r9
   138f0:	12406315 	stw	r9,396(r2)
   138f4:	003ff106 	br	138bc <__register_exitproc+0x4c>
   138f8:	00bfffc4 	movi	r2,-1
   138fc:	f800283a 	ret

00013900 <__call_exitprocs>:
   13900:	defff704 	addi	sp,sp,-36
   13904:	00800074 	movhi	r2,1
   13908:	dcc00315 	stw	r19,12(sp)
   1390c:	14dc7f17 	ldw	r19,29180(r2)
   13910:	dc800215 	stw	r18,8(sp)
   13914:	dfc00815 	stw	ra,32(sp)
   13918:	9c805217 	ldw	r18,328(r19)
   1391c:	ddc00715 	stw	r23,28(sp)
   13920:	dd800615 	stw	r22,24(sp)
   13924:	dd400515 	stw	r21,20(sp)
   13928:	dd000415 	stw	r20,16(sp)
   1392c:	dc400115 	stw	r17,4(sp)
   13930:	dc000015 	stw	r16,0(sp)
   13934:	90001026 	beq	r18,zero,13978 <__call_exitprocs+0x78>
   13938:	202b883a 	mov	r21,r4
   1393c:	282d883a 	mov	r22,r5
   13940:	05000044 	movi	r20,1
   13944:	94000117 	ldw	r16,4(r18)
   13948:	847fffc4 	addi	r17,r16,-1
   1394c:	88000a16 	blt	r17,zero,13978 <__call_exitprocs+0x78>
   13950:	84000044 	addi	r16,r16,1
   13954:	802090ba 	slli	r16,r16,2
   13958:	9421883a 	add	r16,r18,r16
   1395c:	b0001126 	beq	r22,zero,139a4 <__call_exitprocs+0xa4>
   13960:	80804017 	ldw	r2,256(r16)
   13964:	15800f26 	beq	r2,r22,139a4 <__call_exitprocs+0xa4>
   13968:	8c7fffc4 	addi	r17,r17,-1
   1396c:	88bfffd8 	cmpnei	r2,r17,-1
   13970:	843fff04 	addi	r16,r16,-4
   13974:	103ff91e 	bne	r2,zero,1395c <__call_exitprocs+0x5c>
   13978:	dfc00817 	ldw	ra,32(sp)
   1397c:	ddc00717 	ldw	r23,28(sp)
   13980:	dd800617 	ldw	r22,24(sp)
   13984:	dd400517 	ldw	r21,20(sp)
   13988:	dd000417 	ldw	r20,16(sp)
   1398c:	dcc00317 	ldw	r19,12(sp)
   13990:	dc800217 	ldw	r18,8(sp)
   13994:	dc400117 	ldw	r17,4(sp)
   13998:	dc000017 	ldw	r16,0(sp)
   1399c:	dec00904 	addi	sp,sp,36
   139a0:	f800283a 	ret
   139a4:	90800117 	ldw	r2,4(r18)
   139a8:	81800017 	ldw	r6,0(r16)
   139ac:	10bfffc4 	addi	r2,r2,-1
   139b0:	14401726 	beq	r2,r17,13a10 <__call_exitprocs+0x110>
   139b4:	80000015 	stw	zero,0(r16)
   139b8:	303feb26 	beq	r6,zero,13968 <__call_exitprocs+0x68>
   139bc:	a446983a 	sll	r3,r20,r17
   139c0:	90806217 	ldw	r2,392(r18)
   139c4:	95c00117 	ldw	r23,4(r18)
   139c8:	1884703a 	and	r2,r3,r2
   139cc:	1000081e 	bne	r2,zero,139f0 <__call_exitprocs+0xf0>
   139d0:	303ee83a 	callr	r6
   139d4:	90c00117 	ldw	r3,4(r18)
   139d8:	98805217 	ldw	r2,328(r19)
   139dc:	1dc0011e 	bne	r3,r23,139e4 <__call_exitprocs+0xe4>
   139e0:	90bfe126 	beq	r18,r2,13968 <__call_exitprocs+0x68>
   139e4:	103fe426 	beq	r2,zero,13978 <__call_exitprocs+0x78>
   139e8:	1025883a 	mov	r18,r2
   139ec:	003fd506 	br	13944 <__call_exitprocs+0x44>
   139f0:	90806317 	ldw	r2,396(r18)
   139f4:	81002017 	ldw	r4,128(r16)
   139f8:	1886703a 	and	r3,r3,r2
   139fc:	1800061e 	bne	r3,zero,13a18 <__call_exitprocs+0x118>
   13a00:	200b883a 	mov	r5,r4
   13a04:	a809883a 	mov	r4,r21
   13a08:	303ee83a 	callr	r6
   13a0c:	003ff106 	br	139d4 <__call_exitprocs+0xd4>
   13a10:	94400115 	stw	r17,4(r18)
   13a14:	003fe806 	br	139b8 <__call_exitprocs+0xb8>
   13a18:	303ee83a 	callr	r6
   13a1c:	003fed06 	br	139d4 <__call_exitprocs+0xd4>

00013a20 <__sflush_r>:
   13a20:	2880030b 	ldhu	r2,12(r5)
   13a24:	defffb04 	addi	sp,sp,-20
   13a28:	dcc00315 	stw	r19,12(sp)
   13a2c:	dc000015 	stw	r16,0(sp)
   13a30:	dfc00415 	stw	ra,16(sp)
   13a34:	dc800215 	stw	r18,8(sp)
   13a38:	dc400115 	stw	r17,4(sp)
   13a3c:	10c0020c 	andi	r3,r2,8
   13a40:	2821883a 	mov	r16,r5
   13a44:	2027883a 	mov	r19,r4
   13a48:	18003f1e 	bne	r3,zero,13b48 <__sflush_r+0x128>
   13a4c:	28c00117 	ldw	r3,4(r5)
   13a50:	10820014 	ori	r2,r2,2048
   13a54:	2880030d 	sth	r2,12(r5)
   13a58:	00c0550e 	bge	zero,r3,13bb0 <__sflush_r+0x190>
   13a5c:	82000a17 	ldw	r8,40(r16)
   13a60:	40003126 	beq	r8,zero,13b28 <__sflush_r+0x108>
   13a64:	9c400017 	ldw	r17,0(r19)
   13a68:	1104000c 	andi	r4,r2,4096
   13a6c:	98000015 	stw	zero,0(r19)
   13a70:	81400717 	ldw	r5,28(r16)
   13a74:	1007883a 	mov	r3,r2
   13a78:	2000521e 	bne	r4,zero,13bc4 <__sflush_r+0x1a4>
   13a7c:	01c00044 	movi	r7,1
   13a80:	000d883a 	mov	r6,zero
   13a84:	9809883a 	mov	r4,r19
   13a88:	403ee83a 	callr	r8
   13a8c:	10ffffd8 	cmpnei	r3,r2,-1
   13a90:	18005826 	beq	r3,zero,13bf4 <__sflush_r+0x1d4>
   13a94:	80c0030b 	ldhu	r3,12(r16)
   13a98:	82000a17 	ldw	r8,40(r16)
   13a9c:	81400717 	ldw	r5,28(r16)
   13aa0:	18c0010c 	andi	r3,r3,4
   13aa4:	18000626 	beq	r3,zero,13ac0 <__sflush_r+0xa0>
   13aa8:	81000117 	ldw	r4,4(r16)
   13aac:	80c00c17 	ldw	r3,48(r16)
   13ab0:	1105c83a 	sub	r2,r2,r4
   13ab4:	18000226 	beq	r3,zero,13ac0 <__sflush_r+0xa0>
   13ab8:	80c00f17 	ldw	r3,60(r16)
   13abc:	10c5c83a 	sub	r2,r2,r3
   13ac0:	100d883a 	mov	r6,r2
   13ac4:	000f883a 	mov	r7,zero
   13ac8:	9809883a 	mov	r4,r19
   13acc:	403ee83a 	callr	r8
   13ad0:	10ffffd8 	cmpnei	r3,r2,-1
   13ad4:	18003d1e 	bne	r3,zero,13bcc <__sflush_r+0x1ac>
   13ad8:	99000017 	ldw	r4,0(r19)
   13adc:	80c0030b 	ldhu	r3,12(r16)
   13ae0:	20004e26 	beq	r4,zero,13c1c <__sflush_r+0x1fc>
   13ae4:	21400760 	cmpeqi	r5,r4,29
   13ae8:	2800021e 	bne	r5,zero,13af4 <__sflush_r+0xd4>
   13aec:	210005a0 	cmpeqi	r4,r4,22
   13af0:	20002c26 	beq	r4,zero,13ba4 <__sflush_r+0x184>
   13af4:	80800417 	ldw	r2,16(r16)
   13af8:	18fdffcc 	andi	r3,r3,63487
   13afc:	80c0030d 	sth	r3,12(r16)
   13b00:	80000115 	stw	zero,4(r16)
   13b04:	80800015 	stw	r2,0(r16)
   13b08:	81400c17 	ldw	r5,48(r16)
   13b0c:	9c400015 	stw	r17,0(r19)
   13b10:	28000526 	beq	r5,zero,13b28 <__sflush_r+0x108>
   13b14:	80801004 	addi	r2,r16,64
   13b18:	28800226 	beq	r5,r2,13b24 <__sflush_r+0x104>
   13b1c:	9809883a 	mov	r4,r19
   13b20:	00141f40 	call	141f4 <_free_r>
   13b24:	80000c15 	stw	zero,48(r16)
   13b28:	0005883a 	mov	r2,zero
   13b2c:	dfc00417 	ldw	ra,16(sp)
   13b30:	dcc00317 	ldw	r19,12(sp)
   13b34:	dc800217 	ldw	r18,8(sp)
   13b38:	dc400117 	ldw	r17,4(sp)
   13b3c:	dc000017 	ldw	r16,0(sp)
   13b40:	dec00504 	addi	sp,sp,20
   13b44:	f800283a 	ret
   13b48:	2c800417 	ldw	r18,16(r5)
   13b4c:	903ff626 	beq	r18,zero,13b28 <__sflush_r+0x108>
   13b50:	2c400017 	ldw	r17,0(r5)
   13b54:	108000cc 	andi	r2,r2,3
   13b58:	2c800015 	stw	r18,0(r5)
   13b5c:	8ca3c83a 	sub	r17,r17,r18
   13b60:	1000161e 	bne	r2,zero,13bbc <__sflush_r+0x19c>
   13b64:	28800517 	ldw	r2,20(r5)
   13b68:	80800215 	stw	r2,8(r16)
   13b6c:	04400316 	blt	zero,r17,13b7c <__sflush_r+0x15c>
   13b70:	003fed06 	br	13b28 <__sflush_r+0x108>
   13b74:	90a5883a 	add	r18,r18,r2
   13b78:	047feb0e 	bge	zero,r17,13b28 <__sflush_r+0x108>
   13b7c:	80800917 	ldw	r2,36(r16)
   13b80:	81400717 	ldw	r5,28(r16)
   13b84:	880f883a 	mov	r7,r17
   13b88:	900d883a 	mov	r6,r18
   13b8c:	9809883a 	mov	r4,r19
   13b90:	103ee83a 	callr	r2
   13b94:	88a3c83a 	sub	r17,r17,r2
   13b98:	00bff616 	blt	zero,r2,13b74 <__sflush_r+0x154>
   13b9c:	80c0030b 	ldhu	r3,12(r16)
   13ba0:	00bfffc4 	movi	r2,-1
   13ba4:	18c01014 	ori	r3,r3,64
   13ba8:	80c0030d 	sth	r3,12(r16)
   13bac:	003fdf06 	br	13b2c <__sflush_r+0x10c>
   13bb0:	28c00f17 	ldw	r3,60(r5)
   13bb4:	00ffa916 	blt	zero,r3,13a5c <__sflush_r+0x3c>
   13bb8:	003fdb06 	br	13b28 <__sflush_r+0x108>
   13bbc:	0005883a 	mov	r2,zero
   13bc0:	003fe906 	br	13b68 <__sflush_r+0x148>
   13bc4:	80801417 	ldw	r2,80(r16)
   13bc8:	003fb506 	br	13aa0 <__sflush_r+0x80>
   13bcc:	80c0030b 	ldhu	r3,12(r16)
   13bd0:	81000417 	ldw	r4,16(r16)
   13bd4:	80000115 	stw	zero,4(r16)
   13bd8:	197dffcc 	andi	r5,r3,63487
   13bdc:	8140030d 	sth	r5,12(r16)
   13be0:	81000015 	stw	r4,0(r16)
   13be4:	18c4000c 	andi	r3,r3,4096
   13be8:	183fc726 	beq	r3,zero,13b08 <__sflush_r+0xe8>
   13bec:	80801415 	stw	r2,80(r16)
   13bf0:	003fc506 	br	13b08 <__sflush_r+0xe8>
   13bf4:	98c00017 	ldw	r3,0(r19)
   13bf8:	183fa626 	beq	r3,zero,13a94 <__sflush_r+0x74>
   13bfc:	19000760 	cmpeqi	r4,r3,29
   13c00:	20000e1e 	bne	r4,zero,13c3c <__sflush_r+0x21c>
   13c04:	18c00598 	cmpnei	r3,r3,22
   13c08:	18000c26 	beq	r3,zero,13c3c <__sflush_r+0x21c>
   13c0c:	80c0030b 	ldhu	r3,12(r16)
   13c10:	18c01014 	ori	r3,r3,64
   13c14:	80c0030d 	sth	r3,12(r16)
   13c18:	003fc406 	br	13b2c <__sflush_r+0x10c>
   13c1c:	81000417 	ldw	r4,16(r16)
   13c20:	197dffcc 	andi	r5,r3,63487
   13c24:	8140030d 	sth	r5,12(r16)
   13c28:	80000115 	stw	zero,4(r16)
   13c2c:	81000015 	stw	r4,0(r16)
   13c30:	18c4000c 	andi	r3,r3,4096
   13c34:	183fb426 	beq	r3,zero,13b08 <__sflush_r+0xe8>
   13c38:	003fec06 	br	13bec <__sflush_r+0x1cc>
   13c3c:	9c400015 	stw	r17,0(r19)
   13c40:	0005883a 	mov	r2,zero
   13c44:	003fb906 	br	13b2c <__sflush_r+0x10c>

00013c48 <_fflush_r>:
   13c48:	defffd04 	addi	sp,sp,-12
   13c4c:	dc000115 	stw	r16,4(sp)
   13c50:	dfc00215 	stw	ra,8(sp)
   13c54:	2021883a 	mov	r16,r4
   13c58:	20000226 	beq	r4,zero,13c64 <_fflush_r+0x1c>
   13c5c:	20800e17 	ldw	r2,56(r4)
   13c60:	10000726 	beq	r2,zero,13c80 <_fflush_r+0x38>
   13c64:	2880030f 	ldh	r2,12(r5)
   13c68:	10000a1e 	bne	r2,zero,13c94 <_fflush_r+0x4c>
   13c6c:	0005883a 	mov	r2,zero
   13c70:	dfc00217 	ldw	ra,8(sp)
   13c74:	dc000117 	ldw	r16,4(sp)
   13c78:	dec00304 	addi	sp,sp,12
   13c7c:	f800283a 	ret
   13c80:	d9400015 	stw	r5,0(sp)
   13c84:	00140900 	call	14090 <__sinit>
   13c88:	d9400017 	ldw	r5,0(sp)
   13c8c:	2880030f 	ldh	r2,12(r5)
   13c90:	103ff626 	beq	r2,zero,13c6c <_fflush_r+0x24>
   13c94:	8009883a 	mov	r4,r16
   13c98:	dfc00217 	ldw	ra,8(sp)
   13c9c:	dc000117 	ldw	r16,4(sp)
   13ca0:	dec00304 	addi	sp,sp,12
   13ca4:	0013a201 	jmpi	13a20 <__sflush_r>

00013ca8 <fflush>:
   13ca8:	20001726 	beq	r4,zero,13d08 <fflush+0x60>
   13cac:	00800074 	movhi	r2,1
   13cb0:	200b883a 	mov	r5,r4
   13cb4:	111c8017 	ldw	r4,29184(r2)
   13cb8:	20000226 	beq	r4,zero,13cc4 <fflush+0x1c>
   13cbc:	20800e17 	ldw	r2,56(r4)
   13cc0:	10000526 	beq	r2,zero,13cd8 <fflush+0x30>
   13cc4:	2880030f 	ldh	r2,12(r5)
   13cc8:	1000021e 	bne	r2,zero,13cd4 <fflush+0x2c>
   13ccc:	0005883a 	mov	r2,zero
   13cd0:	f800283a 	ret
   13cd4:	0013a201 	jmpi	13a20 <__sflush_r>
   13cd8:	defffd04 	addi	sp,sp,-12
   13cdc:	d9400115 	stw	r5,4(sp)
   13ce0:	d9000015 	stw	r4,0(sp)
   13ce4:	dfc00215 	stw	ra,8(sp)
   13ce8:	00140900 	call	14090 <__sinit>
   13cec:	d9400117 	ldw	r5,4(sp)
   13cf0:	d9000017 	ldw	r4,0(sp)
   13cf4:	2880030f 	ldh	r2,12(r5)
   13cf8:	10000826 	beq	r2,zero,13d1c <fflush+0x74>
   13cfc:	dfc00217 	ldw	ra,8(sp)
   13d00:	dec00304 	addi	sp,sp,12
   13d04:	0013a201 	jmpi	13a20 <__sflush_r>
   13d08:	00800074 	movhi	r2,1
   13d0c:	111c7f17 	ldw	r4,29180(r2)
   13d10:	01400074 	movhi	r5,1
   13d14:	294f1204 	addi	r5,r5,15432
   13d18:	00145881 	jmpi	14588 <_fwalk_reent>
   13d1c:	0005883a 	mov	r2,zero
   13d20:	dfc00217 	ldw	ra,8(sp)
   13d24:	dec00304 	addi	sp,sp,12
   13d28:	f800283a 	ret

00013d2c <__fp_lock>:
   13d2c:	0005883a 	mov	r2,zero
   13d30:	f800283a 	ret

00013d34 <_cleanup_r>:
   13d34:	01400074 	movhi	r5,1
   13d38:	29530904 	addi	r5,r5,19492
   13d3c:	00145881 	jmpi	14588 <_fwalk_reent>

00013d40 <__fp_unlock>:
   13d40:	0005883a 	mov	r2,zero
   13d44:	f800283a 	ret

00013d48 <__sinit.part.0>:
   13d48:	00c00074 	movhi	r3,1
   13d4c:	20800117 	ldw	r2,4(r4)
   13d50:	18cf4d04 	addi	r3,r3,15668
   13d54:	20c00f15 	stw	r3,60(r4)
   13d58:	2140bb04 	addi	r5,r4,748
   13d5c:	00c000c4 	movi	r3,3
   13d60:	20c0b915 	stw	r3,740(r4)
   13d64:	2140ba15 	stw	r5,744(r4)
   13d68:	2000b815 	stw	zero,736(r4)
   13d6c:	10001705 	stb	zero,92(r2)
   13d70:	10001745 	stb	zero,93(r2)
   13d74:	10001785 	stb	zero,94(r2)
   13d78:	100017c5 	stb	zero,95(r2)
   13d7c:	10001805 	stb	zero,96(r2)
   13d80:	10001845 	stb	zero,97(r2)
   13d84:	10001885 	stb	zero,98(r2)
   13d88:	100018c5 	stb	zero,99(r2)
   13d8c:	00c00104 	movi	r3,4
   13d90:	10c00315 	stw	r3,12(r2)
   13d94:	02000074 	movhi	r8,1
   13d98:	20c00217 	ldw	r3,8(r4)
   13d9c:	01c00074 	movhi	r7,1
   13da0:	01800074 	movhi	r6,1
   13da4:	01400074 	movhi	r5,1
   13da8:	42125a04 	addi	r8,r8,18792
   13dac:	39d27104 	addi	r7,r7,18884
   13db0:	31929104 	addi	r6,r6,19012
   13db4:	2952a804 	addi	r5,r5,19104
   13db8:	02400074 	movhi	r9,1
   13dbc:	10001915 	stw	zero,100(r2)
   13dc0:	10000015 	stw	zero,0(r2)
   13dc4:	10000115 	stw	zero,4(r2)
   13dc8:	10000215 	stw	zero,8(r2)
   13dcc:	10000415 	stw	zero,16(r2)
   13dd0:	10000515 	stw	zero,20(r2)
   13dd4:	10000615 	stw	zero,24(r2)
   13dd8:	10800715 	stw	r2,28(r2)
   13ddc:	12000815 	stw	r8,32(r2)
   13de0:	11c00915 	stw	r7,36(r2)
   13de4:	11800a15 	stw	r6,40(r2)
   13de8:	11400b15 	stw	r5,44(r2)
   13dec:	4a400284 	addi	r9,r9,10
   13df0:	1a400315 	stw	r9,12(r3)
   13df4:	18001915 	stw	zero,100(r3)
   13df8:	18000015 	stw	zero,0(r3)
   13dfc:	18000115 	stw	zero,4(r3)
   13e00:	18000215 	stw	zero,8(r3)
   13e04:	18000415 	stw	zero,16(r3)
   13e08:	18001705 	stb	zero,92(r3)
   13e0c:	18001745 	stb	zero,93(r3)
   13e10:	18001785 	stb	zero,94(r3)
   13e14:	180017c5 	stb	zero,95(r3)
   13e18:	18001805 	stb	zero,96(r3)
   13e1c:	18001845 	stb	zero,97(r3)
   13e20:	18001885 	stb	zero,98(r3)
   13e24:	180018c5 	stb	zero,99(r3)
   13e28:	20800317 	ldw	r2,12(r4)
   13e2c:	024000b4 	movhi	r9,2
   13e30:	18000515 	stw	zero,20(r3)
   13e34:	18000615 	stw	zero,24(r3)
   13e38:	18c00715 	stw	r3,28(r3)
   13e3c:	1a000815 	stw	r8,32(r3)
   13e40:	19c00915 	stw	r7,36(r3)
   13e44:	19800a15 	stw	r6,40(r3)
   13e48:	19400b15 	stw	r5,44(r3)
   13e4c:	4a400484 	addi	r9,r9,18
   13e50:	10001915 	stw	zero,100(r2)
   13e54:	10000015 	stw	zero,0(r2)
   13e58:	10000115 	stw	zero,4(r2)
   13e5c:	10000215 	stw	zero,8(r2)
   13e60:	12400315 	stw	r9,12(r2)
   13e64:	10000415 	stw	zero,16(r2)
   13e68:	10000515 	stw	zero,20(r2)
   13e6c:	10000615 	stw	zero,24(r2)
   13e70:	10001705 	stb	zero,92(r2)
   13e74:	10001745 	stb	zero,93(r2)
   13e78:	10001785 	stb	zero,94(r2)
   13e7c:	100017c5 	stb	zero,95(r2)
   13e80:	10001805 	stb	zero,96(r2)
   13e84:	10001845 	stb	zero,97(r2)
   13e88:	10001885 	stb	zero,98(r2)
   13e8c:	100018c5 	stb	zero,99(r2)
   13e90:	10800715 	stw	r2,28(r2)
   13e94:	12000815 	stw	r8,32(r2)
   13e98:	11c00915 	stw	r7,36(r2)
   13e9c:	11800a15 	stw	r6,40(r2)
   13ea0:	11400b15 	stw	r5,44(r2)
   13ea4:	00800044 	movi	r2,1
   13ea8:	20800e15 	stw	r2,56(r4)
   13eac:	f800283a 	ret

00013eb0 <__sfmoreglue>:
   13eb0:	defffc04 	addi	sp,sp,-16
   13eb4:	dc800215 	stw	r18,8(sp)
   13eb8:	2825883a 	mov	r18,r5
   13ebc:	dc000015 	stw	r16,0(sp)
   13ec0:	01401a04 	movi	r5,104
   13ec4:	2021883a 	mov	r16,r4
   13ec8:	913fffc4 	addi	r4,r18,-1
   13ecc:	dfc00315 	stw	ra,12(sp)
   13ed0:	dc400115 	stw	r17,4(sp)
   13ed4:	00150380 	call	15038 <__mulsi3>
   13ed8:	8009883a 	mov	r4,r16
   13edc:	11401d04 	addi	r5,r2,116
   13ee0:	1023883a 	mov	r17,r2
   13ee4:	00125640 	call	12564 <_malloc_r>
   13ee8:	1021883a 	mov	r16,r2
   13eec:	10000726 	beq	r2,zero,13f0c <__sfmoreglue+0x5c>
   13ef0:	11000304 	addi	r4,r2,12
   13ef4:	10000015 	stw	zero,0(r2)
   13ef8:	14800115 	stw	r18,4(r2)
   13efc:	11000215 	stw	r4,8(r2)
   13f00:	89801a04 	addi	r6,r17,104
   13f04:	000b883a 	mov	r5,zero
   13f08:	00148780 	call	14878 <memset>
   13f0c:	8005883a 	mov	r2,r16
   13f10:	dfc00317 	ldw	ra,12(sp)
   13f14:	dc800217 	ldw	r18,8(sp)
   13f18:	dc400117 	ldw	r17,4(sp)
   13f1c:	dc000017 	ldw	r16,0(sp)
   13f20:	dec00404 	addi	sp,sp,16
   13f24:	f800283a 	ret

00013f28 <__sfp>:
   13f28:	defffb04 	addi	sp,sp,-20
   13f2c:	00800074 	movhi	r2,1
   13f30:	dc000015 	stw	r16,0(sp)
   13f34:	141c7f17 	ldw	r16,29180(r2)
   13f38:	dc400115 	stw	r17,4(sp)
   13f3c:	dfc00415 	stw	ra,16(sp)
   13f40:	80800e17 	ldw	r2,56(r16)
   13f44:	dcc00315 	stw	r19,12(sp)
   13f48:	dc800215 	stw	r18,8(sp)
   13f4c:	2023883a 	mov	r17,r4
   13f50:	10003126 	beq	r2,zero,14018 <__sfp+0xf0>
   13f54:	8100ba17 	ldw	r4,744(r16)
   13f58:	8140b917 	ldw	r5,740(r16)
   13f5c:	04c00104 	movi	r19,4
   13f60:	8400b804 	addi	r16,r16,736
   13f64:	297fffc4 	addi	r5,r5,-1
   13f68:	2800050e 	bge	r5,zero,13f80 <__sfp+0x58>
   13f6c:	00002406 	br	14000 <__sfp+0xd8>
   13f70:	297fffc4 	addi	r5,r5,-1
   13f74:	28bfffd8 	cmpnei	r2,r5,-1
   13f78:	21001a04 	addi	r4,r4,104
   13f7c:	10002026 	beq	r2,zero,14000 <__sfp+0xd8>
   13f80:	2080030f 	ldh	r2,12(r4)
   13f84:	103ffa1e 	bne	r2,zero,13f70 <__sfp+0x48>
   13f88:	00bffff4 	movhi	r2,65535
   13f8c:	10800044 	addi	r2,r2,1
   13f90:	20001915 	stw	zero,100(r4)
   13f94:	20000015 	stw	zero,0(r4)
   13f98:	20000115 	stw	zero,4(r4)
   13f9c:	20000215 	stw	zero,8(r4)
   13fa0:	20800315 	stw	r2,12(r4)
   13fa4:	20000415 	stw	zero,16(r4)
   13fa8:	20000515 	stw	zero,20(r4)
   13fac:	20000615 	stw	zero,24(r4)
   13fb0:	20001705 	stb	zero,92(r4)
   13fb4:	20001745 	stb	zero,93(r4)
   13fb8:	20001785 	stb	zero,94(r4)
   13fbc:	200017c5 	stb	zero,95(r4)
   13fc0:	20001805 	stb	zero,96(r4)
   13fc4:	20001845 	stb	zero,97(r4)
   13fc8:	20001885 	stb	zero,98(r4)
   13fcc:	200018c5 	stb	zero,99(r4)
   13fd0:	20000c15 	stw	zero,48(r4)
   13fd4:	20000d15 	stw	zero,52(r4)
   13fd8:	20001115 	stw	zero,68(r4)
   13fdc:	20001215 	stw	zero,72(r4)
   13fe0:	2005883a 	mov	r2,r4
   13fe4:	dfc00417 	ldw	ra,16(sp)
   13fe8:	dcc00317 	ldw	r19,12(sp)
   13fec:	dc800217 	ldw	r18,8(sp)
   13ff0:	dc400117 	ldw	r17,4(sp)
   13ff4:	dc000017 	ldw	r16,0(sp)
   13ff8:	dec00504 	addi	sp,sp,20
   13ffc:	f800283a 	ret
   14000:	80800017 	ldw	r2,0(r16)
   14004:	10000726 	beq	r2,zero,14024 <__sfp+0xfc>
   14008:	11000217 	ldw	r4,8(r2)
   1400c:	11400117 	ldw	r5,4(r2)
   14010:	1021883a 	mov	r16,r2
   14014:	003fd306 	br	13f64 <__sfp+0x3c>
   14018:	8009883a 	mov	r4,r16
   1401c:	0013d480 	call	13d48 <__sinit.part.0>
   14020:	003fcc06 	br	13f54 <__sfp+0x2c>
   14024:	01406b04 	movi	r5,428
   14028:	8809883a 	mov	r4,r17
   1402c:	00125640 	call	12564 <_malloc_r>
   14030:	1025883a 	mov	r18,r2
   14034:	10000c26 	beq	r2,zero,14068 <__sfp+0x140>
   14038:	11000304 	addi	r4,r2,12
   1403c:	11000215 	stw	r4,8(r2)
   14040:	000b883a 	mov	r5,zero
   14044:	10000015 	stw	zero,0(r2)
   14048:	14c00115 	stw	r19,4(r2)
   1404c:	01806804 	movi	r6,416
   14050:	00148780 	call	14878 <memset>
   14054:	1009883a 	mov	r4,r2
   14058:	84800015 	stw	r18,0(r16)
   1405c:	014000c4 	movi	r5,3
   14060:	9021883a 	mov	r16,r18
   14064:	003fc606 	br	13f80 <__sfp+0x58>
   14068:	80000015 	stw	zero,0(r16)
   1406c:	00800304 	movi	r2,12
   14070:	88800015 	stw	r2,0(r17)
   14074:	0009883a 	mov	r4,zero
   14078:	003fd906 	br	13fe0 <__sfp+0xb8>

0001407c <_cleanup>:
   1407c:	00800074 	movhi	r2,1
   14080:	111c7f17 	ldw	r4,29180(r2)
   14084:	01400074 	movhi	r5,1
   14088:	29530904 	addi	r5,r5,19492
   1408c:	00145881 	jmpi	14588 <_fwalk_reent>

00014090 <__sinit>:
   14090:	20800e17 	ldw	r2,56(r4)
   14094:	10000126 	beq	r2,zero,1409c <__sinit+0xc>
   14098:	f800283a 	ret
   1409c:	0013d481 	jmpi	13d48 <__sinit.part.0>

000140a0 <__sfp_lock_acquire>:
   140a0:	f800283a 	ret

000140a4 <__sfp_lock_release>:
   140a4:	f800283a 	ret

000140a8 <__sinit_lock_acquire>:
   140a8:	f800283a 	ret

000140ac <__sinit_lock_release>:
   140ac:	f800283a 	ret

000140b0 <__fp_lock_all>:
   140b0:	00800074 	movhi	r2,1
   140b4:	111c8017 	ldw	r4,29184(r2)
   140b8:	01400074 	movhi	r5,1
   140bc:	294f4b04 	addi	r5,r5,15660
   140c0:	00144f01 	jmpi	144f0 <_fwalk>

000140c4 <__fp_unlock_all>:
   140c4:	00800074 	movhi	r2,1
   140c8:	111c8017 	ldw	r4,29184(r2)
   140cc:	01400074 	movhi	r5,1
   140d0:	294f5004 	addi	r5,r5,15680
   140d4:	00144f01 	jmpi	144f0 <_fwalk>

000140d8 <_malloc_trim_r>:
   140d8:	defffb04 	addi	sp,sp,-20
   140dc:	dcc00315 	stw	r19,12(sp)
   140e0:	04c00074 	movhi	r19,1
   140e4:	dc800215 	stw	r18,8(sp)
   140e8:	dc400115 	stw	r17,4(sp)
   140ec:	dc000015 	stw	r16,0(sp)
   140f0:	dfc00415 	stw	ra,16(sp)
   140f4:	2821883a 	mov	r16,r5
   140f8:	9cdb7404 	addi	r19,r19,28112
   140fc:	2025883a 	mov	r18,r4
   14100:	00153980 	call	15398 <__malloc_lock>
   14104:	98800217 	ldw	r2,8(r19)
   14108:	14400117 	ldw	r17,4(r2)
   1410c:	00bfff04 	movi	r2,-4
   14110:	88a2703a 	and	r17,r17,r2
   14114:	8c21c83a 	sub	r16,r17,r16
   14118:	8403fbc4 	addi	r16,r16,4079
   1411c:	8020d33a 	srli	r16,r16,12
   14120:	843fffc4 	addi	r16,r16,-1
   14124:	8020933a 	slli	r16,r16,12
   14128:	80840008 	cmpgei	r2,r16,4096
   1412c:	10000626 	beq	r2,zero,14148 <_malloc_trim_r+0x70>
   14130:	000b883a 	mov	r5,zero
   14134:	9009883a 	mov	r4,r18
   14138:	001361c0 	call	1361c <_sbrk_r>
   1413c:	98c00217 	ldw	r3,8(r19)
   14140:	1c47883a 	add	r3,r3,r17
   14144:	10c00a26 	beq	r2,r3,14170 <_malloc_trim_r+0x98>
   14148:	9009883a 	mov	r4,r18
   1414c:	00153bc0 	call	153bc <__malloc_unlock>
   14150:	0005883a 	mov	r2,zero
   14154:	dfc00417 	ldw	ra,16(sp)
   14158:	dcc00317 	ldw	r19,12(sp)
   1415c:	dc800217 	ldw	r18,8(sp)
   14160:	dc400117 	ldw	r17,4(sp)
   14164:	dc000017 	ldw	r16,0(sp)
   14168:	dec00504 	addi	sp,sp,20
   1416c:	f800283a 	ret
   14170:	040bc83a 	sub	r5,zero,r16
   14174:	9009883a 	mov	r4,r18
   14178:	001361c0 	call	1361c <_sbrk_r>
   1417c:	10bfffd8 	cmpnei	r2,r2,-1
   14180:	10000d26 	beq	r2,zero,141b8 <_malloc_trim_r+0xe0>
   14184:	008000b4 	movhi	r2,2
   14188:	10a37517 	ldw	r2,-29228(r2)
   1418c:	98c00217 	ldw	r3,8(r19)
   14190:	8c23c83a 	sub	r17,r17,r16
   14194:	8c400054 	ori	r17,r17,1
   14198:	1421c83a 	sub	r16,r2,r16
   1419c:	1c400115 	stw	r17,4(r3)
   141a0:	008000b4 	movhi	r2,2
   141a4:	9009883a 	mov	r4,r18
   141a8:	14237515 	stw	r16,-29228(r2)
   141ac:	00153bc0 	call	153bc <__malloc_unlock>
   141b0:	00800044 	movi	r2,1
   141b4:	003fe706 	br	14154 <_malloc_trim_r+0x7c>
   141b8:	000b883a 	mov	r5,zero
   141bc:	9009883a 	mov	r4,r18
   141c0:	001361c0 	call	1361c <_sbrk_r>
   141c4:	99000217 	ldw	r4,8(r19)
   141c8:	1107c83a 	sub	r3,r2,r4
   141cc:	19400410 	cmplti	r5,r3,16
   141d0:	283fdd1e 	bne	r5,zero,14148 <_malloc_trim_r+0x70>
   141d4:	01400074 	movhi	r5,1
   141d8:	295c8117 	ldw	r5,29188(r5)
   141dc:	18c00054 	ori	r3,r3,1
   141e0:	20c00115 	stw	r3,4(r4)
   141e4:	1145c83a 	sub	r2,r2,r5
   141e8:	014000b4 	movhi	r5,2
   141ec:	28a37515 	stw	r2,-29228(r5)
   141f0:	003fd506 	br	14148 <_malloc_trim_r+0x70>

000141f4 <_free_r>:
   141f4:	28004f26 	beq	r5,zero,14334 <_free_r+0x140>
   141f8:	defffd04 	addi	sp,sp,-12
   141fc:	dc400115 	stw	r17,4(sp)
   14200:	dc000015 	stw	r16,0(sp)
   14204:	2023883a 	mov	r17,r4
   14208:	2821883a 	mov	r16,r5
   1420c:	dfc00215 	stw	ra,8(sp)
   14210:	00153980 	call	15398 <__malloc_lock>
   14214:	81ffff17 	ldw	r7,-4(r16)
   14218:	00bfff84 	movi	r2,-2
   1421c:	80fffe04 	addi	r3,r16,-8
   14220:	3884703a 	and	r2,r7,r2
   14224:	01000074 	movhi	r4,1
   14228:	188d883a 	add	r6,r3,r2
   1422c:	211b7404 	addi	r4,r4,28112
   14230:	31400117 	ldw	r5,4(r6)
   14234:	22000217 	ldw	r8,8(r4)
   14238:	027fff04 	movi	r9,-4
   1423c:	2a4a703a 	and	r5,r5,r9
   14240:	41806426 	beq	r8,r6,143d4 <_free_r+0x1e0>
   14244:	31400115 	stw	r5,4(r6)
   14248:	39c0004c 	andi	r7,r7,1
   1424c:	3151883a 	add	r8,r6,r5
   14250:	3800281e 	bne	r7,zero,142f4 <_free_r+0x100>
   14254:	82bffe17 	ldw	r10,-8(r16)
   14258:	42000117 	ldw	r8,4(r8)
   1425c:	01c00074 	movhi	r7,1
   14260:	1a87c83a 	sub	r3,r3,r10
   14264:	1a400217 	ldw	r9,8(r3)
   14268:	39db7604 	addi	r7,r7,28120
   1426c:	1285883a 	add	r2,r2,r10
   14270:	4200004c 	andi	r8,r8,1
   14274:	49c04c26 	beq	r9,r7,143a8 <_free_r+0x1b4>
   14278:	1a800317 	ldw	r10,12(r3)
   1427c:	4a800315 	stw	r10,12(r9)
   14280:	52400215 	stw	r9,8(r10)
   14284:	40007126 	beq	r8,zero,1444c <_free_r+0x258>
   14288:	11400054 	ori	r5,r2,1
   1428c:	19400115 	stw	r5,4(r3)
   14290:	30800015 	stw	r2,0(r6)
   14294:	11408028 	cmpgeui	r5,r2,512
   14298:	28002c1e 	bne	r5,zero,1434c <_free_r+0x158>
   1429c:	100ad0fa 	srli	r5,r2,3
   142a0:	100cd17a 	srli	r6,r2,5
   142a4:	00800044 	movi	r2,1
   142a8:	29400044 	addi	r5,r5,1
   142ac:	280a90fa 	slli	r5,r5,3
   142b0:	21c00117 	ldw	r7,4(r4)
   142b4:	1184983a 	sll	r2,r2,r6
   142b8:	214b883a 	add	r5,r4,r5
   142bc:	29800017 	ldw	r6,0(r5)
   142c0:	11c4b03a 	or	r2,r2,r7
   142c4:	29fffe04 	addi	r7,r5,-8
   142c8:	19c00315 	stw	r7,12(r3)
   142cc:	19800215 	stw	r6,8(r3)
   142d0:	20800115 	stw	r2,4(r4)
   142d4:	28c00015 	stw	r3,0(r5)
   142d8:	30c00315 	stw	r3,12(r6)
   142dc:	8809883a 	mov	r4,r17
   142e0:	dfc00217 	ldw	ra,8(sp)
   142e4:	dc400117 	ldw	r17,4(sp)
   142e8:	dc000017 	ldw	r16,0(sp)
   142ec:	dec00304 	addi	sp,sp,12
   142f0:	00153bc1 	jmpi	153bc <__malloc_unlock>
   142f4:	41c00117 	ldw	r7,4(r8)
   142f8:	39c0004c 	andi	r7,r7,1
   142fc:	38000e1e 	bne	r7,zero,14338 <_free_r+0x144>
   14300:	01c00074 	movhi	r7,1
   14304:	1145883a 	add	r2,r2,r5
   14308:	39db7604 	addi	r7,r7,28120
   1430c:	31400217 	ldw	r5,8(r6)
   14310:	12400054 	ori	r9,r2,1
   14314:	1891883a 	add	r8,r3,r2
   14318:	29c05226 	beq	r5,r7,14464 <_free_r+0x270>
   1431c:	31800317 	ldw	r6,12(r6)
   14320:	29800315 	stw	r6,12(r5)
   14324:	31400215 	stw	r5,8(r6)
   14328:	1a400115 	stw	r9,4(r3)
   1432c:	40800015 	stw	r2,0(r8)
   14330:	003fd806 	br	14294 <_free_r+0xa0>
   14334:	f800283a 	ret
   14338:	11400054 	ori	r5,r2,1
   1433c:	817fff15 	stw	r5,-4(r16)
   14340:	30800015 	stw	r2,0(r6)
   14344:	11408028 	cmpgeui	r5,r2,512
   14348:	283fd426 	beq	r5,zero,1429c <_free_r+0xa8>
   1434c:	100ad27a 	srli	r5,r2,9
   14350:	29800168 	cmpgeui	r6,r5,5
   14354:	3000341e 	bne	r6,zero,14428 <_free_r+0x234>
   14358:	100ad1ba 	srli	r5,r2,6
   1435c:	29800e44 	addi	r6,r5,57
   14360:	300c90fa 	slli	r6,r6,3
   14364:	29c00e04 	addi	r7,r5,56
   14368:	218d883a 	add	r6,r4,r6
   1436c:	31400017 	ldw	r5,0(r6)
   14370:	31bffe04 	addi	r6,r6,-8
   14374:	31404226 	beq	r6,r5,14480 <_free_r+0x28c>
   14378:	01ffff04 	movi	r7,-4
   1437c:	29000117 	ldw	r4,4(r5)
   14380:	21c8703a 	and	r4,r4,r7
   14384:	1100022e 	bgeu	r2,r4,14390 <_free_r+0x19c>
   14388:	29400217 	ldw	r5,8(r5)
   1438c:	317ffb1e 	bne	r6,r5,1437c <_free_r+0x188>
   14390:	29800317 	ldw	r6,12(r5)
   14394:	19800315 	stw	r6,12(r3)
   14398:	19400215 	stw	r5,8(r3)
   1439c:	30c00215 	stw	r3,8(r6)
   143a0:	28c00315 	stw	r3,12(r5)
   143a4:	003fcd06 	br	142dc <_free_r+0xe8>
   143a8:	40004d1e 	bne	r8,zero,144e0 <_free_r+0x2ec>
   143ac:	31000317 	ldw	r4,12(r6)
   143b0:	31800217 	ldw	r6,8(r6)
   143b4:	2885883a 	add	r2,r5,r2
   143b8:	11400054 	ori	r5,r2,1
   143bc:	31000315 	stw	r4,12(r6)
   143c0:	21800215 	stw	r6,8(r4)
   143c4:	19400115 	stw	r5,4(r3)
   143c8:	1887883a 	add	r3,r3,r2
   143cc:	18800015 	stw	r2,0(r3)
   143d0:	003fc206 	br	142dc <_free_r+0xe8>
   143d4:	39c0004c 	andi	r7,r7,1
   143d8:	1145883a 	add	r2,r2,r5
   143dc:	3800071e 	bne	r7,zero,143fc <_free_r+0x208>
   143e0:	81fffe17 	ldw	r7,-8(r16)
   143e4:	19c7c83a 	sub	r3,r3,r7
   143e8:	19400317 	ldw	r5,12(r3)
   143ec:	19800217 	ldw	r6,8(r3)
   143f0:	11c5883a 	add	r2,r2,r7
   143f4:	31400315 	stw	r5,12(r6)
   143f8:	29800215 	stw	r6,8(r5)
   143fc:	01400074 	movhi	r5,1
   14400:	11800054 	ori	r6,r2,1
   14404:	295c8217 	ldw	r5,29192(r5)
   14408:	19800115 	stw	r6,4(r3)
   1440c:	20c00215 	stw	r3,8(r4)
   14410:	117fb236 	bltu	r2,r5,142dc <_free_r+0xe8>
   14414:	008000b4 	movhi	r2,2
   14418:	11633417 	ldw	r5,-29488(r2)
   1441c:	8809883a 	mov	r4,r17
   14420:	00140d80 	call	140d8 <_malloc_trim_r>
   14424:	003fad06 	br	142dc <_free_r+0xe8>
   14428:	29800568 	cmpgeui	r6,r5,21
   1442c:	30000926 	beq	r6,zero,14454 <_free_r+0x260>
   14430:	29801568 	cmpgeui	r6,r5,85
   14434:	3000191e 	bne	r6,zero,1449c <_free_r+0x2a8>
   14438:	100ad33a 	srli	r5,r2,12
   1443c:	29801bc4 	addi	r6,r5,111
   14440:	300c90fa 	slli	r6,r6,3
   14444:	29c01b84 	addi	r7,r5,110
   14448:	003fc706 	br	14368 <_free_r+0x174>
   1444c:	1145883a 	add	r2,r2,r5
   14450:	003fae06 	br	1430c <_free_r+0x118>
   14454:	29801704 	addi	r6,r5,92
   14458:	300c90fa 	slli	r6,r6,3
   1445c:	29c016c4 	addi	r7,r5,91
   14460:	003fc106 	br	14368 <_free_r+0x174>
   14464:	20c00515 	stw	r3,20(r4)
   14468:	20c00415 	stw	r3,16(r4)
   1446c:	19c00315 	stw	r7,12(r3)
   14470:	19c00215 	stw	r7,8(r3)
   14474:	1a400115 	stw	r9,4(r3)
   14478:	40800015 	stw	r2,0(r8)
   1447c:	003f9706 	br	142dc <_free_r+0xe8>
   14480:	380fd0ba 	srai	r7,r7,2
   14484:	00800044 	movi	r2,1
   14488:	22000117 	ldw	r8,4(r4)
   1448c:	11ce983a 	sll	r7,r2,r7
   14490:	3a0eb03a 	or	r7,r7,r8
   14494:	21c00115 	stw	r7,4(r4)
   14498:	003fbe06 	br	14394 <_free_r+0x1a0>
   1449c:	29805568 	cmpgeui	r6,r5,341
   144a0:	3000051e 	bne	r6,zero,144b8 <_free_r+0x2c4>
   144a4:	100ad3fa 	srli	r5,r2,15
   144a8:	29801e04 	addi	r6,r5,120
   144ac:	300c90fa 	slli	r6,r6,3
   144b0:	29c01dc4 	addi	r7,r5,119
   144b4:	003fac06 	br	14368 <_free_r+0x174>
   144b8:	29415568 	cmpgeui	r5,r5,1365
   144bc:	2800051e 	bne	r5,zero,144d4 <_free_r+0x2e0>
   144c0:	100ad4ba 	srli	r5,r2,18
   144c4:	29801f44 	addi	r6,r5,125
   144c8:	300c90fa 	slli	r6,r6,3
   144cc:	29c01f04 	addi	r7,r5,124
   144d0:	003fa506 	br	14368 <_free_r+0x174>
   144d4:	0180fe04 	movi	r6,1016
   144d8:	01c01f84 	movi	r7,126
   144dc:	003fa206 	br	14368 <_free_r+0x174>
   144e0:	11000054 	ori	r4,r2,1
   144e4:	19000115 	stw	r4,4(r3)
   144e8:	30800015 	stw	r2,0(r6)
   144ec:	003f7b06 	br	142dc <_free_r+0xe8>

000144f0 <_fwalk>:
   144f0:	defffa04 	addi	sp,sp,-24
   144f4:	dd000415 	stw	r20,16(sp)
   144f8:	dcc00315 	stw	r19,12(sp)
   144fc:	dc800215 	stw	r18,8(sp)
   14500:	dfc00515 	stw	ra,20(sp)
   14504:	dc400115 	stw	r17,4(sp)
   14508:	dc000015 	stw	r16,0(sp)
   1450c:	2827883a 	mov	r19,r5
   14510:	2480b804 	addi	r18,r4,736
   14514:	0029883a 	mov	r20,zero
   14518:	94400117 	ldw	r17,4(r18)
   1451c:	94000217 	ldw	r16,8(r18)
   14520:	8c7fffc4 	addi	r17,r17,-1
   14524:	88000d16 	blt	r17,zero,1455c <_fwalk+0x6c>
   14528:	8080030b 	ldhu	r2,12(r16)
   1452c:	8c7fffc4 	addi	r17,r17,-1
   14530:	108000b0 	cmpltui	r2,r2,2
   14534:	1000061e 	bne	r2,zero,14550 <_fwalk+0x60>
   14538:	8080038f 	ldh	r2,14(r16)
   1453c:	8009883a 	mov	r4,r16
   14540:	10bfffe0 	cmpeqi	r2,r2,-1
   14544:	1000021e 	bne	r2,zero,14550 <_fwalk+0x60>
   14548:	983ee83a 	callr	r19
   1454c:	a0a8b03a 	or	r20,r20,r2
   14550:	88bfffd8 	cmpnei	r2,r17,-1
   14554:	84001a04 	addi	r16,r16,104
   14558:	103ff31e 	bne	r2,zero,14528 <_fwalk+0x38>
   1455c:	94800017 	ldw	r18,0(r18)
   14560:	903fed1e 	bne	r18,zero,14518 <_fwalk+0x28>
   14564:	a005883a 	mov	r2,r20
   14568:	dfc00517 	ldw	ra,20(sp)
   1456c:	dd000417 	ldw	r20,16(sp)
   14570:	dcc00317 	ldw	r19,12(sp)
   14574:	dc800217 	ldw	r18,8(sp)
   14578:	dc400117 	ldw	r17,4(sp)
   1457c:	dc000017 	ldw	r16,0(sp)
   14580:	dec00604 	addi	sp,sp,24
   14584:	f800283a 	ret

00014588 <_fwalk_reent>:
   14588:	defff904 	addi	sp,sp,-28
   1458c:	dd400515 	stw	r21,20(sp)
   14590:	dd000415 	stw	r20,16(sp)
   14594:	dcc00315 	stw	r19,12(sp)
   14598:	dc800215 	stw	r18,8(sp)
   1459c:	dfc00615 	stw	ra,24(sp)
   145a0:	dc400115 	stw	r17,4(sp)
   145a4:	dc000015 	stw	r16,0(sp)
   145a8:	202b883a 	mov	r21,r4
   145ac:	2827883a 	mov	r19,r5
   145b0:	2480b804 	addi	r18,r4,736
   145b4:	0029883a 	mov	r20,zero
   145b8:	94400117 	ldw	r17,4(r18)
   145bc:	94000217 	ldw	r16,8(r18)
   145c0:	8c7fffc4 	addi	r17,r17,-1
   145c4:	88000e16 	blt	r17,zero,14600 <_fwalk_reent+0x78>
   145c8:	8080030b 	ldhu	r2,12(r16)
   145cc:	8c7fffc4 	addi	r17,r17,-1
   145d0:	108000b0 	cmpltui	r2,r2,2
   145d4:	1000071e 	bne	r2,zero,145f4 <_fwalk_reent+0x6c>
   145d8:	8080038f 	ldh	r2,14(r16)
   145dc:	800b883a 	mov	r5,r16
   145e0:	a809883a 	mov	r4,r21
   145e4:	10bfffe0 	cmpeqi	r2,r2,-1
   145e8:	1000021e 	bne	r2,zero,145f4 <_fwalk_reent+0x6c>
   145ec:	983ee83a 	callr	r19
   145f0:	a0a8b03a 	or	r20,r20,r2
   145f4:	88bfffd8 	cmpnei	r2,r17,-1
   145f8:	84001a04 	addi	r16,r16,104
   145fc:	103ff21e 	bne	r2,zero,145c8 <_fwalk_reent+0x40>
   14600:	94800017 	ldw	r18,0(r18)
   14604:	903fec1e 	bne	r18,zero,145b8 <_fwalk_reent+0x30>
   14608:	a005883a 	mov	r2,r20
   1460c:	dfc00617 	ldw	ra,24(sp)
   14610:	dd400517 	ldw	r21,20(sp)
   14614:	dd000417 	ldw	r20,16(sp)
   14618:	dcc00317 	ldw	r19,12(sp)
   1461c:	dc800217 	ldw	r18,8(sp)
   14620:	dc400117 	ldw	r17,4(sp)
   14624:	dc000017 	ldw	r16,0(sp)
   14628:	dec00704 	addi	sp,sp,28
   1462c:	f800283a 	ret

00014630 <__smakebuf_r>:
   14630:	2880030b 	ldhu	r2,12(r5)
   14634:	deffe804 	addi	sp,sp,-96
   14638:	dc001215 	stw	r16,72(sp)
   1463c:	dfc01715 	stw	ra,92(sp)
   14640:	dd001615 	stw	r20,88(sp)
   14644:	dcc01515 	stw	r19,84(sp)
   14648:	dc801415 	stw	r18,80(sp)
   1464c:	dc401315 	stw	r17,76(sp)
   14650:	10c0008c 	andi	r3,r2,2
   14654:	2821883a 	mov	r16,r5
   14658:	18000d26 	beq	r3,zero,14690 <__smakebuf_r+0x60>
   1465c:	288010c4 	addi	r2,r5,67
   14660:	28800015 	stw	r2,0(r5)
   14664:	28800415 	stw	r2,16(r5)
   14668:	00800044 	movi	r2,1
   1466c:	28800515 	stw	r2,20(r5)
   14670:	dfc01717 	ldw	ra,92(sp)
   14674:	dd001617 	ldw	r20,88(sp)
   14678:	dcc01517 	ldw	r19,84(sp)
   1467c:	dc801417 	ldw	r18,80(sp)
   14680:	dc401317 	ldw	r17,76(sp)
   14684:	dc001217 	ldw	r16,72(sp)
   14688:	dec01804 	addi	sp,sp,96
   1468c:	f800283a 	ret
   14690:	2940038f 	ldh	r5,14(r5)
   14694:	2023883a 	mov	r17,r4
   14698:	28002816 	blt	r5,zero,1473c <__smakebuf_r+0x10c>
   1469c:	d80d883a 	mov	r6,sp
   146a0:	0014d040 	call	14d04 <_fstat_r>
   146a4:	10002416 	blt	r2,zero,14738 <__smakebuf_r+0x108>
   146a8:	d8800117 	ldw	r2,4(sp)
   146ac:	10bc000c 	andi	r2,r2,61440
   146b0:	10880018 	cmpnei	r2,r2,8192
   146b4:	1000461e 	bne	r2,zero,147d0 <__smakebuf_r+0x1a0>
   146b8:	8140038f 	ldh	r5,14(r16)
   146bc:	8809883a 	mov	r4,r17
   146c0:	0014d640 	call	14d64 <_isatty_r>
   146c4:	10003e26 	beq	r2,zero,147c0 <__smakebuf_r+0x190>
   146c8:	8080030b 	ldhu	r2,12(r16)
   146cc:	80c010c4 	addi	r3,r16,67
   146d0:	80c00015 	stw	r3,0(r16)
   146d4:	10800054 	ori	r2,r2,1
   146d8:	8080030d 	sth	r2,12(r16)
   146dc:	00800044 	movi	r2,1
   146e0:	80c00415 	stw	r3,16(r16)
   146e4:	80800515 	stw	r2,20(r16)
   146e8:	04c00044 	movi	r19,1
   146ec:	05010004 	movi	r20,1024
   146f0:	04820004 	movi	r18,2048
   146f4:	a00b883a 	mov	r5,r20
   146f8:	8809883a 	mov	r4,r17
   146fc:	00125640 	call	12564 <_malloc_r>
   14700:	10001726 	beq	r2,zero,14760 <__smakebuf_r+0x130>
   14704:	80c0030b 	ldhu	r3,12(r16)
   14708:	01000074 	movhi	r4,1
   1470c:	210f4d04 	addi	r4,r4,15668
   14710:	89000f15 	stw	r4,60(r17)
   14714:	18c02014 	ori	r3,r3,128
   14718:	80c0030d 	sth	r3,12(r16)
   1471c:	80800015 	stw	r2,0(r16)
   14720:	80800415 	stw	r2,16(r16)
   14724:	85000515 	stw	r20,20(r16)
   14728:	98001d1e 	bne	r19,zero,147a0 <__smakebuf_r+0x170>
   1472c:	90c6b03a 	or	r3,r18,r3
   14730:	80c0030d 	sth	r3,12(r16)
   14734:	003fce06 	br	14670 <__smakebuf_r+0x40>
   14738:	8080030b 	ldhu	r2,12(r16)
   1473c:	1080200c 	andi	r2,r2,128
   14740:	0027883a 	mov	r19,zero
   14744:	10001326 	beq	r2,zero,14794 <__smakebuf_r+0x164>
   14748:	05001004 	movi	r20,64
   1474c:	a00b883a 	mov	r5,r20
   14750:	8809883a 	mov	r4,r17
   14754:	0025883a 	mov	r18,zero
   14758:	00125640 	call	12564 <_malloc_r>
   1475c:	103fe91e 	bne	r2,zero,14704 <__smakebuf_r+0xd4>
   14760:	8080030b 	ldhu	r2,12(r16)
   14764:	10c0800c 	andi	r3,r2,512
   14768:	183fc11e 	bne	r3,zero,14670 <__smakebuf_r+0x40>
   1476c:	00ffff04 	movi	r3,-4
   14770:	10c4703a 	and	r2,r2,r3
   14774:	10800094 	ori	r2,r2,2
   14778:	80c010c4 	addi	r3,r16,67
   1477c:	8080030d 	sth	r2,12(r16)
   14780:	00800044 	movi	r2,1
   14784:	80c00015 	stw	r3,0(r16)
   14788:	80c00415 	stw	r3,16(r16)
   1478c:	80800515 	stw	r2,20(r16)
   14790:	003fb706 	br	14670 <__smakebuf_r+0x40>
   14794:	05010004 	movi	r20,1024
   14798:	0025883a 	mov	r18,zero
   1479c:	003fd506 	br	146f4 <__smakebuf_r+0xc4>
   147a0:	8140038f 	ldh	r5,14(r16)
   147a4:	8809883a 	mov	r4,r17
   147a8:	0014d640 	call	14d64 <_isatty_r>
   147ac:	80c0030b 	ldhu	r3,12(r16)
   147b0:	103fde26 	beq	r2,zero,1472c <__smakebuf_r+0xfc>
   147b4:	18ffff0c 	andi	r3,r3,65532
   147b8:	18c00054 	ori	r3,r3,1
   147bc:	003fdb06 	br	1472c <__smakebuf_r+0xfc>
   147c0:	04c00044 	movi	r19,1
   147c4:	05010004 	movi	r20,1024
   147c8:	04820004 	movi	r18,2048
   147cc:	003fc906 	br	146f4 <__smakebuf_r+0xc4>
   147d0:	0027883a 	mov	r19,zero
   147d4:	05010004 	movi	r20,1024
   147d8:	04820004 	movi	r18,2048
   147dc:	003fc506 	br	146f4 <__smakebuf_r+0xc4>

000147e0 <__swhatbuf_r>:
   147e0:	deffea04 	addi	sp,sp,-88
   147e4:	dc001215 	stw	r16,72(sp)
   147e8:	2821883a 	mov	r16,r5
   147ec:	2940038f 	ldh	r5,14(r5)
   147f0:	dc801415 	stw	r18,80(sp)
   147f4:	dc401315 	stw	r17,76(sp)
   147f8:	dfc01515 	stw	ra,84(sp)
   147fc:	3023883a 	mov	r17,r6
   14800:	3825883a 	mov	r18,r7
   14804:	28001016 	blt	r5,zero,14848 <__swhatbuf_r+0x68>
   14808:	d80d883a 	mov	r6,sp
   1480c:	0014d040 	call	14d04 <_fstat_r>
   14810:	10000d16 	blt	r2,zero,14848 <__swhatbuf_r+0x68>
   14814:	d8c00117 	ldw	r3,4(sp)
   14818:	00820004 	movi	r2,2048
   1481c:	18fc000c 	andi	r3,r3,61440
   14820:	18c80020 	cmpeqi	r3,r3,8192
   14824:	90c00015 	stw	r3,0(r18)
   14828:	00c10004 	movi	r3,1024
   1482c:	88c00015 	stw	r3,0(r17)
   14830:	dfc01517 	ldw	ra,84(sp)
   14834:	dc801417 	ldw	r18,80(sp)
   14838:	dc401317 	ldw	r17,76(sp)
   1483c:	dc001217 	ldw	r16,72(sp)
   14840:	dec01604 	addi	sp,sp,88
   14844:	f800283a 	ret
   14848:	8080030b 	ldhu	r2,12(r16)
   1484c:	90000015 	stw	zero,0(r18)
   14850:	1080200c 	andi	r2,r2,128
   14854:	10000426 	beq	r2,zero,14868 <__swhatbuf_r+0x88>
   14858:	00801004 	movi	r2,64
   1485c:	88800015 	stw	r2,0(r17)
   14860:	0005883a 	mov	r2,zero
   14864:	003ff206 	br	14830 <__swhatbuf_r+0x50>
   14868:	00810004 	movi	r2,1024
   1486c:	88800015 	stw	r2,0(r17)
   14870:	0005883a 	mov	r2,zero
   14874:	003fee06 	br	14830 <__swhatbuf_r+0x50>

00014878 <memset>:
   14878:	20c000cc 	andi	r3,r4,3
   1487c:	2005883a 	mov	r2,r4
   14880:	18003626 	beq	r3,zero,1495c <memset+0xe4>
   14884:	31ffffc4 	addi	r7,r6,-1
   14888:	30003326 	beq	r6,zero,14958 <memset+0xe0>
   1488c:	2811883a 	mov	r8,r5
   14890:	2007883a 	mov	r3,r4
   14894:	00000306 	br	148a4 <memset+0x2c>
   14898:	39ffffc4 	addi	r7,r7,-1
   1489c:	39bfffe0 	cmpeqi	r6,r7,-1
   148a0:	30002d1e 	bne	r6,zero,14958 <memset+0xe0>
   148a4:	18c00044 	addi	r3,r3,1
   148a8:	198000cc 	andi	r6,r3,3
   148ac:	1a3fffc5 	stb	r8,-1(r3)
   148b0:	303ff91e 	bne	r6,zero,14898 <memset+0x20>
   148b4:	39000130 	cmpltui	r4,r7,4
   148b8:	2000221e 	bne	r4,zero,14944 <memset+0xcc>
   148bc:	29003fcc 	andi	r4,r5,255
   148c0:	200c923a 	slli	r6,r4,8
   148c4:	3a000430 	cmpltui	r8,r7,16
   148c8:	3108b03a 	or	r4,r6,r4
   148cc:	200c943a 	slli	r6,r4,16
   148d0:	310cb03a 	or	r6,r6,r4
   148d4:	40000e1e 	bne	r8,zero,14910 <memset+0x98>
   148d8:	393ffc04 	addi	r4,r7,-16
   148dc:	2008d13a 	srli	r4,r4,4
   148e0:	21000044 	addi	r4,r4,1
   148e4:	2008913a 	slli	r4,r4,4
   148e8:	1909883a 	add	r4,r3,r4
   148ec:	19800015 	stw	r6,0(r3)
   148f0:	19800115 	stw	r6,4(r3)
   148f4:	19800215 	stw	r6,8(r3)
   148f8:	19800315 	stw	r6,12(r3)
   148fc:	18c00404 	addi	r3,r3,16
   14900:	20fffa1e 	bne	r4,r3,148ec <memset+0x74>
   14904:	3900030c 	andi	r4,r7,12
   14908:	39c003cc 	andi	r7,r7,15
   1490c:	20000d26 	beq	r4,zero,14944 <memset+0xcc>
   14910:	1811883a 	mov	r8,r3
   14914:	42000104 	addi	r8,r8,4
   14918:	3a09c83a 	sub	r4,r7,r8
   1491c:	1909883a 	add	r4,r3,r4
   14920:	21000128 	cmpgeui	r4,r4,4
   14924:	41bfff15 	stw	r6,-4(r8)
   14928:	203ffa1e 	bne	r4,zero,14914 <memset+0x9c>
   1492c:	393fff04 	addi	r4,r7,-4
   14930:	2008d0ba 	srli	r4,r4,2
   14934:	39c000cc 	andi	r7,r7,3
   14938:	21000044 	addi	r4,r4,1
   1493c:	200890ba 	slli	r4,r4,2
   14940:	1907883a 	add	r3,r3,r4
   14944:	38000426 	beq	r7,zero,14958 <memset+0xe0>
   14948:	19cf883a 	add	r7,r3,r7
   1494c:	18c00044 	addi	r3,r3,1
   14950:	197fffc5 	stb	r5,-1(r3)
   14954:	38fffd1e 	bne	r7,r3,1494c <memset+0xd4>
   14958:	f800283a 	ret
   1495c:	2007883a 	mov	r3,r4
   14960:	300f883a 	mov	r7,r6
   14964:	003fd306 	br	148b4 <memset+0x3c>

00014968 <__sread>:
   14968:	defffe04 	addi	sp,sp,-8
   1496c:	dc000015 	stw	r16,0(sp)
   14970:	2821883a 	mov	r16,r5
   14974:	2940038f 	ldh	r5,14(r5)
   14978:	dfc00115 	stw	ra,4(sp)
   1497c:	0014e200 	call	14e20 <_read_r>
   14980:	10000716 	blt	r2,zero,149a0 <__sread+0x38>
   14984:	80c01417 	ldw	r3,80(r16)
   14988:	1887883a 	add	r3,r3,r2
   1498c:	80c01415 	stw	r3,80(r16)
   14990:	dfc00117 	ldw	ra,4(sp)
   14994:	dc000017 	ldw	r16,0(sp)
   14998:	dec00204 	addi	sp,sp,8
   1499c:	f800283a 	ret
   149a0:	80c0030b 	ldhu	r3,12(r16)
   149a4:	18fbffcc 	andi	r3,r3,61439
   149a8:	80c0030d 	sth	r3,12(r16)
   149ac:	dfc00117 	ldw	ra,4(sp)
   149b0:	dc000017 	ldw	r16,0(sp)
   149b4:	dec00204 	addi	sp,sp,8
   149b8:	f800283a 	ret

000149bc <__seofread>:
   149bc:	0005883a 	mov	r2,zero
   149c0:	f800283a 	ret

000149c4 <__swrite>:
   149c4:	2880030b 	ldhu	r2,12(r5)
   149c8:	defffb04 	addi	sp,sp,-20
   149cc:	dcc00315 	stw	r19,12(sp)
   149d0:	dc800215 	stw	r18,8(sp)
   149d4:	dc400115 	stw	r17,4(sp)
   149d8:	dc000015 	stw	r16,0(sp)
   149dc:	dfc00415 	stw	ra,16(sp)
   149e0:	10c0400c 	andi	r3,r2,256
   149e4:	2821883a 	mov	r16,r5
   149e8:	2023883a 	mov	r17,r4
   149ec:	2940038f 	ldh	r5,14(r5)
   149f0:	3025883a 	mov	r18,r6
   149f4:	3827883a 	mov	r19,r7
   149f8:	18000c1e 	bne	r3,zero,14a2c <__swrite+0x68>
   149fc:	10bbffcc 	andi	r2,r2,61439
   14a00:	980f883a 	mov	r7,r19
   14a04:	900d883a 	mov	r6,r18
   14a08:	8809883a 	mov	r4,r17
   14a0c:	8080030d 	sth	r2,12(r16)
   14a10:	dfc00417 	ldw	ra,16(sp)
   14a14:	dcc00317 	ldw	r19,12(sp)
   14a18:	dc800217 	ldw	r18,8(sp)
   14a1c:	dc400117 	ldw	r17,4(sp)
   14a20:	dc000017 	ldw	r16,0(sp)
   14a24:	dec00504 	addi	sp,sp,20
   14a28:	0014aa81 	jmpi	14aa8 <_write_r>
   14a2c:	01c00084 	movi	r7,2
   14a30:	000d883a 	mov	r6,zero
   14a34:	0014dbc0 	call	14dbc <_lseek_r>
   14a38:	8080030b 	ldhu	r2,12(r16)
   14a3c:	8140038f 	ldh	r5,14(r16)
   14a40:	003fee06 	br	149fc <__swrite+0x38>

00014a44 <__sseek>:
   14a44:	defffe04 	addi	sp,sp,-8
   14a48:	dc000015 	stw	r16,0(sp)
   14a4c:	2821883a 	mov	r16,r5
   14a50:	2940038f 	ldh	r5,14(r5)
   14a54:	dfc00115 	stw	ra,4(sp)
   14a58:	0014dbc0 	call	14dbc <_lseek_r>
   14a5c:	10ffffd8 	cmpnei	r3,r2,-1
   14a60:	18000826 	beq	r3,zero,14a84 <__sseek+0x40>
   14a64:	80c0030b 	ldhu	r3,12(r16)
   14a68:	80801415 	stw	r2,80(r16)
   14a6c:	18c40014 	ori	r3,r3,4096
   14a70:	80c0030d 	sth	r3,12(r16)
   14a74:	dfc00117 	ldw	ra,4(sp)
   14a78:	dc000017 	ldw	r16,0(sp)
   14a7c:	dec00204 	addi	sp,sp,8
   14a80:	f800283a 	ret
   14a84:	80c0030b 	ldhu	r3,12(r16)
   14a88:	18fbffcc 	andi	r3,r3,61439
   14a8c:	80c0030d 	sth	r3,12(r16)
   14a90:	dfc00117 	ldw	ra,4(sp)
   14a94:	dc000017 	ldw	r16,0(sp)
   14a98:	dec00204 	addi	sp,sp,8
   14a9c:	f800283a 	ret

00014aa0 <__sclose>:
   14aa0:	2940038f 	ldh	r5,14(r5)
   14aa4:	0014b0c1 	jmpi	14b0c <_close_r>

00014aa8 <_write_r>:
   14aa8:	2807883a 	mov	r3,r5
   14aac:	defffe04 	addi	sp,sp,-8
   14ab0:	dc000015 	stw	r16,0(sp)
   14ab4:	300b883a 	mov	r5,r6
   14ab8:	008000b4 	movhi	r2,2
   14abc:	380d883a 	mov	r6,r7
   14ac0:	2021883a 	mov	r16,r4
   14ac4:	1809883a 	mov	r4,r3
   14ac8:	dfc00115 	stw	ra,4(sp)
   14acc:	10233115 	stw	zero,-29500(r2)
   14ad0:	00156180 	call	15618 <write>
   14ad4:	10ffffd8 	cmpnei	r3,r2,-1
   14ad8:	18000426 	beq	r3,zero,14aec <_write_r+0x44>
   14adc:	dfc00117 	ldw	ra,4(sp)
   14ae0:	dc000017 	ldw	r16,0(sp)
   14ae4:	dec00204 	addi	sp,sp,8
   14ae8:	f800283a 	ret
   14aec:	00c000b4 	movhi	r3,2
   14af0:	18e33117 	ldw	r3,-29500(r3)
   14af4:	183ff926 	beq	r3,zero,14adc <_write_r+0x34>
   14af8:	80c00015 	stw	r3,0(r16)
   14afc:	dfc00117 	ldw	ra,4(sp)
   14b00:	dc000017 	ldw	r16,0(sp)
   14b04:	dec00204 	addi	sp,sp,8
   14b08:	f800283a 	ret

00014b0c <_close_r>:
   14b0c:	defffe04 	addi	sp,sp,-8
   14b10:	dc000015 	stw	r16,0(sp)
   14b14:	008000b4 	movhi	r2,2
   14b18:	2021883a 	mov	r16,r4
   14b1c:	2809883a 	mov	r4,r5
   14b20:	dfc00115 	stw	ra,4(sp)
   14b24:	10233115 	stw	zero,-29500(r2)
   14b28:	00112400 	call	11240 <close>
   14b2c:	10ffffd8 	cmpnei	r3,r2,-1
   14b30:	18000426 	beq	r3,zero,14b44 <_close_r+0x38>
   14b34:	dfc00117 	ldw	ra,4(sp)
   14b38:	dc000017 	ldw	r16,0(sp)
   14b3c:	dec00204 	addi	sp,sp,8
   14b40:	f800283a 	ret
   14b44:	00c000b4 	movhi	r3,2
   14b48:	18e33117 	ldw	r3,-29500(r3)
   14b4c:	183ff926 	beq	r3,zero,14b34 <_close_r+0x28>
   14b50:	80c00015 	stw	r3,0(r16)
   14b54:	dfc00117 	ldw	ra,4(sp)
   14b58:	dc000017 	ldw	r16,0(sp)
   14b5c:	dec00204 	addi	sp,sp,8
   14b60:	f800283a 	ret

00014b64 <_fclose_r.part.0>:
   14b64:	defffc04 	addi	sp,sp,-16
   14b68:	dc800215 	stw	r18,8(sp)
   14b6c:	dc400115 	stw	r17,4(sp)
   14b70:	dc000015 	stw	r16,0(sp)
   14b74:	dfc00315 	stw	ra,12(sp)
   14b78:	2821883a 	mov	r16,r5
   14b7c:	2023883a 	mov	r17,r4
   14b80:	0013a200 	call	13a20 <__sflush_r>
   14b84:	80c00b17 	ldw	r3,44(r16)
   14b88:	1025883a 	mov	r18,r2
   14b8c:	18000426 	beq	r3,zero,14ba0 <_fclose_r.part.0+0x3c>
   14b90:	81400717 	ldw	r5,28(r16)
   14b94:	8809883a 	mov	r4,r17
   14b98:	183ee83a 	callr	r3
   14b9c:	10001916 	blt	r2,zero,14c04 <_fclose_r.part.0+0xa0>
   14ba0:	8080030b 	ldhu	r2,12(r16)
   14ba4:	1080200c 	andi	r2,r2,128
   14ba8:	10001a1e 	bne	r2,zero,14c14 <_fclose_r.part.0+0xb0>
   14bac:	81400c17 	ldw	r5,48(r16)
   14bb0:	28000526 	beq	r5,zero,14bc8 <_fclose_r.part.0+0x64>
   14bb4:	80801004 	addi	r2,r16,64
   14bb8:	28800226 	beq	r5,r2,14bc4 <_fclose_r.part.0+0x60>
   14bbc:	8809883a 	mov	r4,r17
   14bc0:	00141f40 	call	141f4 <_free_r>
   14bc4:	80000c15 	stw	zero,48(r16)
   14bc8:	81401117 	ldw	r5,68(r16)
   14bcc:	28000326 	beq	r5,zero,14bdc <_fclose_r.part.0+0x78>
   14bd0:	8809883a 	mov	r4,r17
   14bd4:	00141f40 	call	141f4 <_free_r>
   14bd8:	80001115 	stw	zero,68(r16)
   14bdc:	00140a00 	call	140a0 <__sfp_lock_acquire>
   14be0:	8000030d 	sth	zero,12(r16)
   14be4:	00140a40 	call	140a4 <__sfp_lock_release>
   14be8:	9005883a 	mov	r2,r18
   14bec:	dfc00317 	ldw	ra,12(sp)
   14bf0:	dc800217 	ldw	r18,8(sp)
   14bf4:	dc400117 	ldw	r17,4(sp)
   14bf8:	dc000017 	ldw	r16,0(sp)
   14bfc:	dec00404 	addi	sp,sp,16
   14c00:	f800283a 	ret
   14c04:	8080030b 	ldhu	r2,12(r16)
   14c08:	04bfffc4 	movi	r18,-1
   14c0c:	1080200c 	andi	r2,r2,128
   14c10:	103fe626 	beq	r2,zero,14bac <_fclose_r.part.0+0x48>
   14c14:	81400417 	ldw	r5,16(r16)
   14c18:	8809883a 	mov	r4,r17
   14c1c:	00141f40 	call	141f4 <_free_r>
   14c20:	003fe206 	br	14bac <_fclose_r.part.0+0x48>

00014c24 <_fclose_r>:
   14c24:	28001926 	beq	r5,zero,14c8c <_fclose_r+0x68>
   14c28:	defffd04 	addi	sp,sp,-12
   14c2c:	dc000115 	stw	r16,4(sp)
   14c30:	dfc00215 	stw	ra,8(sp)
   14c34:	2021883a 	mov	r16,r4
   14c38:	20000226 	beq	r4,zero,14c44 <_fclose_r+0x20>
   14c3c:	20800e17 	ldw	r2,56(r4)
   14c40:	10000c26 	beq	r2,zero,14c74 <_fclose_r+0x50>
   14c44:	2880030f 	ldh	r2,12(r5)
   14c48:	1000051e 	bne	r2,zero,14c60 <_fclose_r+0x3c>
   14c4c:	0005883a 	mov	r2,zero
   14c50:	dfc00217 	ldw	ra,8(sp)
   14c54:	dc000117 	ldw	r16,4(sp)
   14c58:	dec00304 	addi	sp,sp,12
   14c5c:	f800283a 	ret
   14c60:	8009883a 	mov	r4,r16
   14c64:	dfc00217 	ldw	ra,8(sp)
   14c68:	dc000117 	ldw	r16,4(sp)
   14c6c:	dec00304 	addi	sp,sp,12
   14c70:	0014b641 	jmpi	14b64 <_fclose_r.part.0>
   14c74:	d9400015 	stw	r5,0(sp)
   14c78:	00140900 	call	14090 <__sinit>
   14c7c:	d9400017 	ldw	r5,0(sp)
   14c80:	2880030f 	ldh	r2,12(r5)
   14c84:	103ff126 	beq	r2,zero,14c4c <_fclose_r+0x28>
   14c88:	003ff506 	br	14c60 <_fclose_r+0x3c>
   14c8c:	0005883a 	mov	r2,zero
   14c90:	f800283a 	ret

00014c94 <fclose>:
   14c94:	20000826 	beq	r4,zero,14cb8 <fclose+0x24>
   14c98:	00800074 	movhi	r2,1
   14c9c:	200b883a 	mov	r5,r4
   14ca0:	111c8017 	ldw	r4,29184(r2)
   14ca4:	20000226 	beq	r4,zero,14cb0 <fclose+0x1c>
   14ca8:	20800e17 	ldw	r2,56(r4)
   14cac:	10000526 	beq	r2,zero,14cc4 <fclose+0x30>
   14cb0:	2880030f 	ldh	r2,12(r5)
   14cb4:	1000021e 	bne	r2,zero,14cc0 <fclose+0x2c>
   14cb8:	0005883a 	mov	r2,zero
   14cbc:	f800283a 	ret
   14cc0:	0014b641 	jmpi	14b64 <_fclose_r.part.0>
   14cc4:	defffd04 	addi	sp,sp,-12
   14cc8:	d9400115 	stw	r5,4(sp)
   14ccc:	d9000015 	stw	r4,0(sp)
   14cd0:	dfc00215 	stw	ra,8(sp)
   14cd4:	00140900 	call	14090 <__sinit>
   14cd8:	d9400117 	ldw	r5,4(sp)
   14cdc:	d9000017 	ldw	r4,0(sp)
   14ce0:	2880030f 	ldh	r2,12(r5)
   14ce4:	10000326 	beq	r2,zero,14cf4 <fclose+0x60>
   14ce8:	dfc00217 	ldw	ra,8(sp)
   14cec:	dec00304 	addi	sp,sp,12
   14cf0:	0014b641 	jmpi	14b64 <_fclose_r.part.0>
   14cf4:	0005883a 	mov	r2,zero
   14cf8:	dfc00217 	ldw	ra,8(sp)
   14cfc:	dec00304 	addi	sp,sp,12
   14d00:	f800283a 	ret

00014d04 <_fstat_r>:
   14d04:	2807883a 	mov	r3,r5
   14d08:	defffe04 	addi	sp,sp,-8
   14d0c:	dc000015 	stw	r16,0(sp)
   14d10:	008000b4 	movhi	r2,2
   14d14:	300b883a 	mov	r5,r6
   14d18:	2021883a 	mov	r16,r4
   14d1c:	1809883a 	mov	r4,r3
   14d20:	dfc00115 	stw	ra,4(sp)
   14d24:	10233115 	stw	zero,-29500(r2)
   14d28:	00150d40 	call	150d4 <fstat>
   14d2c:	10ffffd8 	cmpnei	r3,r2,-1
   14d30:	18000426 	beq	r3,zero,14d44 <_fstat_r+0x40>
   14d34:	dfc00117 	ldw	ra,4(sp)
   14d38:	dc000017 	ldw	r16,0(sp)
   14d3c:	dec00204 	addi	sp,sp,8
   14d40:	f800283a 	ret
   14d44:	00c000b4 	movhi	r3,2
   14d48:	18e33117 	ldw	r3,-29500(r3)
   14d4c:	183ff926 	beq	r3,zero,14d34 <_fstat_r+0x30>
   14d50:	80c00015 	stw	r3,0(r16)
   14d54:	dfc00117 	ldw	ra,4(sp)
   14d58:	dc000017 	ldw	r16,0(sp)
   14d5c:	dec00204 	addi	sp,sp,8
   14d60:	f800283a 	ret

00014d64 <_isatty_r>:
   14d64:	defffe04 	addi	sp,sp,-8
   14d68:	dc000015 	stw	r16,0(sp)
   14d6c:	008000b4 	movhi	r2,2
   14d70:	2021883a 	mov	r16,r4
   14d74:	2809883a 	mov	r4,r5
   14d78:	dfc00115 	stw	ra,4(sp)
   14d7c:	10233115 	stw	zero,-29500(r2)
   14d80:	00151cc0 	call	151cc <isatty>
   14d84:	10ffffd8 	cmpnei	r3,r2,-1
   14d88:	18000426 	beq	r3,zero,14d9c <_isatty_r+0x38>
   14d8c:	dfc00117 	ldw	ra,4(sp)
   14d90:	dc000017 	ldw	r16,0(sp)
   14d94:	dec00204 	addi	sp,sp,8
   14d98:	f800283a 	ret
   14d9c:	00c000b4 	movhi	r3,2
   14da0:	18e33117 	ldw	r3,-29500(r3)
   14da4:	183ff926 	beq	r3,zero,14d8c <_isatty_r+0x28>
   14da8:	80c00015 	stw	r3,0(r16)
   14dac:	dfc00117 	ldw	ra,4(sp)
   14db0:	dc000017 	ldw	r16,0(sp)
   14db4:	dec00204 	addi	sp,sp,8
   14db8:	f800283a 	ret

00014dbc <_lseek_r>:
   14dbc:	2807883a 	mov	r3,r5
   14dc0:	defffe04 	addi	sp,sp,-8
   14dc4:	dc000015 	stw	r16,0(sp)
   14dc8:	300b883a 	mov	r5,r6
   14dcc:	008000b4 	movhi	r2,2
   14dd0:	380d883a 	mov	r6,r7
   14dd4:	2021883a 	mov	r16,r4
   14dd8:	1809883a 	mov	r4,r3
   14ddc:	dfc00115 	stw	ra,4(sp)
   14de0:	10233115 	stw	zero,-29500(r2)
   14de4:	00152b80 	call	152b8 <lseek>
   14de8:	10ffffd8 	cmpnei	r3,r2,-1
   14dec:	18000426 	beq	r3,zero,14e00 <_lseek_r+0x44>
   14df0:	dfc00117 	ldw	ra,4(sp)
   14df4:	dc000017 	ldw	r16,0(sp)
   14df8:	dec00204 	addi	sp,sp,8
   14dfc:	f800283a 	ret
   14e00:	00c000b4 	movhi	r3,2
   14e04:	18e33117 	ldw	r3,-29500(r3)
   14e08:	183ff926 	beq	r3,zero,14df0 <_lseek_r+0x34>
   14e0c:	80c00015 	stw	r3,0(r16)
   14e10:	dfc00117 	ldw	ra,4(sp)
   14e14:	dc000017 	ldw	r16,0(sp)
   14e18:	dec00204 	addi	sp,sp,8
   14e1c:	f800283a 	ret

00014e20 <_read_r>:
   14e20:	2807883a 	mov	r3,r5
   14e24:	defffe04 	addi	sp,sp,-8
   14e28:	dc000015 	stw	r16,0(sp)
   14e2c:	300b883a 	mov	r5,r6
   14e30:	008000b4 	movhi	r2,2
   14e34:	380d883a 	mov	r6,r7
   14e38:	2021883a 	mov	r16,r4
   14e3c:	1809883a 	mov	r4,r3
   14e40:	dfc00115 	stw	ra,4(sp)
   14e44:	10233115 	stw	zero,-29500(r2)
   14e48:	001541c0 	call	1541c <read>
   14e4c:	10ffffd8 	cmpnei	r3,r2,-1
   14e50:	18000426 	beq	r3,zero,14e64 <_read_r+0x44>
   14e54:	dfc00117 	ldw	ra,4(sp)
   14e58:	dc000017 	ldw	r16,0(sp)
   14e5c:	dec00204 	addi	sp,sp,8
   14e60:	f800283a 	ret
   14e64:	00c000b4 	movhi	r3,2
   14e68:	18e33117 	ldw	r3,-29500(r3)
   14e6c:	183ff926 	beq	r3,zero,14e54 <_read_r+0x34>
   14e70:	80c00015 	stw	r3,0(r16)
   14e74:	dfc00117 	ldw	ra,4(sp)
   14e78:	dc000017 	ldw	r16,0(sp)
   14e7c:	dec00204 	addi	sp,sp,8
   14e80:	f800283a 	ret

00014e84 <__divsi3>:
   14e84:	20001a16 	blt	r4,zero,14ef0 <__divsi3+0x6c>
   14e88:	000f883a 	mov	r7,zero
   14e8c:	2800020e 	bge	r5,zero,14e98 <__divsi3+0x14>
   14e90:	014bc83a 	sub	r5,zero,r5
   14e94:	39c0005c 	xori	r7,r7,1
   14e98:	200d883a 	mov	r6,r4
   14e9c:	00c00044 	movi	r3,1
   14ea0:	2900092e 	bgeu	r5,r4,14ec8 <__divsi3+0x44>
   14ea4:	00800804 	movi	r2,32
   14ea8:	00c00044 	movi	r3,1
   14eac:	00000106 	br	14eb4 <__divsi3+0x30>
   14eb0:	10001226 	beq	r2,zero,14efc <__divsi3+0x78>
   14eb4:	294b883a 	add	r5,r5,r5
   14eb8:	10bfffc4 	addi	r2,r2,-1
   14ebc:	18c7883a 	add	r3,r3,r3
   14ec0:	293ffb36 	bltu	r5,r4,14eb0 <__divsi3+0x2c>
   14ec4:	18000d26 	beq	r3,zero,14efc <__divsi3+0x78>
   14ec8:	0005883a 	mov	r2,zero
   14ecc:	31400236 	bltu	r6,r5,14ed8 <__divsi3+0x54>
   14ed0:	314dc83a 	sub	r6,r6,r5
   14ed4:	10c4b03a 	or	r2,r2,r3
   14ed8:	1806d07a 	srli	r3,r3,1
   14edc:	280ad07a 	srli	r5,r5,1
   14ee0:	183ffa1e 	bne	r3,zero,14ecc <__divsi3+0x48>
   14ee4:	38000126 	beq	r7,zero,14eec <__divsi3+0x68>
   14ee8:	0085c83a 	sub	r2,zero,r2
   14eec:	f800283a 	ret
   14ef0:	0109c83a 	sub	r4,zero,r4
   14ef4:	01c00044 	movi	r7,1
   14ef8:	003fe406 	br	14e8c <__divsi3+0x8>
   14efc:	0005883a 	mov	r2,zero
   14f00:	003ff806 	br	14ee4 <__divsi3+0x60>

00014f04 <__modsi3>:
   14f04:	20001916 	blt	r4,zero,14f6c <__modsi3+0x68>
   14f08:	000f883a 	mov	r7,zero
   14f0c:	2005883a 	mov	r2,r4
   14f10:	2800010e 	bge	r5,zero,14f18 <__modsi3+0x14>
   14f14:	014bc83a 	sub	r5,zero,r5
   14f18:	00c00044 	movi	r3,1
   14f1c:	2900092e 	bgeu	r5,r4,14f44 <__modsi3+0x40>
   14f20:	01800804 	movi	r6,32
   14f24:	00c00044 	movi	r3,1
   14f28:	00000106 	br	14f30 <__modsi3+0x2c>
   14f2c:	30000d26 	beq	r6,zero,14f64 <__modsi3+0x60>
   14f30:	294b883a 	add	r5,r5,r5
   14f34:	31bfffc4 	addi	r6,r6,-1
   14f38:	18c7883a 	add	r3,r3,r3
   14f3c:	293ffb36 	bltu	r5,r4,14f2c <__modsi3+0x28>
   14f40:	18000826 	beq	r3,zero,14f64 <__modsi3+0x60>
   14f44:	1806d07a 	srli	r3,r3,1
   14f48:	11400136 	bltu	r2,r5,14f50 <__modsi3+0x4c>
   14f4c:	1145c83a 	sub	r2,r2,r5
   14f50:	280ad07a 	srli	r5,r5,1
   14f54:	183ffb1e 	bne	r3,zero,14f44 <__modsi3+0x40>
   14f58:	38000126 	beq	r7,zero,14f60 <__modsi3+0x5c>
   14f5c:	0085c83a 	sub	r2,zero,r2
   14f60:	f800283a 	ret
   14f64:	2005883a 	mov	r2,r4
   14f68:	003ffb06 	br	14f58 <__modsi3+0x54>
   14f6c:	0109c83a 	sub	r4,zero,r4
   14f70:	01c00044 	movi	r7,1
   14f74:	003fe506 	br	14f0c <__modsi3+0x8>

00014f78 <__udivsi3>:
   14f78:	200d883a 	mov	r6,r4
   14f7c:	2900152e 	bgeu	r5,r4,14fd4 <__udivsi3+0x5c>
   14f80:	28001416 	blt	r5,zero,14fd4 <__udivsi3+0x5c>
   14f84:	00800804 	movi	r2,32
   14f88:	00c00044 	movi	r3,1
   14f8c:	00000206 	br	14f98 <__udivsi3+0x20>
   14f90:	10000e26 	beq	r2,zero,14fcc <__udivsi3+0x54>
   14f94:	28000516 	blt	r5,zero,14fac <__udivsi3+0x34>
   14f98:	294b883a 	add	r5,r5,r5
   14f9c:	10bfffc4 	addi	r2,r2,-1
   14fa0:	18c7883a 	add	r3,r3,r3
   14fa4:	293ffa36 	bltu	r5,r4,14f90 <__udivsi3+0x18>
   14fa8:	18000826 	beq	r3,zero,14fcc <__udivsi3+0x54>
   14fac:	0005883a 	mov	r2,zero
   14fb0:	31400236 	bltu	r6,r5,14fbc <__udivsi3+0x44>
   14fb4:	314dc83a 	sub	r6,r6,r5
   14fb8:	10c4b03a 	or	r2,r2,r3
   14fbc:	1806d07a 	srli	r3,r3,1
   14fc0:	280ad07a 	srli	r5,r5,1
   14fc4:	183ffa1e 	bne	r3,zero,14fb0 <__udivsi3+0x38>
   14fc8:	f800283a 	ret
   14fcc:	0005883a 	mov	r2,zero
   14fd0:	f800283a 	ret
   14fd4:	00c00044 	movi	r3,1
   14fd8:	003ff406 	br	14fac <__udivsi3+0x34>

00014fdc <__umodsi3>:
   14fdc:	2005883a 	mov	r2,r4
   14fe0:	2900132e 	bgeu	r5,r4,15030 <__umodsi3+0x54>
   14fe4:	28001216 	blt	r5,zero,15030 <__umodsi3+0x54>
   14fe8:	01800804 	movi	r6,32
   14fec:	00c00044 	movi	r3,1
   14ff0:	00000206 	br	14ffc <__umodsi3+0x20>
   14ff4:	30000c26 	beq	r6,zero,15028 <__umodsi3+0x4c>
   14ff8:	28000516 	blt	r5,zero,15010 <__umodsi3+0x34>
   14ffc:	294b883a 	add	r5,r5,r5
   15000:	31bfffc4 	addi	r6,r6,-1
   15004:	18c7883a 	add	r3,r3,r3
   15008:	293ffa36 	bltu	r5,r4,14ff4 <__umodsi3+0x18>
   1500c:	18000626 	beq	r3,zero,15028 <__umodsi3+0x4c>
   15010:	1806d07a 	srli	r3,r3,1
   15014:	11400136 	bltu	r2,r5,1501c <__umodsi3+0x40>
   15018:	1145c83a 	sub	r2,r2,r5
   1501c:	280ad07a 	srli	r5,r5,1
   15020:	183ffb1e 	bne	r3,zero,15010 <__umodsi3+0x34>
   15024:	f800283a 	ret
   15028:	2005883a 	mov	r2,r4
   1502c:	f800283a 	ret
   15030:	00c00044 	movi	r3,1
   15034:	003ff606 	br	15010 <__umodsi3+0x34>

00015038 <__mulsi3>:
   15038:	0005883a 	mov	r2,zero
   1503c:	20000726 	beq	r4,zero,1505c <__mulsi3+0x24>
   15040:	20c0004c 	andi	r3,r4,1
   15044:	2008d07a 	srli	r4,r4,1
   15048:	18000126 	beq	r3,zero,15050 <__mulsi3+0x18>
   1504c:	1145883a 	add	r2,r2,r5
   15050:	294b883a 	add	r5,r5,r5
   15054:	203ffa1e 	bne	r4,zero,15040 <__mulsi3+0x8>
   15058:	f800283a 	ret
   1505c:	f800283a 	ret

00015060 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15060:	defffd04 	addi	sp,sp,-12
   15064:	df000215 	stw	fp,8(sp)
   15068:	df000204 	addi	fp,sp,8
   1506c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   15070:	0001883a 	nop
   15074:	e0bffe17 	ldw	r2,-8(fp)
   15078:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1507c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   15080:	10000226 	beq	r2,zero,1508c <_exit+0x2c>
    ALT_SIM_FAIL();
   15084:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   15088:	00000106 	br	15090 <_exit+0x30>
    ALT_SIM_PASS();
   1508c:	002af0b0 	cmpltui	zero,zero,43970
}
   15090:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   15094:	003fff06 	br	15094 <_exit+0x34>

00015098 <alt_get_errno>:
{
   15098:	defffe04 	addi	sp,sp,-8
   1509c:	dfc00115 	stw	ra,4(sp)
   150a0:	df000015 	stw	fp,0(sp)
   150a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   150a8:	d0a00517 	ldw	r2,-32748(gp)
   150ac:	10000326 	beq	r2,zero,150bc <alt_get_errno+0x24>
   150b0:	d0a00517 	ldw	r2,-32748(gp)
   150b4:	103ee83a 	callr	r2
   150b8:	00000106 	br	150c0 <alt_get_errno+0x28>
   150bc:	d0a6bb04 	addi	r2,gp,-25876
}
   150c0:	e037883a 	mov	sp,fp
   150c4:	dfc00117 	ldw	ra,4(sp)
   150c8:	df000017 	ldw	fp,0(sp)
   150cc:	dec00204 	addi	sp,sp,8
   150d0:	f800283a 	ret

000150d4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   150d4:	defffb04 	addi	sp,sp,-20
   150d8:	dfc00415 	stw	ra,16(sp)
   150dc:	df000315 	stw	fp,12(sp)
   150e0:	df000304 	addi	fp,sp,12
   150e4:	e13ffe15 	stw	r4,-8(fp)
   150e8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   150ec:	e0bffe17 	ldw	r2,-8(fp)
   150f0:	10000916 	blt	r2,zero,15118 <fstat+0x44>
   150f4:	e0fffe17 	ldw	r3,-8(fp)
   150f8:	1805883a 	mov	r2,r3
   150fc:	1085883a 	add	r2,r2,r2
   15100:	10c5883a 	add	r2,r2,r3
   15104:	100490ba 	slli	r2,r2,2
   15108:	00c00074 	movhi	r3,1
   1510c:	18da0b04 	addi	r3,r3,26668
   15110:	10c5883a 	add	r2,r2,r3
   15114:	00000106 	br	1511c <fstat+0x48>
   15118:	0005883a 	mov	r2,zero
   1511c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15120:	e0bfff17 	ldw	r2,-4(fp)
   15124:	10001026 	beq	r2,zero,15168 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15128:	e0bfff17 	ldw	r2,-4(fp)
   1512c:	10800017 	ldw	r2,0(r2)
   15130:	10800817 	ldw	r2,32(r2)
   15134:	10000726 	beq	r2,zero,15154 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   15138:	e0bfff17 	ldw	r2,-4(fp)
   1513c:	10800017 	ldw	r2,0(r2)
   15140:	10800817 	ldw	r2,32(r2)
   15144:	e17ffd17 	ldw	r5,-12(fp)
   15148:	e13fff17 	ldw	r4,-4(fp)
   1514c:	103ee83a 	callr	r2
   15150:	00000a06 	br	1517c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15154:	e0bffd17 	ldw	r2,-12(fp)
   15158:	00c80004 	movi	r3,8192
   1515c:	10c00115 	stw	r3,4(r2)
      return 0;
   15160:	0005883a 	mov	r2,zero
   15164:	00000506 	br	1517c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15168:	00150980 	call	15098 <alt_get_errno>
   1516c:	1007883a 	mov	r3,r2
   15170:	00801444 	movi	r2,81
   15174:	18800015 	stw	r2,0(r3)
    return -1;
   15178:	00bfffc4 	movi	r2,-1
  }
}
   1517c:	e037883a 	mov	sp,fp
   15180:	dfc00117 	ldw	ra,4(sp)
   15184:	df000017 	ldw	fp,0(sp)
   15188:	dec00204 	addi	sp,sp,8
   1518c:	f800283a 	ret

00015190 <alt_get_errno>:
{
   15190:	defffe04 	addi	sp,sp,-8
   15194:	dfc00115 	stw	ra,4(sp)
   15198:	df000015 	stw	fp,0(sp)
   1519c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   151a0:	d0a00517 	ldw	r2,-32748(gp)
   151a4:	10000326 	beq	r2,zero,151b4 <alt_get_errno+0x24>
   151a8:	d0a00517 	ldw	r2,-32748(gp)
   151ac:	103ee83a 	callr	r2
   151b0:	00000106 	br	151b8 <alt_get_errno+0x28>
   151b4:	d0a6bb04 	addi	r2,gp,-25876
}
   151b8:	e037883a 	mov	sp,fp
   151bc:	dfc00117 	ldw	ra,4(sp)
   151c0:	df000017 	ldw	fp,0(sp)
   151c4:	dec00204 	addi	sp,sp,8
   151c8:	f800283a 	ret

000151cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   151cc:	deffea04 	addi	sp,sp,-88
   151d0:	dfc01515 	stw	ra,84(sp)
   151d4:	df001415 	stw	fp,80(sp)
   151d8:	df001404 	addi	fp,sp,80
   151dc:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   151e0:	e0bfec17 	ldw	r2,-80(fp)
   151e4:	10000916 	blt	r2,zero,1520c <isatty+0x40>
   151e8:	e0ffec17 	ldw	r3,-80(fp)
   151ec:	1805883a 	mov	r2,r3
   151f0:	1085883a 	add	r2,r2,r2
   151f4:	10c5883a 	add	r2,r2,r3
   151f8:	100490ba 	slli	r2,r2,2
   151fc:	00c00074 	movhi	r3,1
   15200:	18da0b04 	addi	r3,r3,26668
   15204:	10c5883a 	add	r2,r2,r3
   15208:	00000106 	br	15210 <isatty+0x44>
   1520c:	0005883a 	mov	r2,zero
   15210:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15214:	e0bfff17 	ldw	r2,-4(fp)
   15218:	10000e26 	beq	r2,zero,15254 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1521c:	e0bfff17 	ldw	r2,-4(fp)
   15220:	10800017 	ldw	r2,0(r2)
   15224:	10800817 	ldw	r2,32(r2)
   15228:	1000021e 	bne	r2,zero,15234 <isatty+0x68>
    {
      return 1;
   1522c:	00800044 	movi	r2,1
   15230:	00000d06 	br	15268 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15234:	e0bfed04 	addi	r2,fp,-76
   15238:	100b883a 	mov	r5,r2
   1523c:	e13fec17 	ldw	r4,-80(fp)
   15240:	00150d40 	call	150d4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15244:	e0bfee17 	ldw	r2,-72(fp)
   15248:	10880020 	cmpeqi	r2,r2,8192
   1524c:	10803fcc 	andi	r2,r2,255
   15250:	00000506 	br	15268 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15254:	00151900 	call	15190 <alt_get_errno>
   15258:	1007883a 	mov	r3,r2
   1525c:	00801444 	movi	r2,81
   15260:	18800015 	stw	r2,0(r3)
    return 0;
   15264:	0005883a 	mov	r2,zero
  }
}
   15268:	e037883a 	mov	sp,fp
   1526c:	dfc00117 	ldw	ra,4(sp)
   15270:	df000017 	ldw	fp,0(sp)
   15274:	dec00204 	addi	sp,sp,8
   15278:	f800283a 	ret

0001527c <alt_get_errno>:
{
   1527c:	defffe04 	addi	sp,sp,-8
   15280:	dfc00115 	stw	ra,4(sp)
   15284:	df000015 	stw	fp,0(sp)
   15288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1528c:	d0a00517 	ldw	r2,-32748(gp)
   15290:	10000326 	beq	r2,zero,152a0 <alt_get_errno+0x24>
   15294:	d0a00517 	ldw	r2,-32748(gp)
   15298:	103ee83a 	callr	r2
   1529c:	00000106 	br	152a4 <alt_get_errno+0x28>
   152a0:	d0a6bb04 	addi	r2,gp,-25876
}
   152a4:	e037883a 	mov	sp,fp
   152a8:	dfc00117 	ldw	ra,4(sp)
   152ac:	df000017 	ldw	fp,0(sp)
   152b0:	dec00204 	addi	sp,sp,8
   152b4:	f800283a 	ret

000152b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   152b8:	defff904 	addi	sp,sp,-28
   152bc:	dfc00615 	stw	ra,24(sp)
   152c0:	df000515 	stw	fp,20(sp)
   152c4:	df000504 	addi	fp,sp,20
   152c8:	e13ffd15 	stw	r4,-12(fp)
   152cc:	e17ffc15 	stw	r5,-16(fp)
   152d0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   152d4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   152d8:	e0bffd17 	ldw	r2,-12(fp)
   152dc:	10000916 	blt	r2,zero,15304 <lseek+0x4c>
   152e0:	e0fffd17 	ldw	r3,-12(fp)
   152e4:	1805883a 	mov	r2,r3
   152e8:	1085883a 	add	r2,r2,r2
   152ec:	10c5883a 	add	r2,r2,r3
   152f0:	100490ba 	slli	r2,r2,2
   152f4:	00c00074 	movhi	r3,1
   152f8:	18da0b04 	addi	r3,r3,26668
   152fc:	10c5883a 	add	r2,r2,r3
   15300:	00000106 	br	15308 <lseek+0x50>
   15304:	0005883a 	mov	r2,zero
   15308:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   1530c:	e0bffe17 	ldw	r2,-8(fp)
   15310:	10001026 	beq	r2,zero,15354 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   15314:	e0bffe17 	ldw	r2,-8(fp)
   15318:	10800017 	ldw	r2,0(r2)
   1531c:	10800717 	ldw	r2,28(r2)
   15320:	10000926 	beq	r2,zero,15348 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   15324:	e0bffe17 	ldw	r2,-8(fp)
   15328:	10800017 	ldw	r2,0(r2)
   1532c:	10800717 	ldw	r2,28(r2)
   15330:	e1bffb17 	ldw	r6,-20(fp)
   15334:	e17ffc17 	ldw	r5,-16(fp)
   15338:	e13ffe17 	ldw	r4,-8(fp)
   1533c:	103ee83a 	callr	r2
   15340:	e0bfff15 	stw	r2,-4(fp)
   15344:	00000506 	br	1535c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15348:	00bfde84 	movi	r2,-134
   1534c:	e0bfff15 	stw	r2,-4(fp)
   15350:	00000206 	br	1535c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   15354:	00bfebc4 	movi	r2,-81
   15358:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   1535c:	e0bfff17 	ldw	r2,-4(fp)
   15360:	1000070e 	bge	r2,zero,15380 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   15364:	001527c0 	call	1527c <alt_get_errno>
   15368:	1007883a 	mov	r3,r2
   1536c:	e0bfff17 	ldw	r2,-4(fp)
   15370:	0085c83a 	sub	r2,zero,r2
   15374:	18800015 	stw	r2,0(r3)
    rc = -1;
   15378:	00bfffc4 	movi	r2,-1
   1537c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   15380:	e0bfff17 	ldw	r2,-4(fp)
}
   15384:	e037883a 	mov	sp,fp
   15388:	dfc00117 	ldw	ra,4(sp)
   1538c:	df000017 	ldw	fp,0(sp)
   15390:	dec00204 	addi	sp,sp,8
   15394:	f800283a 	ret

00015398 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   15398:	defffe04 	addi	sp,sp,-8
   1539c:	df000115 	stw	fp,4(sp)
   153a0:	df000104 	addi	fp,sp,4
   153a4:	e13fff15 	stw	r4,-4(fp)
}
   153a8:	0001883a 	nop
   153ac:	e037883a 	mov	sp,fp
   153b0:	df000017 	ldw	fp,0(sp)
   153b4:	dec00104 	addi	sp,sp,4
   153b8:	f800283a 	ret

000153bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   153bc:	defffe04 	addi	sp,sp,-8
   153c0:	df000115 	stw	fp,4(sp)
   153c4:	df000104 	addi	fp,sp,4
   153c8:	e13fff15 	stw	r4,-4(fp)
}
   153cc:	0001883a 	nop
   153d0:	e037883a 	mov	sp,fp
   153d4:	df000017 	ldw	fp,0(sp)
   153d8:	dec00104 	addi	sp,sp,4
   153dc:	f800283a 	ret

000153e0 <alt_get_errno>:
{
   153e0:	defffe04 	addi	sp,sp,-8
   153e4:	dfc00115 	stw	ra,4(sp)
   153e8:	df000015 	stw	fp,0(sp)
   153ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   153f0:	d0a00517 	ldw	r2,-32748(gp)
   153f4:	10000326 	beq	r2,zero,15404 <alt_get_errno+0x24>
   153f8:	d0a00517 	ldw	r2,-32748(gp)
   153fc:	103ee83a 	callr	r2
   15400:	00000106 	br	15408 <alt_get_errno+0x28>
   15404:	d0a6bb04 	addi	r2,gp,-25876
}
   15408:	e037883a 	mov	sp,fp
   1540c:	dfc00117 	ldw	ra,4(sp)
   15410:	df000017 	ldw	fp,0(sp)
   15414:	dec00204 	addi	sp,sp,8
   15418:	f800283a 	ret

0001541c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1541c:	defff904 	addi	sp,sp,-28
   15420:	dfc00615 	stw	ra,24(sp)
   15424:	df000515 	stw	fp,20(sp)
   15428:	df000504 	addi	fp,sp,20
   1542c:	e13ffd15 	stw	r4,-12(fp)
   15430:	e17ffc15 	stw	r5,-16(fp)
   15434:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15438:	e0bffd17 	ldw	r2,-12(fp)
   1543c:	10000916 	blt	r2,zero,15464 <read+0x48>
   15440:	e0fffd17 	ldw	r3,-12(fp)
   15444:	1805883a 	mov	r2,r3
   15448:	1085883a 	add	r2,r2,r2
   1544c:	10c5883a 	add	r2,r2,r3
   15450:	100490ba 	slli	r2,r2,2
   15454:	00c00074 	movhi	r3,1
   15458:	18da0b04 	addi	r3,r3,26668
   1545c:	10c5883a 	add	r2,r2,r3
   15460:	00000106 	br	15468 <read+0x4c>
   15464:	0005883a 	mov	r2,zero
   15468:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1546c:	e0bfff17 	ldw	r2,-4(fp)
   15470:	10002226 	beq	r2,zero,154fc <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15474:	e0bfff17 	ldw	r2,-4(fp)
   15478:	10800217 	ldw	r2,8(r2)
   1547c:	108000cc 	andi	r2,r2,3
   15480:	10800060 	cmpeqi	r2,r2,1
   15484:	1000181e 	bne	r2,zero,154e8 <read+0xcc>
        (fd->dev->read))
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	10800017 	ldw	r2,0(r2)
   15490:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15494:	10001426 	beq	r2,zero,154e8 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15498:	e0bfff17 	ldw	r2,-4(fp)
   1549c:	10800017 	ldw	r2,0(r2)
   154a0:	10800517 	ldw	r2,20(r2)
   154a4:	e0fffb17 	ldw	r3,-20(fp)
   154a8:	180d883a 	mov	r6,r3
   154ac:	e17ffc17 	ldw	r5,-16(fp)
   154b0:	e13fff17 	ldw	r4,-4(fp)
   154b4:	103ee83a 	callr	r2
   154b8:	e0bffe15 	stw	r2,-8(fp)
   154bc:	e0bffe17 	ldw	r2,-8(fp)
   154c0:	1000070e 	bge	r2,zero,154e0 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   154c4:	00153e00 	call	153e0 <alt_get_errno>
   154c8:	1007883a 	mov	r3,r2
   154cc:	e0bffe17 	ldw	r2,-8(fp)
   154d0:	0085c83a 	sub	r2,zero,r2
   154d4:	18800015 	stw	r2,0(r3)
          return -1;
   154d8:	00bfffc4 	movi	r2,-1
   154dc:	00000c06 	br	15510 <read+0xf4>
        }
        return rval;
   154e0:	e0bffe17 	ldw	r2,-8(fp)
   154e4:	00000a06 	br	15510 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   154e8:	00153e00 	call	153e0 <alt_get_errno>
   154ec:	1007883a 	mov	r3,r2
   154f0:	00800344 	movi	r2,13
   154f4:	18800015 	stw	r2,0(r3)
   154f8:	00000406 	br	1550c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   154fc:	00153e00 	call	153e0 <alt_get_errno>
   15500:	1007883a 	mov	r3,r2
   15504:	00801444 	movi	r2,81
   15508:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1550c:	00bfffc4 	movi	r2,-1
}
   15510:	e037883a 	mov	sp,fp
   15514:	dfc00117 	ldw	ra,4(sp)
   15518:	df000017 	ldw	fp,0(sp)
   1551c:	dec00204 	addi	sp,sp,8
   15520:	f800283a 	ret

00015524 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15524:	defff904 	addi	sp,sp,-28
   15528:	df000615 	stw	fp,24(sp)
   1552c:	df000604 	addi	fp,sp,24
   15530:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   15534:	0005303a 	rdctl	r2,status
   15538:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1553c:	e0fffd17 	ldw	r3,-12(fp)
   15540:	00bfff84 	movi	r2,-2
   15544:	1884703a 	and	r2,r3,r2
   15548:	1001703a 	wrctl	status,r2
  return context;
   1554c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15550:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15554:	d0a00d17 	ldw	r2,-32716(gp)
   15558:	10c000c4 	addi	r3,r2,3
   1555c:	00bfff04 	movi	r2,-4
   15560:	1884703a 	and	r2,r3,r2
   15564:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15568:	d0e00d17 	ldw	r3,-32716(gp)
   1556c:	e0bffa17 	ldw	r2,-24(fp)
   15570:	1887883a 	add	r3,r3,r2
   15574:	008000b4 	movhi	r2,2
   15578:	10800004 	addi	r2,r2,0
   1557c:	10c0072e 	bgeu	r2,r3,1559c <sbrk+0x78>
   15580:	e0bfff17 	ldw	r2,-4(fp)
   15584:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15588:	e0bffc17 	ldw	r2,-16(fp)
   1558c:	1001703a 	wrctl	status,r2
}
   15590:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15594:	00bfffc4 	movi	r2,-1
   15598:	00000c06 	br	155cc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1559c:	d0a00d17 	ldw	r2,-32716(gp)
   155a0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   155a4:	d0e00d17 	ldw	r3,-32716(gp)
   155a8:	e0bffa17 	ldw	r2,-24(fp)
   155ac:	1885883a 	add	r2,r3,r2
   155b0:	d0a00d15 	stw	r2,-32716(gp)
   155b4:	e0bfff17 	ldw	r2,-4(fp)
   155b8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   155bc:	e0bffb17 	ldw	r2,-20(fp)
   155c0:	1001703a 	wrctl	status,r2
}
   155c4:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   155c8:	e0bffe17 	ldw	r2,-8(fp)
} 
   155cc:	e037883a 	mov	sp,fp
   155d0:	df000017 	ldw	fp,0(sp)
   155d4:	dec00104 	addi	sp,sp,4
   155d8:	f800283a 	ret

000155dc <alt_get_errno>:
{
   155dc:	defffe04 	addi	sp,sp,-8
   155e0:	dfc00115 	stw	ra,4(sp)
   155e4:	df000015 	stw	fp,0(sp)
   155e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   155ec:	d0a00517 	ldw	r2,-32748(gp)
   155f0:	10000326 	beq	r2,zero,15600 <alt_get_errno+0x24>
   155f4:	d0a00517 	ldw	r2,-32748(gp)
   155f8:	103ee83a 	callr	r2
   155fc:	00000106 	br	15604 <alt_get_errno+0x28>
   15600:	d0a6bb04 	addi	r2,gp,-25876
}
   15604:	e037883a 	mov	sp,fp
   15608:	dfc00117 	ldw	ra,4(sp)
   1560c:	df000017 	ldw	fp,0(sp)
   15610:	dec00204 	addi	sp,sp,8
   15614:	f800283a 	ret

00015618 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15618:	defff904 	addi	sp,sp,-28
   1561c:	dfc00615 	stw	ra,24(sp)
   15620:	df000515 	stw	fp,20(sp)
   15624:	df000504 	addi	fp,sp,20
   15628:	e13ffd15 	stw	r4,-12(fp)
   1562c:	e17ffc15 	stw	r5,-16(fp)
   15630:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15634:	e0bffd17 	ldw	r2,-12(fp)
   15638:	10000916 	blt	r2,zero,15660 <write+0x48>
   1563c:	e0fffd17 	ldw	r3,-12(fp)
   15640:	1805883a 	mov	r2,r3
   15644:	1085883a 	add	r2,r2,r2
   15648:	10c5883a 	add	r2,r2,r3
   1564c:	100490ba 	slli	r2,r2,2
   15650:	00c00074 	movhi	r3,1
   15654:	18da0b04 	addi	r3,r3,26668
   15658:	10c5883a 	add	r2,r2,r3
   1565c:	00000106 	br	15664 <write+0x4c>
   15660:	0005883a 	mov	r2,zero
   15664:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15668:	e0bfff17 	ldw	r2,-4(fp)
   1566c:	10002126 	beq	r2,zero,156f4 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   15670:	e0bfff17 	ldw	r2,-4(fp)
   15674:	10800217 	ldw	r2,8(r2)
   15678:	108000cc 	andi	r2,r2,3
   1567c:	10001826 	beq	r2,zero,156e0 <write+0xc8>
   15680:	e0bfff17 	ldw	r2,-4(fp)
   15684:	10800017 	ldw	r2,0(r2)
   15688:	10800617 	ldw	r2,24(r2)
   1568c:	10001426 	beq	r2,zero,156e0 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15690:	e0bfff17 	ldw	r2,-4(fp)
   15694:	10800017 	ldw	r2,0(r2)
   15698:	10800617 	ldw	r2,24(r2)
   1569c:	e0fffb17 	ldw	r3,-20(fp)
   156a0:	180d883a 	mov	r6,r3
   156a4:	e17ffc17 	ldw	r5,-16(fp)
   156a8:	e13fff17 	ldw	r4,-4(fp)
   156ac:	103ee83a 	callr	r2
   156b0:	e0bffe15 	stw	r2,-8(fp)
   156b4:	e0bffe17 	ldw	r2,-8(fp)
   156b8:	1000070e 	bge	r2,zero,156d8 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   156bc:	00155dc0 	call	155dc <alt_get_errno>
   156c0:	1007883a 	mov	r3,r2
   156c4:	e0bffe17 	ldw	r2,-8(fp)
   156c8:	0085c83a 	sub	r2,zero,r2
   156cc:	18800015 	stw	r2,0(r3)
        return -1;
   156d0:	00bfffc4 	movi	r2,-1
   156d4:	00000c06 	br	15708 <write+0xf0>
      }
      return rval;
   156d8:	e0bffe17 	ldw	r2,-8(fp)
   156dc:	00000a06 	br	15708 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   156e0:	00155dc0 	call	155dc <alt_get_errno>
   156e4:	1007883a 	mov	r3,r2
   156e8:	00800344 	movi	r2,13
   156ec:	18800015 	stw	r2,0(r3)
   156f0:	00000406 	br	15704 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   156f4:	00155dc0 	call	155dc <alt_get_errno>
   156f8:	1007883a 	mov	r3,r2
   156fc:	00801444 	movi	r2,81
   15700:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15704:	00bfffc4 	movi	r2,-1
}
   15708:	e037883a 	mov	sp,fp
   1570c:	dfc00117 	ldw	ra,4(sp)
   15710:	df000017 	ldw	fp,0(sp)
   15714:	dec00204 	addi	sp,sp,8
   15718:	f800283a 	ret
